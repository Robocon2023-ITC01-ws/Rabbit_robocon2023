
PID_driver_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cb0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08006dc0  08006dc0  00016dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006de8  08006de8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006de8  08006de8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006de8  08006de8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006de8  08006de8  00016de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dec  08006dec  00016dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000010  08006e00  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08006e00  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f13a  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002517  00000000  00000000  0002f173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00031690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  000325a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184e1  00000000  00000000  000333c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c83  00000000  00000000  0004b8a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ce07  00000000  00000000  0005c524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e932b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004274  00000000  00000000  000e937c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08006da8 	.word	0x08006da8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08006da8 	.word	0x08006da8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_frsub>:
 8000adc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ae0:	e002      	b.n	8000ae8 <__addsf3>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_fsub>:
 8000ae4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae8 <__addsf3>:
 8000ae8:	0042      	lsls	r2, r0, #1
 8000aea:	bf1f      	itttt	ne
 8000aec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000af0:	ea92 0f03 	teqne	r2, r3
 8000af4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000afc:	d06a      	beq.n	8000bd4 <__addsf3+0xec>
 8000afe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b06:	bfc1      	itttt	gt
 8000b08:	18d2      	addgt	r2, r2, r3
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	4048      	eorgt	r0, r1
 8000b0e:	4041      	eorgt	r1, r0
 8000b10:	bfb8      	it	lt
 8000b12:	425b      	neglt	r3, r3
 8000b14:	2b19      	cmp	r3, #25
 8000b16:	bf88      	it	hi
 8000b18:	4770      	bxhi	lr
 8000b1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b26:	bf18      	it	ne
 8000b28:	4240      	negne	r0, r0
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4249      	negne	r1, r1
 8000b3a:	ea92 0f03 	teq	r2, r3
 8000b3e:	d03f      	beq.n	8000bc0 <__addsf3+0xd8>
 8000b40:	f1a2 0201 	sub.w	r2, r2, #1
 8000b44:	fa41 fc03 	asr.w	ip, r1, r3
 8000b48:	eb10 000c 	adds.w	r0, r0, ip
 8000b4c:	f1c3 0320 	rsb	r3, r3, #32
 8000b50:	fa01 f103 	lsl.w	r1, r1, r3
 8000b54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__addsf3+0x78>
 8000b5a:	4249      	negs	r1, r1
 8000b5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b64:	d313      	bcc.n	8000b8e <__addsf3+0xa6>
 8000b66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b6a:	d306      	bcc.n	8000b7a <__addsf3+0x92>
 8000b6c:	0840      	lsrs	r0, r0, #1
 8000b6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b72:	f102 0201 	add.w	r2, r2, #1
 8000b76:	2afe      	cmp	r2, #254	; 0xfe
 8000b78:	d251      	bcs.n	8000c1e <__addsf3+0x136>
 8000b7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b82:	bf08      	it	eq
 8000b84:	f020 0001 	biceq.w	r0, r0, #1
 8000b88:	ea40 0003 	orr.w	r0, r0, r3
 8000b8c:	4770      	bx	lr
 8000b8e:	0049      	lsls	r1, r1, #1
 8000b90:	eb40 0000 	adc.w	r0, r0, r0
 8000b94:	3a01      	subs	r2, #1
 8000b96:	bf28      	it	cs
 8000b98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b9c:	d2ed      	bcs.n	8000b7a <__addsf3+0x92>
 8000b9e:	fab0 fc80 	clz	ip, r0
 8000ba2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba6:	ebb2 020c 	subs.w	r2, r2, ip
 8000baa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bae:	bfaa      	itet	ge
 8000bb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb4:	4252      	neglt	r2, r2
 8000bb6:	4318      	orrge	r0, r3
 8000bb8:	bfbc      	itt	lt
 8000bba:	40d0      	lsrlt	r0, r2
 8000bbc:	4318      	orrlt	r0, r3
 8000bbe:	4770      	bx	lr
 8000bc0:	f092 0f00 	teq	r2, #0
 8000bc4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc8:	bf06      	itte	eq
 8000bca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bce:	3201      	addeq	r2, #1
 8000bd0:	3b01      	subne	r3, #1
 8000bd2:	e7b5      	b.n	8000b40 <__addsf3+0x58>
 8000bd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bdc:	bf18      	it	ne
 8000bde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be2:	d021      	beq.n	8000c28 <__addsf3+0x140>
 8000be4:	ea92 0f03 	teq	r2, r3
 8000be8:	d004      	beq.n	8000bf4 <__addsf3+0x10c>
 8000bea:	f092 0f00 	teq	r2, #0
 8000bee:	bf08      	it	eq
 8000bf0:	4608      	moveq	r0, r1
 8000bf2:	4770      	bx	lr
 8000bf4:	ea90 0f01 	teq	r0, r1
 8000bf8:	bf1c      	itt	ne
 8000bfa:	2000      	movne	r0, #0
 8000bfc:	4770      	bxne	lr
 8000bfe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c02:	d104      	bne.n	8000c0e <__addsf3+0x126>
 8000c04:	0040      	lsls	r0, r0, #1
 8000c06:	bf28      	it	cs
 8000c08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c0c:	4770      	bx	lr
 8000c0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c12:	bf3c      	itt	cc
 8000c14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bxcc	lr
 8000c1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	4770      	bx	lr
 8000c28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c2c:	bf16      	itet	ne
 8000c2e:	4608      	movne	r0, r1
 8000c30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c34:	4601      	movne	r1, r0
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	bf06      	itte	eq
 8000c3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3e:	ea90 0f01 	teqeq	r0, r1
 8000c42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_ui2f>:
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e004      	b.n	8000c58 <__aeabi_i2f+0x8>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_i2f>:
 8000c50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c54:	bf48      	it	mi
 8000c56:	4240      	negmi	r0, r0
 8000c58:	ea5f 0c00 	movs.w	ip, r0
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c64:	4601      	mov	r1, r0
 8000c66:	f04f 0000 	mov.w	r0, #0
 8000c6a:	e01c      	b.n	8000ca6 <__aeabi_l2f+0x2a>

08000c6c <__aeabi_ul2f>:
 8000c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e00a      	b.n	8000c90 <__aeabi_l2f+0x14>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_l2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c88:	d502      	bpl.n	8000c90 <__aeabi_l2f+0x14>
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	ea5f 0c01 	movs.w	ip, r1
 8000c94:	bf02      	ittt	eq
 8000c96:	4684      	moveq	ip, r0
 8000c98:	4601      	moveq	r1, r0
 8000c9a:	2000      	moveq	r0, #0
 8000c9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ca0:	bf08      	it	eq
 8000ca2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000caa:	fabc f28c 	clz	r2, ip
 8000cae:	3a08      	subs	r2, #8
 8000cb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb4:	db10      	blt.n	8000cd8 <__aeabi_l2f+0x5c>
 8000cb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cba:	4463      	add	r3, ip
 8000cbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f102 0220 	add.w	r2, r2, #32
 8000cdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_fmul>:
 8000cf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d00:	bf1e      	ittt	ne
 8000d02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d06:	ea92 0f0c 	teqne	r2, ip
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d06f      	beq.n	8000df0 <__aeabi_fmul+0xf8>
 8000d10:	441a      	add	r2, r3
 8000d12:	ea80 0c01 	eor.w	ip, r0, r1
 8000d16:	0240      	lsls	r0, r0, #9
 8000d18:	bf18      	it	ne
 8000d1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1e:	d01e      	beq.n	8000d5e <__aeabi_fmul+0x66>
 8000d20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d38:	bf3e      	ittt	cc
 8000d3a:	0049      	lslcc	r1, r1, #1
 8000d3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d40:	005b      	lslcc	r3, r3, #1
 8000d42:	ea40 0001 	orr.w	r0, r0, r1
 8000d46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d4a:	2afd      	cmp	r2, #253	; 0xfd
 8000d4c:	d81d      	bhi.n	8000d8a <__aeabi_fmul+0x92>
 8000d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d56:	bf08      	it	eq
 8000d58:	f020 0001 	biceq.w	r0, r0, #1
 8000d5c:	4770      	bx	lr
 8000d5e:	f090 0f00 	teq	r0, #0
 8000d62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d66:	bf08      	it	eq
 8000d68:	0249      	lsleq	r1, r1, #9
 8000d6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d72:	3a7f      	subs	r2, #127	; 0x7f
 8000d74:	bfc2      	ittt	gt
 8000d76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7e:	4770      	bxgt	lr
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	dc5d      	bgt.n	8000e48 <__aeabi_fmul+0x150>
 8000d8c:	f112 0f19 	cmn.w	r2, #25
 8000d90:	bfdc      	itt	le
 8000d92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d96:	4770      	bxle	lr
 8000d98:	f1c2 0200 	rsb	r2, r2, #0
 8000d9c:	0041      	lsls	r1, r0, #1
 8000d9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000da2:	f1c2 0220 	rsb	r2, r2, #32
 8000da6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000daa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dae:	f140 0000 	adc.w	r0, r0, #0
 8000db2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db6:	bf08      	it	eq
 8000db8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbc:	4770      	bx	lr
 8000dbe:	f092 0f00 	teq	r2, #0
 8000dc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0040      	lsleq	r0, r0, #1
 8000dca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dce:	3a01      	subeq	r2, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fmul+0xce>
 8000dd2:	ea40 000c 	orr.w	r0, r0, ip
 8000dd6:	f093 0f00 	teq	r3, #0
 8000dda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dde:	bf02      	ittt	eq
 8000de0:	0049      	lsleq	r1, r1, #1
 8000de2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de6:	3b01      	subeq	r3, #1
 8000de8:	d0f9      	beq.n	8000dde <__aeabi_fmul+0xe6>
 8000dea:	ea41 010c 	orr.w	r1, r1, ip
 8000dee:	e78f      	b.n	8000d10 <__aeabi_fmul+0x18>
 8000df0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df4:	ea92 0f0c 	teq	r2, ip
 8000df8:	bf18      	it	ne
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d00a      	beq.n	8000e16 <__aeabi_fmul+0x11e>
 8000e00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e04:	bf18      	it	ne
 8000e06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	d1d8      	bne.n	8000dbe <__aeabi_fmul+0xc6>
 8000e0c:	ea80 0001 	eor.w	r0, r0, r1
 8000e10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e14:	4770      	bx	lr
 8000e16:	f090 0f00 	teq	r0, #0
 8000e1a:	bf17      	itett	ne
 8000e1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e20:	4608      	moveq	r0, r1
 8000e22:	f091 0f00 	teqne	r1, #0
 8000e26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e2a:	d014      	beq.n	8000e56 <__aeabi_fmul+0x15e>
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	d101      	bne.n	8000e36 <__aeabi_fmul+0x13e>
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	d10f      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e36:	ea93 0f0c 	teq	r3, ip
 8000e3a:	d103      	bne.n	8000e44 <__aeabi_fmul+0x14c>
 8000e3c:	024b      	lsls	r3, r1, #9
 8000e3e:	bf18      	it	ne
 8000e40:	4608      	movne	r0, r1
 8000e42:	d108      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e54:	4770      	bx	lr
 8000e56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5e:	4770      	bx	lr

08000e60 <__aeabi_fdiv>:
 8000e60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e68:	bf1e      	ittt	ne
 8000e6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6e:	ea92 0f0c 	teqne	r2, ip
 8000e72:	ea93 0f0c 	teqne	r3, ip
 8000e76:	d069      	beq.n	8000f4c <__aeabi_fdiv+0xec>
 8000e78:	eba2 0203 	sub.w	r2, r2, r3
 8000e7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e80:	0249      	lsls	r1, r1, #9
 8000e82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e86:	d037      	beq.n	8000ef8 <__aeabi_fdiv+0x98>
 8000e88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	bf38      	it	cc
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ea2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	bf24      	itt	cs
 8000eaa:	1a5b      	subcs	r3, r3, r1
 8000eac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eb0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb4:	bf24      	itt	cs
 8000eb6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ebe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ec2:	bf24      	itt	cs
 8000ec4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ecc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ed0:	bf24      	itt	cs
 8000ed2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	bf18      	it	ne
 8000ede:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ee2:	d1e0      	bne.n	8000ea6 <__aeabi_fdiv+0x46>
 8000ee4:	2afd      	cmp	r2, #253	; 0xfd
 8000ee6:	f63f af50 	bhi.w	8000d8a <__aeabi_fmul+0x92>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ef0:	bf08      	it	eq
 8000ef2:	f020 0001 	biceq.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000efc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f00:	327f      	adds	r2, #127	; 0x7f
 8000f02:	bfc2      	ittt	gt
 8000f04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f0c:	4770      	bxgt	lr
 8000f0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	3a01      	subs	r2, #1
 8000f18:	e737      	b.n	8000d8a <__aeabi_fmul+0x92>
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fdiv+0xc2>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fdiv+0xda>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e795      	b.n	8000e78 <__aeabi_fdiv+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d108      	bne.n	8000f68 <__aeabi_fdiv+0x108>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	f47f af7d 	bne.w	8000e56 <__aeabi_fmul+0x15e>
 8000f5c:	ea93 0f0c 	teq	r3, ip
 8000f60:	f47f af70 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f64:	4608      	mov	r0, r1
 8000f66:	e776      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f68:	ea93 0f0c 	teq	r3, ip
 8000f6c:	d104      	bne.n	8000f78 <__aeabi_fdiv+0x118>
 8000f6e:	024b      	lsls	r3, r1, #9
 8000f70:	f43f af4c 	beq.w	8000e0c <__aeabi_fmul+0x114>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e76e      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f7c:	bf18      	it	ne
 8000f7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	d1ca      	bne.n	8000f1a <__aeabi_fdiv+0xba>
 8000f84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f88:	f47f af5c 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f90:	f47f af3c 	bne.w	8000e0c <__aeabi_fmul+0x114>
 8000f94:	e75f      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f96:	bf00      	nop

08000f98 <__gesf2>:
 8000f98:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f9c:	e006      	b.n	8000fac <__cmpsf2+0x4>
 8000f9e:	bf00      	nop

08000fa0 <__lesf2>:
 8000fa0:	f04f 0c01 	mov.w	ip, #1
 8000fa4:	e002      	b.n	8000fac <__cmpsf2+0x4>
 8000fa6:	bf00      	nop

08000fa8 <__cmpsf2>:
 8000fa8:	f04f 0c01 	mov.w	ip, #1
 8000fac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fbc:	bf18      	it	ne
 8000fbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fc2:	d011      	beq.n	8000fe8 <__cmpsf2+0x40>
 8000fc4:	b001      	add	sp, #4
 8000fc6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fca:	bf18      	it	ne
 8000fcc:	ea90 0f01 	teqne	r0, r1
 8000fd0:	bf58      	it	pl
 8000fd2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd6:	bf88      	it	hi
 8000fd8:	17c8      	asrhi	r0, r1, #31
 8000fda:	bf38      	it	cc
 8000fdc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fe0:	bf18      	it	ne
 8000fe2:	f040 0001 	orrne.w	r0, r0, #1
 8000fe6:	4770      	bx	lr
 8000fe8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fec:	d102      	bne.n	8000ff4 <__cmpsf2+0x4c>
 8000fee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ff2:	d105      	bne.n	8001000 <__cmpsf2+0x58>
 8000ff4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff8:	d1e4      	bne.n	8000fc4 <__cmpsf2+0x1c>
 8000ffa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffe:	d0e1      	beq.n	8000fc4 <__cmpsf2+0x1c>
 8001000:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <__aeabi_cfrcmple>:
 8001008:	4684      	mov	ip, r0
 800100a:	4608      	mov	r0, r1
 800100c:	4661      	mov	r1, ip
 800100e:	e7ff      	b.n	8001010 <__aeabi_cfcmpeq>

08001010 <__aeabi_cfcmpeq>:
 8001010:	b50f      	push	{r0, r1, r2, r3, lr}
 8001012:	f7ff ffc9 	bl	8000fa8 <__cmpsf2>
 8001016:	2800      	cmp	r0, #0
 8001018:	bf48      	it	mi
 800101a:	f110 0f00 	cmnmi.w	r0, #0
 800101e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001020 <__aeabi_fcmpeq>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff fff4 	bl	8001010 <__aeabi_cfcmpeq>
 8001028:	bf0c      	ite	eq
 800102a:	2001      	moveq	r0, #1
 800102c:	2000      	movne	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmplt>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffea 	bl	8001010 <__aeabi_cfcmpeq>
 800103c:	bf34      	ite	cc
 800103e:	2001      	movcc	r0, #1
 8001040:	2000      	movcs	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmple>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffe0 	bl	8001010 <__aeabi_cfcmpeq>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpge>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffd2 	bl	8001008 <__aeabi_cfrcmple>
 8001064:	bf94      	ite	ls
 8001066:	2001      	movls	r0, #1
 8001068:	2000      	movhi	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpgt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffc8 	bl	8001008 <__aeabi_cfrcmple>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_f2uiz>:
 8001084:	0042      	lsls	r2, r0, #1
 8001086:	d20e      	bcs.n	80010a6 <__aeabi_f2uiz+0x22>
 8001088:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800108c:	d30b      	bcc.n	80010a6 <__aeabi_f2uiz+0x22>
 800108e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001092:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001096:	d409      	bmi.n	80010ac <__aeabi_f2uiz+0x28>
 8001098:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800109c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010a0:	fa23 f002 	lsr.w	r0, r3, r2
 80010a4:	4770      	bx	lr
 80010a6:	f04f 0000 	mov.w	r0, #0
 80010aa:	4770      	bx	lr
 80010ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010b0:	d101      	bne.n	80010b6 <__aeabi_f2uiz+0x32>
 80010b2:	0242      	lsls	r2, r0, #9
 80010b4:	d102      	bne.n	80010bc <__aeabi_f2uiz+0x38>
 80010b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ba:	4770      	bx	lr
 80010bc:	f04f 0000 	mov.w	r0, #0
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <PID_Init>:
 #include "PID.h"

void PID_Init(PIDController *pid, int N_input) {//nMotor is the number of motor to control
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]

	/* Clear controller variables */
	for(int i = 0;i < N_input; i++){
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	e025      	b.n	8001120 <PID_Init+0x5c>
		pid->integrator[i] = 0.0f;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	3206      	adds	r2, #6
 80010da:	f04f 0100 	mov.w	r1, #0
 80010de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pid->prevError[i]  = 0.0f;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	3208      	adds	r2, #8
 80010e8:	f04f 0100 	mov.w	r1, #0
 80010ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pid->differentiator[i]  = 0.0f;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	320a      	adds	r2, #10
 80010f6:	f04f 0100 	mov.w	r1, #0
 80010fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pid->prevMeasurement[i] = 0.0f;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	320c      	adds	r2, #12
 8001104:	f04f 0100 	mov.w	r1, #0
 8001108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pid->out[i] = 0.0f;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	320e      	adds	r2, #14
 8001112:	f04f 0100 	mov.w	r1, #0
 8001116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0;i < N_input; i++){
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3301      	adds	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	429a      	cmp	r2, r3
 8001126:	dbd5      	blt.n	80010d4 <PID_Init+0x10>
	}


}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <PID>:

float PID(PIDController *pid, float setpoint, float measurement,float Kp,float Ki,float Kd, int i){// "i" input identity
 8001134:	b5b0      	push	{r4, r5, r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	603b      	str	r3, [r7, #0]
	/*
	* -------------------------------------Error signal------------------------------------------
	*/
	float error = setpoint - measurement;;
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	68b8      	ldr	r0, [r7, #8]
 8001146:	f7ff fccd 	bl	8000ae4 <__aeabi_fsub>
 800114a:	4603      	mov	r3, r0
 800114c:	617b      	str	r3, [r7, #20]
	/*
	* Proportional
	*/
    float proportional = Kp * error;
 800114e:	6979      	ldr	r1, [r7, #20]
 8001150:	6838      	ldr	r0, [r7, #0]
 8001152:	f7ff fdd1 	bl	8000cf8 <__aeabi_fmul>
 8001156:	4603      	mov	r3, r0
 8001158:	613b      	str	r3, [r7, #16]
	/*
	* ----------------------------------------Integral-----------------------------------------------
	*/
    pid->integrator[i]	= pid->integrator[i] + 0.5f * Ki * pid->T
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800115e:	3206      	adds	r2, #6
 8001160:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001164:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800116a:	f7ff fdc5 	bl	8000cf8 <__aeabi_fmul>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	4619      	mov	r1, r3
 8001178:	4610      	mov	r0, r2
 800117a:	f7ff fdbd 	bl	8000cf8 <__aeabi_fmul>
 800117e:	4603      	mov	r3, r0
 8001180:	461d      	mov	r5, r3
    					* (error + pid->prevError[i]);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001186:	3208      	adds	r2, #8
 8001188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118c:	6979      	ldr	r1, [r7, #20]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fcaa 	bl	8000ae8 <__addsf3>
 8001194:	4603      	mov	r3, r0
 8001196:	4619      	mov	r1, r3
 8001198:	4628      	mov	r0, r5
 800119a:	f7ff fdad 	bl	8000cf8 <__aeabi_fmul>
 800119e:	4603      	mov	r3, r0
    pid->integrator[i]	= pid->integrator[i] + 0.5f * Ki * pid->T
 80011a0:	4619      	mov	r1, r3
 80011a2:	4620      	mov	r0, r4
 80011a4:	f7ff fca0 	bl	8000ae8 <__addsf3>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4619      	mov	r1, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011b0:	3206      	adds	r2, #6
 80011b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator[i] > pid->limMaxInt) {
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011ba:	3206      	adds	r2, #6
 80011bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	4619      	mov	r1, r3
 80011c6:	4610      	mov	r0, r2
 80011c8:	f7ff ff52 	bl	8001070 <__aeabi_fcmpgt>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d007      	beq.n	80011e2 <PID+0xae>
        pid->integrator[i] = pid->limMaxInt;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6919      	ldr	r1, [r3, #16]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011da:	3206      	adds	r2, #6
 80011dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80011e0:	e01f      	b.n	8001222 <PID+0xee>
    }
    else if (pid->integrator[i] < pid->limMinInt) {
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011e6:	3206      	adds	r2, #6
 80011e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	4619      	mov	r1, r3
 80011f2:	4610      	mov	r0, r2
 80011f4:	f7ff ff1e 	bl	8001034 <__aeabi_fcmplt>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <PID+0xda>
        pid->integrator[i] = pid->limMinInt;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	68d9      	ldr	r1, [r3, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001206:	3206      	adds	r2, #6
 8001208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800120c:	e009      	b.n	8001222 <PID+0xee>
    }
    else{
    	pid->integrator[i] = pid->integrator[i];
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001212:	3206      	adds	r2, #6
 8001214:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800121c:	3206      	adds	r2, #6
 800121e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/*
	* Derivative (band-limited differentator)
	*/

    pid->differentiator[i] = -(2.0f * Kd * (measurement - pid->prevMeasurement[i])	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001224:	4619      	mov	r1, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fc5e 	bl	8000ae8 <__addsf3>
 800122c:	4603      	mov	r3, r0
 800122e:	461c      	mov	r4, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001234:	320c      	adds	r2, #12
 8001236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123a:	4619      	mov	r1, r3
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fc51 	bl	8000ae4 <__aeabi_fsub>
 8001242:	4603      	mov	r3, r0
 8001244:	4619      	mov	r1, r3
 8001246:	4620      	mov	r0, r4
 8001248:	f7ff fd56 	bl	8000cf8 <__aeabi_fmul>
 800124c:	4603      	mov	r3, r0
 800124e:	461c      	mov	r4, r3
                        	 + (2.0f * pid->tau - pid->T) * pid->differentiator[i])
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fc46 	bl	8000ae8 <__addsf3>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4619      	mov	r1, r3
 8001266:	4610      	mov	r0, r2
 8001268:	f7ff fc3c 	bl	8000ae4 <__aeabi_fsub>
 800126c:	4603      	mov	r3, r0
 800126e:	4618      	mov	r0, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001274:	320a      	adds	r2, #10
 8001276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127a:	4619      	mov	r1, r3
 800127c:	f7ff fd3c 	bl	8000cf8 <__aeabi_fmul>
 8001280:	4603      	mov	r3, r0
 8001282:	4619      	mov	r1, r3
 8001284:	4620      	mov	r0, r4
 8001286:	f7ff fc2f 	bl	8000ae8 <__addsf3>
 800128a:	4603      	mov	r3, r0
    pid->differentiator[i] = -(2.0f * Kd * (measurement - pid->prevMeasurement[i])	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 800128c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
							 / (2.0f * pid->tau + pid->T);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fc26 	bl	8000ae8 <__addsf3>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	4619      	mov	r1, r3
 80012a6:	4610      	mov	r0, r2
 80012a8:	f7ff fc1e 	bl	8000ae8 <__addsf3>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4619      	mov	r1, r3
 80012b0:	4620      	mov	r0, r4
 80012b2:	f7ff fdd5 	bl	8000e60 <__aeabi_fdiv>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4619      	mov	r1, r3
    pid->differentiator[i] = -(2.0f * Kd * (measurement - pid->prevMeasurement[i])	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012be:	320a      	adds	r2, #10
 80012c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	/*
	* Compute output and apply limits
	*/
    pid->out[i] = proportional + pid->integrator[i] + pid->differentiator[i];
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012c8:	3206      	adds	r2, #6
 80012ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ce:	6939      	ldr	r1, [r7, #16]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fc09 	bl	8000ae8 <__addsf3>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4618      	mov	r0, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012de:	320a      	adds	r2, #10
 80012e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff fbff 	bl	8000ae8 <__addsf3>
 80012ea:	4603      	mov	r3, r0
 80012ec:	4619      	mov	r1, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012f2:	320e      	adds	r2, #14
 80012f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    //sat[i] = pid->out[i];
    if (pid->out[i] > pid->limMax) {
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012fc:	320e      	adds	r2, #14
 80012fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	4619      	mov	r1, r3
 8001308:	4610      	mov	r0, r2
 800130a:	f7ff feb1 	bl	8001070 <__aeabi_fcmpgt>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d007      	beq.n	8001324 <PID+0x1f0>
        pid->out[i] = pid->limMax;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6899      	ldr	r1, [r3, #8]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800131c:	320e      	adds	r2, #14
 800131e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001322:	e01f      	b.n	8001364 <PID+0x230>
    }
    else if (pid->out[i] < pid->limMin) {
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001328:	320e      	adds	r2, #14
 800132a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4619      	mov	r1, r3
 8001334:	4610      	mov	r0, r2
 8001336:	f7ff fe7d 	bl	8001034 <__aeabi_fcmplt>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d007      	beq.n	8001350 <PID+0x21c>
        pid->out[i] = pid->limMin;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6859      	ldr	r1, [r3, #4]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001348:	320e      	adds	r2, #14
 800134a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800134e:	e009      	b.n	8001364 <PID+0x230>
    }
    else{
    	pid->out[i] = pid->out[i];
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001354:	320e      	adds	r2, #14
 8001356:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800135e:	320e      	adds	r2, #14
 8001360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    /* Store error and measurement for later use */
    pid->prevError[i]       = error;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001368:	3208      	adds	r2, #8
 800136a:	6979      	ldr	r1, [r7, #20]
 800136c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pid->prevMeasurement[i] = measurement;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001374:	320c      	adds	r2, #12
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* Return controller output */
    return pid->out[i];
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001380:	320e      	adds	r2, #14
 8001382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]

}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001390 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001396:	4b25      	ldr	r3, [pc, #148]	; (800142c <MX_CAN_Init+0x9c>)
 8001398:	4a25      	ldr	r2, [pc, #148]	; (8001430 <MX_CAN_Init+0xa0>)
 800139a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <MX_CAN_Init+0x9c>)
 800139e:	2209      	movs	r2, #9
 80013a0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80013a2:	4b22      	ldr	r3, [pc, #136]	; (800142c <MX_CAN_Init+0x9c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013a8:	4b20      	ldr	r3, [pc, #128]	; (800142c <MX_CAN_Init+0x9c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80013ae:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_CAN_Init+0x9c>)
 80013b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013b4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <MX_CAN_Init+0x9c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_CAN_Init+0x9c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_CAN_Init+0x9c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_CAN_Init+0x9c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_CAN_Init+0x9c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_CAN_Init+0x9c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_CAN_Init+0x9c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80013e0:	4812      	ldr	r0, [pc, #72]	; (800142c <MX_CAN_Init+0x9c>)
 80013e2:	f001 feb3 	bl	800314c <HAL_CAN_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80013ec:	f001 f8c6 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80013f0:	2301      	movs	r3, #1
 80013f2:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 80013f4:	230a      	movs	r3, #10
 80013f6:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x222<<5;
 80013fc:	f244 4340 	movw	r3, #17472	; 0x4440
 8001400:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x000<<5;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001412:	2301      	movs	r3, #1
 8001414:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800141a:	463b      	mov	r3, r7
 800141c:	4619      	mov	r1, r3
 800141e:	4803      	ldr	r0, [pc, #12]	; (800142c <MX_CAN_Init+0x9c>)
 8001420:	f001 ff8f 	bl	8003342 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	; 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000002c 	.word	0x2000002c
 8001430:	40006400 	.word	0x40006400

08001434 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a20      	ldr	r2, [pc, #128]	; (80014d0 <HAL_CAN_MspInit+0x9c>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d139      	bne.n	80014c8 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <HAL_CAN_MspInit+0xa0>)
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <HAL_CAN_MspInit+0xa0>)
 800145a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800145e:	61d3      	str	r3, [r2, #28]
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <HAL_CAN_MspInit+0xa0>)
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_CAN_MspInit+0xa0>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a18      	ldr	r2, [pc, #96]	; (80014d4 <HAL_CAN_MspInit+0xa0>)
 8001472:	f043 0304 	orr.w	r3, r3, #4
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <HAL_CAN_MspInit+0xa0>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001484:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001488:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001492:	f107 0310 	add.w	r3, r7, #16
 8001496:	4619      	mov	r1, r3
 8001498:	480f      	ldr	r0, [pc, #60]	; (80014d8 <HAL_CAN_MspInit+0xa4>)
 800149a:	f002 fcc7 	bl	8003e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800149e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	4619      	mov	r1, r3
 80014b2:	4809      	ldr	r0, [pc, #36]	; (80014d8 <HAL_CAN_MspInit+0xa4>)
 80014b4:	f002 fcba 	bl	8003e2c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2100      	movs	r1, #0
 80014bc:	2015      	movs	r0, #21
 80014be:	f002 fc7e 	bl	8003dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80014c2:	2015      	movs	r0, #21
 80014c4:	f002 fc97 	bl	8003df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80014c8:	bf00      	nop
 80014ca:	3720      	adds	r7, #32
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40006400 	.word	0x40006400
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010800 	.word	0x40010800

080014dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f0:	4b49      	ldr	r3, [pc, #292]	; (8001618 <MX_GPIO_Init+0x13c>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a48      	ldr	r2, [pc, #288]	; (8001618 <MX_GPIO_Init+0x13c>)
 80014f6:	f043 0310 	orr.w	r3, r3, #16
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b46      	ldr	r3, [pc, #280]	; (8001618 <MX_GPIO_Init+0x13c>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0310 	and.w	r3, r3, #16
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001508:	4b43      	ldr	r3, [pc, #268]	; (8001618 <MX_GPIO_Init+0x13c>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a42      	ldr	r2, [pc, #264]	; (8001618 <MX_GPIO_Init+0x13c>)
 800150e:	f043 0320 	orr.w	r3, r3, #32
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b40      	ldr	r3, [pc, #256]	; (8001618 <MX_GPIO_Init+0x13c>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0320 	and.w	r3, r3, #32
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001520:	4b3d      	ldr	r3, [pc, #244]	; (8001618 <MX_GPIO_Init+0x13c>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4a3c      	ldr	r2, [pc, #240]	; (8001618 <MX_GPIO_Init+0x13c>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	6193      	str	r3, [r2, #24]
 800152c:	4b3a      	ldr	r3, [pc, #232]	; (8001618 <MX_GPIO_Init+0x13c>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001538:	4b37      	ldr	r3, [pc, #220]	; (8001618 <MX_GPIO_Init+0x13c>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a36      	ldr	r2, [pc, #216]	; (8001618 <MX_GPIO_Init+0x13c>)
 800153e:	f043 0308 	orr.w	r3, r3, #8
 8001542:	6193      	str	r3, [r2, #24]
 8001544:	4b34      	ldr	r3, [pc, #208]	; (8001618 <MX_GPIO_Init+0x13c>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_dir_Pin|M3_dir_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001556:	4831      	ldr	r0, [pc, #196]	; (800161c <MX_GPIO_Init+0x140>)
 8001558:	f002 fe03 	bl	8004162 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M2_dir_Pin|M4_dir_Pin|GPIO_PIN_2, GPIO_PIN_RESET);
 800155c:	2200      	movs	r2, #0
 800155e:	2107      	movs	r1, #7
 8001560:	482f      	ldr	r0, [pc, #188]	; (8001620 <MX_GPIO_Init+0x144>)
 8001562:	f002 fdfe 	bl	8004162 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = M1_dir_Pin|M3_dir_Pin;
 8001566:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800156a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156c:	2301      	movs	r3, #1
 800156e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2302      	movs	r3, #2
 8001576:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	4619      	mov	r1, r3
 800157e:	4827      	ldr	r0, [pc, #156]	; (800161c <MX_GPIO_Init+0x140>)
 8001580:	f002 fc54 	bl	8003e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA2 */
  GPIO_InitStruct.Pin = M2_dir_Pin|M4_dir_Pin|GPIO_PIN_2;
 8001584:	2307      	movs	r3, #7
 8001586:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001588:	2301      	movs	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2302      	movs	r3, #2
 8001592:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	4619      	mov	r1, r3
 800159a:	4821      	ldr	r0, [pc, #132]	; (8001620 <MX_GPIO_Init+0x144>)
 800159c:	f002 fc46 	bl	8003e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = En1_C1_Pin|En1_C2_Pin|En2_C1_Pin|En2_C2_Pin
 80015a0:	23f8      	movs	r3, #248	; 0xf8
 80015a2:	613b      	str	r3, [r7, #16]
                          |En3_C1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <MX_GPIO_Init+0x148>)
 80015a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	4619      	mov	r1, r3
 80015b2:	481b      	ldr	r0, [pc, #108]	; (8001620 <MX_GPIO_Init+0x144>)
 80015b4:	f002 fc3a 	bl	8003e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = En3_C2_Pin;
 80015b8:	2301      	movs	r3, #1
 80015ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <MX_GPIO_Init+0x148>)
 80015be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(En3_C2_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	4619      	mov	r1, r3
 80015ca:	4817      	ldr	r0, [pc, #92]	; (8001628 <MX_GPIO_Init+0x14c>)
 80015cc:	f002 fc2e 	bl	8003e2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	2006      	movs	r0, #6
 80015d6:	f002 fbf2 	bl	8003dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015da:	2006      	movs	r0, #6
 80015dc:	f002 fc0b 	bl	8003df6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2100      	movs	r1, #0
 80015e4:	2009      	movs	r0, #9
 80015e6:	f002 fbea 	bl	8003dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80015ea:	2009      	movs	r0, #9
 80015ec:	f002 fc03 	bl	8003df6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	200a      	movs	r0, #10
 80015f6:	f002 fbe2 	bl	8003dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015fa:	200a      	movs	r0, #10
 80015fc:	f002 fbfb 	bl	8003df6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2100      	movs	r1, #0
 8001604:	2017      	movs	r0, #23
 8001606:	f002 fbda 	bl	8003dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800160a:	2017      	movs	r0, #23
 800160c:	f002 fbf3 	bl	8003df6 <HAL_NVIC_EnableIRQ>

}
 8001610:	bf00      	nop
 8001612:	3720      	adds	r7, #32
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40021000 	.word	0x40021000
 800161c:	40011000 	.word	0x40011000
 8001620:	40010800 	.word	0x40010800
 8001624:	10310000 	.word	0x10310000
 8001628:	40010c00 	.word	0x40010c00

0800162c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <MX_I2C2_Init+0x50>)
 8001632:	4a13      	ldr	r2, [pc, #76]	; (8001680 <MX_I2C2_Init+0x54>)
 8001634:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_I2C2_Init+0x50>)
 8001638:	4a12      	ldr	r2, [pc, #72]	; (8001684 <MX_I2C2_Init+0x58>)
 800163a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_I2C2_Init+0x50>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_I2C2_Init+0x50>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_I2C2_Init+0x50>)
 800164a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800164e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <MX_I2C2_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_I2C2_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <MX_I2C2_Init+0x50>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_I2C2_Init+0x50>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <MX_I2C2_Init+0x50>)
 800166a:	f002 fdc3 	bl	80041f4 <HAL_I2C_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001674:	f000 ff82 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000054 	.word	0x20000054
 8001680:	40005800 	.word	0x40005800
 8001684:	000186a0 	.word	0x000186a0

08001688 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a16      	ldr	r2, [pc, #88]	; (80016fc <HAL_I2C_MspInit+0x74>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d124      	bne.n	80016f2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_I2C_MspInit+0x78>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a14      	ldr	r2, [pc, #80]	; (8001700 <HAL_I2C_MspInit+0x78>)
 80016ae:	f043 0308 	orr.w	r3, r3, #8
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_I2C_MspInit+0x78>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c6:	2312      	movs	r3, #18
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	4619      	mov	r1, r3
 80016d4:	480b      	ldr	r0, [pc, #44]	; (8001704 <HAL_I2C_MspInit+0x7c>)
 80016d6:	f002 fba9 	bl	8003e2c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_I2C_MspInit+0x78>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a08      	ldr	r2, [pc, #32]	; (8001700 <HAL_I2C_MspInit+0x78>)
 80016e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016e4:	61d3      	str	r3, [r2, #28]
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_I2C_MspInit+0x78>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80016f2:	bf00      	nop
 80016f4:	3720      	adds	r7, #32
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40005800 	.word	0x40005800
 8001700:	40021000 	.word	0x40021000
 8001704:	40010c00 	.word	0x40010c00

08001708 <map>:
uint8_t TxData[3];
uint32_t TxMailbox;
uint8_t cntt;

float map(float Input, float Min_Input, float Max_Input, float Min_Output, float Max_Output)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	603b      	str	r3, [r7, #0]

	return (float)((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
 8001716:	68b9      	ldr	r1, [r7, #8]
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f7ff f9e3 	bl	8000ae4 <__aeabi_fsub>
 800171e:	4603      	mov	r3, r0
 8001720:	461c      	mov	r4, r3
 8001722:	6839      	ldr	r1, [r7, #0]
 8001724:	6a38      	ldr	r0, [r7, #32]
 8001726:	f7ff f9dd 	bl	8000ae4 <__aeabi_fsub>
 800172a:	4603      	mov	r3, r0
 800172c:	4619      	mov	r1, r3
 800172e:	4620      	mov	r0, r4
 8001730:	f7ff fae2 	bl	8000cf8 <__aeabi_fmul>
 8001734:	4603      	mov	r3, r0
 8001736:	461c      	mov	r4, r3
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff f9d2 	bl	8000ae4 <__aeabi_fsub>
 8001740:	4603      	mov	r3, r0
 8001742:	4619      	mov	r1, r3
 8001744:	4620      	mov	r0, r4
 8001746:	f7ff fb8b 	bl	8000e60 <__aeabi_fdiv>
 800174a:	4603      	mov	r3, r0
 800174c:	6839      	ldr	r1, [r7, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff f9ca 	bl	8000ae8 <__addsf3>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	bd90      	pop	{r4, r7, pc}
	...

08001760 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af02      	add	r7, sp, #8
 8001766:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001768:	4b4d      	ldr	r3, [pc, #308]	; (80018a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 800176a:	4a4e      	ldr	r2, [pc, #312]	; (80018a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 800176c:	2101      	movs	r1, #1
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f001 fef4 	bl	800355c <HAL_CAN_GetRxMessage>
	cntt++;
 8001774:	4b4c      	ldr	r3, [pc, #304]	; (80018a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	b2da      	uxtb	r2, r3
 800177c:	4b4a      	ldr	r3, [pc, #296]	; (80018a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 800177e:	701a      	strb	r2, [r3, #0]
	while (cntt - 100 > 0)
 8001780:	e006      	b.n	8001790 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8001782:	2104      	movs	r1, #4
 8001784:	4849      	ldr	r0, [pc, #292]	; (80018ac <HAL_CAN_RxFifo1MsgPendingCallback+0x14c>)
 8001786:	f002 fd04 	bl	8004192 <HAL_GPIO_TogglePin>
		cntt = 0;
 800178a:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
	while (cntt - 100 > 0)
 8001790:	4b45      	ldr	r3, [pc, #276]	; (80018a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b64      	cmp	r3, #100	; 0x64
 8001796:	d8f4      	bhi.n	8001782 <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
	}
	if (RxHeader.DLC == 2 && RxHeader.StdId == 0x222)
 8001798:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d12d      	bne.n	80017fc <HAL_CAN_RxFifo1MsgPendingCallback+0x9c>
 80017a0:	4b40      	ldr	r3, [pc, #256]	; (80018a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f240 2222 	movw	r2, #546	; 0x222
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d127      	bne.n	80017fc <HAL_CAN_RxFifo1MsgPendingCallback+0x9c>
	{
			data_16 = (RxData[0] << 8) | RxData[1];
 80017ac:	4b3c      	ldr	r3, [pc, #240]	; (80018a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	b21a      	sxth	r2, r3
 80017b4:	4b3a      	ldr	r3, [pc, #232]	; (80018a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 80017b6:	785b      	ldrb	r3, [r3, #1]
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	4313      	orrs	r3, r2
 80017bc:	b21b      	sxth	r3, r3
 80017be:	b29a      	uxth	r2, r3
 80017c0:	4b3b      	ldr	r3, [pc, #236]	; (80018b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x150>)
 80017c2:	801a      	strh	r2, [r3, #0]
			if(data_16 != 0)
 80017c4:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x150>)
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x74>
			{
				shoot = 1;
 80017cc:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	e002      	b.n	80017da <HAL_CAN_RxFifo1MsgPendingCallback+0x7a>
			}
			else
			{
				shoot = 0;
 80017d4:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
			}
			speed = map(data_16,0,65535,0,1500);
 80017da:	4b35      	ldr	r3, [pc, #212]	; (80018b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x150>)
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fa32 	bl	8000c48 <__aeabi_ui2f>
 80017e4:	4b34      	ldr	r3, [pc, #208]	; (80018b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	4a33      	ldr	r2, [pc, #204]	; (80018bc <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 80017ee:	f04f 0100 	mov.w	r1, #0
 80017f2:	f7ff ff89 	bl	8001708 <map>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4a31      	ldr	r2, [pc, #196]	; (80018c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 80017fa:	6013      	str	r3, [r2, #0]
	}

	if (RxHeader.DLC == 1 && RxHeader.StdId == 0x444)
 80017fc:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d109      	bne.n	8001818 <HAL_CAN_RxFifo1MsgPendingCallback+0xb8>
 8001804:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f240 4244 	movw	r2, #1092	; 0x444
 800180c:	4293      	cmp	r3, r2
 800180e:	d103      	bne.n	8001818 <HAL_CAN_RxFifo1MsgPendingCallback+0xb8>
	{
		data_limit = RxData[0];
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8001812:	781a      	ldrb	r2, [r3, #0]
 8001814:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 8001816:	701a      	strb	r2, [r3, #0]
	}
	if (RxHeader.DLC == 1 && RxHeader.StdId == 0x666)
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d13b      	bne.n	8001898 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>
 8001820:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f240 6266 	movw	r2, #1638	; 0x666
 8001828:	4293      	cmp	r3, r2
 800182a:	d135      	bne.n	8001898 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>
	{
		if (RxData[0] == 1) // start to pick up
 800182c:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d10b      	bne.n	800184c <HAL_CAN_RxFifo1MsgPendingCallback+0xec>
		{
			degree = 180;
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 8001836:	22b4      	movs	r2, #180	; 0xb4
 8001838:	701a      	strb	r2, [r3, #0]
			pick = 0;
 800183a:	4b24      	ldr	r3, [pc, #144]	; (80018cc <HAL_CAN_RxFifo1MsgPendingCallback+0x16c>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
			store = 0;
 8001840:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x170>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
			push = 0;
 8001846:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x174>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
		}
		if(RxData[0] == 0) // after pick up
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d109      	bne.n	8001868 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>
		{
			degree = 85;
 8001854:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 8001856:	2255      	movs	r2, #85	; 0x55
 8001858:	701a      	strb	r2, [r3, #0]

			push = 0;
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x174>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
			control_fall = 0;
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x178>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
			degree = 85;
			control_fall = 1;

		}
	}
}
 8001866:	e017      	b.n	8001898 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>
		else if(RxData[0] == 2) //start shoot
 8001868:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d109      	bne.n	8001884 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>
			degree = 85;
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 8001872:	2255      	movs	r2, #85	; 0x55
 8001874:	701a      	strb	r2, [r3, #0]
			store = 1;
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x170>)
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
			pick = 1;
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <HAL_CAN_RxFifo1MsgPendingCallback+0x16c>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
}
 8001882:	e009      	b.n	8001898 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>
		else if(RxData[0] == 3)
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d105      	bne.n	8001898 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>
			degree = 85;
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 800188e:	2255      	movs	r2, #85	; 0x55
 8001890:	701a      	strb	r2, [r3, #0]
			control_fall = 1;
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x178>)
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000174 	.word	0x20000174
 80018a4:	20000158 	.word	0x20000158
 80018a8:	2000017c 	.word	0x2000017c
 80018ac:	40010800 	.word	0x40010800
 80018b0:	200000a8 	.word	0x200000a8
 80018b4:	20000152 	.word	0x20000152
 80018b8:	44bb8000 	.word	0x44bb8000
 80018bc:	477fff00 	.word	0x477fff00
 80018c0:	200000ac 	.word	0x200000ac
 80018c4:	20000148 	.word	0x20000148
 80018c8:	20000000 	.word	0x20000000
 80018cc:	20000150 	.word	0x20000150
 80018d0:	20000153 	.word	0x20000153
 80018d4:	20000155 	.word	0x20000155
 80018d8:	20000156 	.word	0x20000156
 80018dc:	00000000 	.word	0x00000000

080018e0 <servo_rotation>:
void servo_rotation(uint8_t degree)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
	float y = 0.556 * (float) degree + 25;
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff f9ab 	bl	8000c48 <__aeabi_ui2f>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fd8f 	bl	8000418 <__aeabi_f2d>
 80018fa:	a317      	add	r3, pc, #92	; (adr r3, 8001958 <servo_rotation+0x78>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	f7fe fde2 	bl	80004c8 <__aeabi_dmul>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <servo_rotation+0x80>)
 8001912:	f7fe fc23 	bl	800015c <__adddf3>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	f7ff f88d 	bl	8000a3c <__aeabi_d2f>
 8001922:	4603      	mov	r3, r0
 8001924:	60fb      	str	r3, [r7, #12]
	uint8_t pwm = round(y);
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f7fe fd76 	bl	8000418 <__aeabi_f2d>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f005 f9f0 	bl	8006d18 <round>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f7ff f85c 	bl	80009fc <__aeabi_d2uiz>
 8001944:	4603      	mov	r3, r0
 8001946:	72fb      	strb	r3, [r7, #11]
	TIM3->CCR2 = pwm;
 8001948:	4a06      	ldr	r2, [pc, #24]	; (8001964 <servo_rotation+0x84>)
 800194a:	7afb      	ldrb	r3, [r7, #11]
 800194c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	83126e98 	.word	0x83126e98
 800195c:	3fe1cac0 	.word	0x3fe1cac0
 8001960:	40390000 	.word	0x40390000
 8001964:	40000400 	.word	0x40000400

08001968 <pick_up>:
/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t ActiveServo;
void pick_up(int deg, int t)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
	degree = deg;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <pick_up+0x80>)
 8001978:	701a      	strb	r2, [r3, #0]
	 if(degree >=0)
		  {

		  	while(i<degree)
 800197a:	e00e      	b.n	800199a <pick_up+0x32>
		  	{
		  		servo_rotation(i);
 800197c:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <pick_up+0x84>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ffac 	bl	80018e0 <servo_rotation>
		  		HAL_Delay(t);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f001 fbba 	bl	8003104 <HAL_Delay>
		  		i = i + 1;
 8001990:	4b16      	ldr	r3, [pc, #88]	; (80019ec <pick_up+0x84>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3301      	adds	r3, #1
 8001996:	4a15      	ldr	r2, [pc, #84]	; (80019ec <pick_up+0x84>)
 8001998:	6013      	str	r3, [r2, #0]
		  	while(i<degree)
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <pick_up+0x80>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <pick_up+0x84>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dce9      	bgt.n	800197c <pick_up+0x14>

		  	}

		  	if(degree < 250)
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <pick_up+0x80>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2bf9      	cmp	r3, #249	; 0xf9
 80019ae:	d816      	bhi.n	80019de <pick_up+0x76>
		  	{
		  		while(i>degree)
 80019b0:	e00e      	b.n	80019d0 <pick_up+0x68>
		  		{
		  			servo_rotation(i);
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <pick_up+0x84>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff91 	bl	80018e0 <servo_rotation>
		  			HAL_Delay(t);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f001 fb9f 	bl	8003104 <HAL_Delay>
		  			i = i - 1;
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <pick_up+0x84>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	4a07      	ldr	r2, [pc, #28]	; (80019ec <pick_up+0x84>)
 80019ce:	6013      	str	r3, [r2, #0]
		  		while(i>degree)
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <pick_up+0x80>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <pick_up+0x84>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	dbe9      	blt.n	80019b2 <pick_up+0x4a>
		  		}
		  	}
		  }

}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000144 	.word	0x20000144

080019f0 <ring_falling>:

void ring_falling()
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	PCA9685_SetServoAngle(4, 90);
 80019f4:	4906      	ldr	r1, [pc, #24]	; (8001a10 <ring_falling+0x20>)
 80019f6:	2004      	movs	r0, #4
 80019f8:	f000 ff7a 	bl	80028f0 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(5, 90);
 80019fc:	4904      	ldr	r1, [pc, #16]	; (8001a10 <ring_falling+0x20>)
 80019fe:	2005      	movs	r0, #5
 8001a00:	f000 ff76 	bl	80028f0 <PCA9685_SetServoAngle>
	fall = 0;
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <ring_falling+0x24>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	42b40000 	.word	0x42b40000
 8001a14:	20000151 	.word	0x20000151

08001a18 <ring_stop_falling>:
{
	PCA9685_SetServoAngle(4, 180);
	PCA9685_SetServoAngle(5, 180);
}
void ring_stop_falling()
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	PCA9685_SetPin(4, 4096, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a22:	2004      	movs	r0, #4
 8001a24:	f000 ff06 	bl	8002834 <PCA9685_SetPin>
	PCA9685_SetPin(5, 4096, 0);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a2e:	2005      	movs	r0, #5
 8001a30:	f000 ff00 	bl	8002834 <PCA9685_SetPin>
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <open_pickup>:
void open_pickup()
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	PCA9685_SetServoAngle(0,0);
 8001a3c:	f04f 0100 	mov.w	r1, #0
 8001a40:	2000      	movs	r0, #0
 8001a42:	f000 ff55 	bl	80028f0 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, 180);
 8001a46:	4904      	ldr	r1, [pc, #16]	; (8001a58 <open_pickup+0x20>)
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f000 ff51 	bl	80028f0 <PCA9685_SetServoAngle>
	open = 1;
 8001a4e:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <open_pickup+0x24>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	43340000 	.word	0x43340000
 8001a5c:	20000154 	.word	0x20000154

08001a60 <close_pickup>:
void close_pickup()
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
	PCA9685_SetServoAngle(0, 140);
 8001a64:	4906      	ldr	r1, [pc, #24]	; (8001a80 <close_pickup+0x20>)
 8001a66:	2000      	movs	r0, #0
 8001a68:	f000 ff42 	bl	80028f0 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, 40);
 8001a6c:	4905      	ldr	r1, [pc, #20]	; (8001a84 <close_pickup+0x24>)
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f000 ff3e 	bl	80028f0 <PCA9685_SetServoAngle>
	open = 0;
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <close_pickup+0x28>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	430c0000 	.word	0x430c0000
 8001a84:	42200000 	.word	0x42200000
 8001a88:	20000154 	.word	0x20000154

08001a8c <fall1_function>:
void fall1_function()
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	pick_up(92,10);
 8001a90:	210a      	movs	r1, #10
 8001a92:	205c      	movs	r0, #92	; 0x5c
 8001a94:	f7ff ff68 	bl	8001968 <pick_up>
	HAL_Delay(200);
 8001a98:	20c8      	movs	r0, #200	; 0xc8
 8001a9a:	f001 fb33 	bl	8003104 <HAL_Delay>
	open_pickup();
 8001a9e:	f7ff ffcb 	bl	8001a38 <open_pickup>
	HAL_Delay(400);
 8001aa2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001aa6:	f001 fb2d 	bl	8003104 <HAL_Delay>
	ring_falling();
 8001aaa:	f7ff ffa1 	bl	80019f0 <ring_falling>
	HAL_Delay(600);
 8001aae:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001ab2:	f001 fb27 	bl	8003104 <HAL_Delay>
	ring_stop_falling();
 8001ab6:	f7ff ffaf 	bl	8001a18 <ring_stop_falling>
	HAL_Delay(400);
 8001aba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001abe:	f001 fb21 	bl	8003104 <HAL_Delay>
//	pick_up(78,10);
//	HAL_Delay(200);
	close_pickup();
 8001ac2:	f7ff ffcd 	bl	8001a60 <close_pickup>
	HAL_Delay(400);
 8001ac6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001aca:	f001 fb1b 	bl	8003104 <HAL_Delay>
	ring_falling();
 8001ace:	f7ff ff8f 	bl	80019f0 <ring_falling>
	HAL_Delay(1000);
 8001ad2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ad6:	f001 fb15 	bl	8003104 <HAL_Delay>
	ring_stop_falling();
 8001ada:	f7ff ff9d 	bl	8001a18 <ring_stop_falling>
	pick_up(125,10);
 8001ade:	210a      	movs	r1, #10
 8001ae0:	207d      	movs	r0, #125	; 0x7d
 8001ae2:	f7ff ff41 	bl	8001968 <pick_up>
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <fall2_function>:
	HAL_Delay(1000);
	ring_stop_falling();
	pick_up(125,10);
}
void fall2_function()
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0
	pick_up(95,10);
 8001aee:	210a      	movs	r1, #10
 8001af0:	205f      	movs	r0, #95	; 0x5f
 8001af2:	f7ff ff39 	bl	8001968 <pick_up>
	HAL_Delay(200);
 8001af6:	20c8      	movs	r0, #200	; 0xc8
 8001af8:	f001 fb04 	bl	8003104 <HAL_Delay>
	open_pickup();
 8001afc:	f7ff ff9c 	bl	8001a38 <open_pickup>
	HAL_Delay(600);
 8001b00:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001b04:	f001 fafe 	bl	8003104 <HAL_Delay>
	ring_falling();
 8001b08:	f7ff ff72 	bl	80019f0 <ring_falling>
	HAL_Delay(1000);
 8001b0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b10:	f001 faf8 	bl	8003104 <HAL_Delay>
	ring_stop_falling();
 8001b14:	f7ff ff80 	bl	8001a18 <ring_stop_falling>
	HAL_Delay(700);
 8001b18:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001b1c:	f001 faf2 	bl	8003104 <HAL_Delay>
//	pick_up(78,10);
//	HAL_Delay(200);
	close_pickup();
 8001b20:	f7ff ff9e 	bl	8001a60 <close_pickup>
	HAL_Delay(400);
 8001b24:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b28:	f001 faec 	bl	8003104 <HAL_Delay>
	ring_falling();
 8001b2c:	f7ff ff60 	bl	80019f0 <ring_falling>
	HAL_Delay(2000);
 8001b30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b34:	f001 fae6 	bl	8003104 <HAL_Delay>
	ring_stop_falling();
 8001b38:	f7ff ff6e 	bl	8001a18 <ring_stop_falling>
	pick_up(125,12);
 8001b3c:	210c      	movs	r1, #12
 8001b3e:	207d      	movs	r0, #125	; 0x7d
 8001b40:	f7ff ff12 	bl	8001968 <pick_up>



}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <fall2_5_function>:
void fall2_5_function()
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	pick_up(95,10);
 8001b4c:	210a      	movs	r1, #10
 8001b4e:	205f      	movs	r0, #95	; 0x5f
 8001b50:	f7ff ff0a 	bl	8001968 <pick_up>
	HAL_Delay(200);
 8001b54:	20c8      	movs	r0, #200	; 0xc8
 8001b56:	f001 fad5 	bl	8003104 <HAL_Delay>
	open_pickup();
 8001b5a:	f7ff ff6d 	bl	8001a38 <open_pickup>
	HAL_Delay(600);
 8001b5e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001b62:	f001 facf 	bl	8003104 <HAL_Delay>
	ring_falling();
 8001b66:	f7ff ff43 	bl	80019f0 <ring_falling>
	HAL_Delay(1700);
 8001b6a:	f240 60a4 	movw	r0, #1700	; 0x6a4
 8001b6e:	f001 fac9 	bl	8003104 <HAL_Delay>
	ring_stop_falling();
 8001b72:	f7ff ff51 	bl	8001a18 <ring_stop_falling>
	HAL_Delay(700);
 8001b76:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001b7a:	f001 fac3 	bl	8003104 <HAL_Delay>
//	pick_up(78,10);
//	HAL_Delay(200);
	close_pickup();
 8001b7e:	f7ff ff6f 	bl	8001a60 <close_pickup>
	HAL_Delay(400);
 8001b82:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b86:	f001 fabd 	bl	8003104 <HAL_Delay>
	ring_falling();
 8001b8a:	f7ff ff31 	bl	80019f0 <ring_falling>
	HAL_Delay(2000);
 8001b8e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b92:	f001 fab7 	bl	8003104 <HAL_Delay>
	ring_stop_falling();
 8001b96:	f7ff ff3f 	bl	8001a18 <ring_stop_falling>
	pick_up(125,15);
 8001b9a:	210f      	movs	r1, #15
 8001b9c:	207d      	movs	r0, #125	; 0x7d
 8001b9e:	f7ff fee3 	bl	8001968 <pick_up>



}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <shooter1_function>:
void shooter1_function(float input_speed)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	pick_up(125,10);
 8001bb0:	210a      	movs	r1, #10
 8001bb2:	207d      	movs	r0, #125	; 0x7d
 8001bb4:	f7ff fed8 	bl	8001968 <pick_up>
	HAL_Delay(1200);
 8001bb8:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001bbc:	f001 faa2 	bl	8003104 <HAL_Delay>
	speed = input_speed;
 8001bc0:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <shooter1_function+0x60>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6013      	str	r3, [r2, #0]
	HAL_Delay(700);
 8001bc6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001bca:	f001 fa9b 	bl	8003104 <HAL_Delay>
	data_r = 1;
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <shooter1_function+0x64>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	801a      	strh	r2, [r3, #0]
	HAL_Delay(400);
 8001bd4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001bd8:	f001 fa94 	bl	8003104 <HAL_Delay>
	data_r = 0;
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <shooter1_function+0x64>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	801a      	strh	r2, [r3, #0]
	HAL_Delay(500);
 8001be2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001be6:	f001 fa8d 	bl	8003104 <HAL_Delay>
	speed = 0;
 8001bea:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <shooter1_function+0x60>)
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
	shoot = 0;
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <shooter1_function+0x68>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
	pick_up(90,10);
 8001bf8:	210a      	movs	r1, #10
 8001bfa:	205a      	movs	r0, #90	; 0x5a
 8001bfc:	f7ff feb4 	bl	8001968 <pick_up>

}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	200000ac 	.word	0x200000ac
 8001c0c:	200000aa 	.word	0x200000aa
 8001c10:	20000152 	.word	0x20000152

08001c14 <shooter2_function>:
void shooter2_function(float input_speed)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
		pick_up(125,10);
 8001c1c:	210a      	movs	r1, #10
 8001c1e:	207d      	movs	r0, #125	; 0x7d
 8001c20:	f7ff fea2 	bl	8001968 <pick_up>
		HAL_Delay(1200);
 8001c24:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001c28:	f001 fa6c 	bl	8003104 <HAL_Delay>
		speed = input_speed;
 8001c2c:	4a11      	ldr	r2, [pc, #68]	; (8001c74 <shooter2_function+0x60>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]
		HAL_Delay(700);
 8001c32:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001c36:	f001 fa65 	bl	8003104 <HAL_Delay>
		data_r = 1;
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <shooter2_function+0x64>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	801a      	strh	r2, [r3, #0]
		HAL_Delay(400);
 8001c40:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001c44:	f001 fa5e 	bl	8003104 <HAL_Delay>
		data_r = 0;
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <shooter2_function+0x64>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	801a      	strh	r2, [r3, #0]
		HAL_Delay(500);
 8001c4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c52:	f001 fa57 	bl	8003104 <HAL_Delay>
		speed = 0;
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <shooter2_function+0x60>)
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
		shoot = 0;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <shooter2_function+0x68>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
		pick_up(90,10);
 8001c64:	210a      	movs	r1, #10
 8001c66:	205a      	movs	r0, #90	; 0x5a
 8001c68:	f7ff fe7e 	bl	8001968 <pick_up>

}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	200000ac 	.word	0x200000ac
 8001c78:	200000aa 	.word	0x200000aa
 8001c7c:	20000152 	.word	0x20000152

08001c80 <encoder>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
uint16_t encoder(int i)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	if (nowA[i] != lastA[i])
 8001c88:	4a6e      	ldr	r2, [pc, #440]	; (8001e44 <encoder+0x1c4>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	496d      	ldr	r1, [pc, #436]	; (8001e48 <encoder+0x1c8>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	440b      	add	r3, r1
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d05d      	beq.n	8001d5c <encoder+0xdc>
	{
		lastA[i] = nowA[i];
 8001ca0:	4a68      	ldr	r2, [pc, #416]	; (8001e44 <encoder+0x1c4>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b2d9      	uxtb	r1, r3
 8001caa:	4a67      	ldr	r2, [pc, #412]	; (8001e48 <encoder+0x1c8>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	460a      	mov	r2, r1
 8001cb2:	701a      	strb	r2, [r3, #0]
		if (lastA[i] == 0)
 8001cb4:	4a64      	ldr	r2, [pc, #400]	; (8001e48 <encoder+0x1c8>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d126      	bne.n	8001d10 <encoder+0x90>
		{
			if (nowB[i] == 0)
 8001cc2:	4a62      	ldr	r2, [pc, #392]	; (8001e4c <encoder+0x1cc>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10f      	bne.n	8001cf0 <encoder+0x70>
			{
				dir[i] = 0;
 8001cd0:	4a5f      	ldr	r2, [pc, #380]	; (8001e50 <encoder+0x1d0>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
				cnt[i]--;
 8001cda:	4a5e      	ldr	r2, [pc, #376]	; (8001e54 <encoder+0x1d4>)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	b299      	uxth	r1, r3
 8001ce6:	4a5b      	ldr	r2, [pc, #364]	; (8001e54 <encoder+0x1d4>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001cee:	e035      	b.n	8001d5c <encoder+0xdc>
			}
			else
			{
				dir[i] = 1;
 8001cf0:	4a57      	ldr	r2, [pc, #348]	; (8001e50 <encoder+0x1d0>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
				cnt[i]++;
 8001cfa:	4a56      	ldr	r2, [pc, #344]	; (8001e54 <encoder+0x1d4>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d02:	3301      	adds	r3, #1
 8001d04:	b299      	uxth	r1, r3
 8001d06:	4a53      	ldr	r2, [pc, #332]	; (8001e54 <encoder+0x1d4>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001d0e:	e025      	b.n	8001d5c <encoder+0xdc>
			}
		}
		else
		{
			if (nowB[i] == 1)
 8001d10:	4a4e      	ldr	r2, [pc, #312]	; (8001e4c <encoder+0x1cc>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d10f      	bne.n	8001d3e <encoder+0xbe>
			{
				dir[i] = 0;
 8001d1e:	4a4c      	ldr	r2, [pc, #304]	; (8001e50 <encoder+0x1d0>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
				cnt[i]--;
 8001d28:	4a4a      	ldr	r2, [pc, #296]	; (8001e54 <encoder+0x1d4>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b299      	uxth	r1, r3
 8001d34:	4a47      	ldr	r2, [pc, #284]	; (8001e54 <encoder+0x1d4>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001d3c:	e00e      	b.n	8001d5c <encoder+0xdc>
			}
			else
			{
				dir[i] = 1;
 8001d3e:	4a44      	ldr	r2, [pc, #272]	; (8001e50 <encoder+0x1d0>)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4413      	add	r3, r2
 8001d44:	2201      	movs	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]
				cnt[i]++;
 8001d48:	4a42      	ldr	r2, [pc, #264]	; (8001e54 <encoder+0x1d4>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d50:	3301      	adds	r3, #1
 8001d52:	b299      	uxth	r1, r3
 8001d54:	4a3f      	ldr	r2, [pc, #252]	; (8001e54 <encoder+0x1d4>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}
	}
	if (nowB[i] != lastB[i])
 8001d5c:	4a3b      	ldr	r2, [pc, #236]	; (8001e4c <encoder+0x1cc>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	493c      	ldr	r1, [pc, #240]	; (8001e58 <encoder+0x1d8>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	440b      	add	r3, r1
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d05d      	beq.n	8001e30 <encoder+0x1b0>
	{
		lastB[i] = nowB[i];
 8001d74:	4a35      	ldr	r2, [pc, #212]	; (8001e4c <encoder+0x1cc>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b2d9      	uxtb	r1, r3
 8001d7e:	4a36      	ldr	r2, [pc, #216]	; (8001e58 <encoder+0x1d8>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4413      	add	r3, r2
 8001d84:	460a      	mov	r2, r1
 8001d86:	701a      	strb	r2, [r3, #0]
		if (lastB[i] == 0)
 8001d88:	4a33      	ldr	r2, [pc, #204]	; (8001e58 <encoder+0x1d8>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d126      	bne.n	8001de4 <encoder+0x164>
		{
			if (nowA[i] == 1)
 8001d96:	4a2b      	ldr	r2, [pc, #172]	; (8001e44 <encoder+0x1c4>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d10f      	bne.n	8001dc4 <encoder+0x144>
			{
				dir[i] = 0;
 8001da4:	4a2a      	ldr	r2, [pc, #168]	; (8001e50 <encoder+0x1d0>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
				cnt[i]--;
 8001dae:	4a29      	ldr	r2, [pc, #164]	; (8001e54 <encoder+0x1d4>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b299      	uxth	r1, r3
 8001dba:	4a26      	ldr	r2, [pc, #152]	; (8001e54 <encoder+0x1d4>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001dc2:	e035      	b.n	8001e30 <encoder+0x1b0>
			}
			else
			{
				dir[i] = 1;
 8001dc4:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <encoder+0x1d0>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
				cnt[i]++;
 8001dce:	4a21      	ldr	r2, [pc, #132]	; (8001e54 <encoder+0x1d4>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	b299      	uxth	r1, r3
 8001dda:	4a1e      	ldr	r2, [pc, #120]	; (8001e54 <encoder+0x1d4>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001de2:	e025      	b.n	8001e30 <encoder+0x1b0>
			}
		}
		else
		{
			if (nowA[i] == 0)
 8001de4:	4a17      	ldr	r2, [pc, #92]	; (8001e44 <encoder+0x1c4>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10f      	bne.n	8001e12 <encoder+0x192>
			{
				dir[i] = 0;
 8001df2:	4a17      	ldr	r2, [pc, #92]	; (8001e50 <encoder+0x1d0>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4413      	add	r3, r2
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
				cnt[i]--;
 8001dfc:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <encoder+0x1d4>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	b299      	uxth	r1, r3
 8001e08:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <encoder+0x1d4>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001e10:	e00e      	b.n	8001e30 <encoder+0x1b0>
			}
			else
			{
				dir[i] = 1;
 8001e12:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <encoder+0x1d0>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4413      	add	r3, r2
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
				cnt[i]++;
 8001e1c:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <encoder+0x1d4>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e24:	3301      	adds	r3, #1
 8001e26:	b299      	uxth	r1, r3
 8001e28:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <encoder+0x1d4>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}
	}
	return cnt[i];
 8001e30:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <encoder+0x1d4>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	200000f4 	.word	0x200000f4
 8001e48:	200000fc 	.word	0x200000fc
 8001e4c:	200000f8 	.word	0x200000f8
 8001e50:	20000104 	.word	0x20000104
 8001e54:	20000108 	.word	0x20000108
 8001e58:	20000100 	.word	0x20000100
 8001e5c:	00000000 	.word	0x00000000

08001e60 <Motors_RPS>:
float Motors_RPS(int j, float SampleTime, float N_round)
{
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
	new_count[Motor1] = Enc_count[0];
 8001e6c:	4b72      	ldr	r3, [pc, #456]	; (8002038 <Motors_RPS+0x1d8>)
 8001e6e:	881a      	ldrh	r2, [r3, #0]
 8001e70:	4b72      	ldr	r3, [pc, #456]	; (800203c <Motors_RPS+0x1dc>)
 8001e72:	801a      	strh	r2, [r3, #0]
	new_count[Motor2] = Enc_count[1];
 8001e74:	4b70      	ldr	r3, [pc, #448]	; (8002038 <Motors_RPS+0x1d8>)
 8001e76:	885a      	ldrh	r2, [r3, #2]
 8001e78:	4b70      	ldr	r3, [pc, #448]	; (800203c <Motors_RPS+0x1dc>)
 8001e7a:	805a      	strh	r2, [r3, #2]

	count_state[Motor1] = !dir[0];
 8001e7c:	4b70      	ldr	r3, [pc, #448]	; (8002040 <Motors_RPS+0x1e0>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	bf0c      	ite	eq
 8001e86:	2301      	moveq	r3, #1
 8001e88:	2300      	movne	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b6d      	ldr	r3, [pc, #436]	; (8002044 <Motors_RPS+0x1e4>)
 8001e90:	701a      	strb	r2, [r3, #0]
	count_state[Motor2] = !dir[1];
 8001e92:	4b6b      	ldr	r3, [pc, #428]	; (8002040 <Motors_RPS+0x1e0>)
 8001e94:	785b      	ldrb	r3, [r3, #1]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b67      	ldr	r3, [pc, #412]	; (8002044 <Motors_RPS+0x1e4>)
 8001ea6:	705a      	strb	r2, [r3, #1]

	if (count_state[j])
 8001ea8:	4a66      	ldr	r2, [pc, #408]	; (8002044 <Motors_RPS+0x1e4>)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4413      	add	r3, r2
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d04f      	beq.n	8001f54 <Motors_RPS+0xf4>
	{
		if (new_count[j] <= count[j])
 8001eb4:	4a61      	ldr	r2, [pc, #388]	; (800203c <Motors_RPS+0x1dc>)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ebc:	4962      	ldr	r1, [pc, #392]	; (8002048 <Motors_RPS+0x1e8>)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d80e      	bhi.n	8001ee6 <Motors_RPS+0x86>
		{ // Check for counter underflow
			diff[j] = count[j] - new_count[j];
 8001ec8:	4a5f      	ldr	r2, [pc, #380]	; (8002048 <Motors_RPS+0x1e8>)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ed0:	495a      	ldr	r1, [pc, #360]	; (800203c <Motors_RPS+0x1dc>)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	b299      	uxth	r1, r3
 8001edc:	4a5b      	ldr	r2, [pc, #364]	; (800204c <Motors_RPS+0x1ec>)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001ee4:	e00d      	b.n	8001f02 <Motors_RPS+0xa2>
		}
		else
		{
			diff[j] = (65536 - new_count[j]) + count[j];
 8001ee6:	4a58      	ldr	r2, [pc, #352]	; (8002048 <Motors_RPS+0x1e8>)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001eee:	4953      	ldr	r1, [pc, #332]	; (800203c <Motors_RPS+0x1dc>)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	b299      	uxth	r1, r3
 8001efa:	4a54      	ldr	r2, [pc, #336]	; (800204c <Motors_RPS+0x1ec>)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		speedM[j] = (float)diff[j] * 1000.0f / (N_round * SampleTime) * -1.0;
 8001f02:	4a52      	ldr	r2, [pc, #328]	; (800204c <Motors_RPS+0x1ec>)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fe9c 	bl	8000c48 <__aeabi_ui2f>
 8001f10:	4603      	mov	r3, r0
 8001f12:	494f      	ldr	r1, [pc, #316]	; (8002050 <Motors_RPS+0x1f0>)
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe feef 	bl	8000cf8 <__aeabi_fmul>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	461c      	mov	r4, r3
 8001f1e:	68b9      	ldr	r1, [r7, #8]
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7fe fee9 	bl	8000cf8 <__aeabi_fmul>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	f7fe ff98 	bl	8000e60 <__aeabi_fdiv>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fa70 	bl	8000418 <__aeabi_f2d>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f7fe fd7c 	bl	8000a3c <__aeabi_d2f>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001f4a:	4942      	ldr	r1, [pc, #264]	; (8002054 <Motors_RPS+0x1f4>)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001f52:	e043      	b.n	8001fdc <Motors_RPS+0x17c>
	}
	else
	{
		if (new_count[j] >= count[j])
 8001f54:	4a39      	ldr	r2, [pc, #228]	; (800203c <Motors_RPS+0x1dc>)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f5c:	493a      	ldr	r1, [pc, #232]	; (8002048 <Motors_RPS+0x1e8>)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d30e      	bcc.n	8001f86 <Motors_RPS+0x126>
		{ // Check for counter overflow
			diff[j] = new_count[j] - count[j];
 8001f68:	4a34      	ldr	r2, [pc, #208]	; (800203c <Motors_RPS+0x1dc>)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f70:	4935      	ldr	r1, [pc, #212]	; (8002048 <Motors_RPS+0x1e8>)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	b299      	uxth	r1, r3
 8001f7c:	4a33      	ldr	r2, [pc, #204]	; (800204c <Motors_RPS+0x1ec>)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001f84:	e00d      	b.n	8001fa2 <Motors_RPS+0x142>
		}
		else
		{
			diff[j] = (65536 - count[j]) + new_count[j];
 8001f86:	4a2d      	ldr	r2, [pc, #180]	; (800203c <Motors_RPS+0x1dc>)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f8e:	492e      	ldr	r1, [pc, #184]	; (8002048 <Motors_RPS+0x1e8>)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	b299      	uxth	r1, r3
 8001f9a:	4a2c      	ldr	r2, [pc, #176]	; (800204c <Motors_RPS+0x1ec>)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		speedM[j] = (float)diff[j] * 1000.0f / (N_round * SampleTime);
 8001fa2:	4a2a      	ldr	r2, [pc, #168]	; (800204c <Motors_RPS+0x1ec>)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fe4c 	bl	8000c48 <__aeabi_ui2f>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	4927      	ldr	r1, [pc, #156]	; (8002050 <Motors_RPS+0x1f0>)
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fe9f 	bl	8000cf8 <__aeabi_fmul>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	461c      	mov	r4, r3
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7fe fe99 	bl	8000cf8 <__aeabi_fmul>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f7fe ff48 	bl	8000e60 <__aeabi_fdiv>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4a1f      	ldr	r2, [pc, #124]	; (8002054 <Motors_RPS+0x1f4>)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	rdps[j] = -2.0f * pi * speedM[j];
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	; (8002054 <Motors_RPS+0x1f4>)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fa17 	bl	8000418 <__aeabi_f2d>
 8001fea:	a311      	add	r3, pc, #68	; (adr r3, 8002030 <Motors_RPS+0x1d0>)
 8001fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff0:	f7fe fa6a 	bl	80004c8 <__aeabi_dmul>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f7fe fd1e 	bl	8000a3c <__aeabi_d2f>
 8002000:	4602      	mov	r2, r0
 8002002:	4915      	ldr	r1, [pc, #84]	; (8002058 <Motors_RPS+0x1f8>)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	count[j] = new_count[j];
 800200a:	4a0c      	ldr	r2, [pc, #48]	; (800203c <Motors_RPS+0x1dc>)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002012:	4a0d      	ldr	r2, [pc, #52]	; (8002048 <Motors_RPS+0x1e8>)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return rdps[j];
 800201a:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <Motors_RPS+0x1f8>)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}
 800202a:	bf00      	nop
 800202c:	f3af 8000 	nop.w
 8002030:	c083126f 	.word	0xc083126f
 8002034:	c01921ca 	.word	0xc01921ca
 8002038:	2000010c 	.word	0x2000010c
 800203c:	20000114 	.word	0x20000114
 8002040:	20000104 	.word	0x20000104
 8002044:	20000118 	.word	0x20000118
 8002048:	20000110 	.word	0x20000110
 800204c:	2000011c 	.word	0x2000011c
 8002050:	447a0000 	.word	0x447a0000
 8002054:	20000120 	.word	0x20000120
 8002058:	20000128 	.word	0x20000128

0800205c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002060:	f000 ffee 	bl	8003040 <HAL_Init>

  /* USER CODE BEGIN Init */
	PID_Init(&MPID, 2);
 8002064:	2102      	movs	r1, #2
 8002066:	486c      	ldr	r0, [pc, #432]	; (8002218 <main+0x1bc>)
 8002068:	f7ff f82c 	bl	80010c4 <PID_Init>
	MPID.T = 0.01; // T = 20ms
 800206c:	4b6a      	ldr	r3, [pc, #424]	; (8002218 <main+0x1bc>)
 800206e:	4a6b      	ldr	r2, [pc, #428]	; (800221c <main+0x1c0>)
 8002070:	615a      	str	r2, [r3, #20]
	MPID.limMax = 1000;
 8002072:	4b69      	ldr	r3, [pc, #420]	; (8002218 <main+0x1bc>)
 8002074:	4a6a      	ldr	r2, [pc, #424]	; (8002220 <main+0x1c4>)
 8002076:	609a      	str	r2, [r3, #8]
	MPID.limMin = -10;
 8002078:	4b67      	ldr	r3, [pc, #412]	; (8002218 <main+0x1bc>)
 800207a:	4a6a      	ldr	r2, [pc, #424]	; (8002224 <main+0x1c8>)
 800207c:	605a      	str	r2, [r3, #4]
	MPID.limMaxInt = 1000;
 800207e:	4b66      	ldr	r3, [pc, #408]	; (8002218 <main+0x1bc>)
 8002080:	4a67      	ldr	r2, [pc, #412]	; (8002220 <main+0x1c4>)
 8002082:	611a      	str	r2, [r3, #16]
	MPID.limMinInt = -10;
 8002084:	4b64      	ldr	r3, [pc, #400]	; (8002218 <main+0x1bc>)
 8002086:	4a67      	ldr	r2, [pc, #412]	; (8002224 <main+0x1c8>)
 8002088:	60da      	str	r2, [r3, #12]
	MPID.tau = 0; // for K
 800208a:	4b63      	ldr	r3, [pc, #396]	; (8002218 <main+0x1bc>)
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002092:	f000 f8e7 	bl	8002264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002096:	f7ff fa21 	bl	80014dc <MX_GPIO_Init>
  MX_TIM2_Init();
 800209a:	f000 fd7b 	bl	8002b94 <MX_TIM2_Init>
  MX_TIM4_Init();
 800209e:	f000 fe49 	bl	8002d34 <MX_TIM4_Init>
  MX_CAN_Init();
 80020a2:	f7ff f975 	bl	8001390 <MX_CAN_Init>
  MX_TIM3_Init();
 80020a6:	f000 fdc3 	bl	8002c30 <MX_TIM3_Init>
  MX_I2C2_Init();
 80020aa:	f7ff fabf 	bl	800162c <MX_I2C2_Init>
  MX_TIM1_Init();
 80020ae:	f000 fd21 	bl	8002af4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80020b2:	485d      	ldr	r0, [pc, #372]	; (8002228 <main+0x1cc>)
 80020b4:	f003 fe74 	bl	8005da0 <HAL_TIM_Base_Start_IT>
  // TIMER INTERUPT
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);				// M1
 80020b8:	2100      	movs	r1, #0
 80020ba:	485c      	ldr	r0, [pc, #368]	; (800222c <main+0x1d0>)
 80020bc:	f003 ff1a 	bl	8005ef4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);				// M2
 80020c0:	2104      	movs	r1, #4
 80020c2:	485a      	ldr	r0, [pc, #360]	; (800222c <main+0x1d0>)
 80020c4:	f003 ff16 	bl	8005ef4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);				// M1
 80020c8:	2108      	movs	r1, #8
 80020ca:	4858      	ldr	r0, [pc, #352]	; (800222c <main+0x1d0>)
 80020cc:	f003 ff12 	bl	8005ef4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80020d0:	210c      	movs	r1, #12
 80020d2:	4856      	ldr	r0, [pc, #344]	; (800222c <main+0x1d0>)
 80020d4:	f003 ff0e 	bl	8005ef4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);				// Servo limit
 80020d8:	2100      	movs	r1, #0
 80020da:	4855      	ldr	r0, [pc, #340]	; (8002230 <main+0x1d4>)
 80020dc:	f003 ff0a 	bl	8005ef4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);				// Servo pickup
 80020e0:	2104      	movs	r1, #4
 80020e2:	4853      	ldr	r0, [pc, #332]	; (8002230 <main+0x1d4>)
 80020e4:	f003 ff06 	bl	8005ef4 <HAL_TIM_PWM_Start>

	HAL_CAN_Start(&hcan);
 80020e8:	4852      	ldr	r0, [pc, #328]	; (8002234 <main+0x1d8>)
 80020ea:	f001 f9f3 	bl	80034d4 <HAL_CAN_Start>

	// Activate the notification
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80020ee:	2110      	movs	r1, #16
 80020f0:	4850      	ldr	r0, [pc, #320]	; (8002234 <main+0x1d8>)
 80020f2:	f001 fb44 	bl	800377e <HAL_CAN_ActivateNotification>

	PCA9685_Init(&hi2c2);
 80020f6:	4850      	ldr	r0, [pc, #320]	; (8002238 <main+0x1dc>)
 80020f8:	f000 fc50 	bl	800299c <PCA9685_Init>
	PCA9685_SetServoAngle(0, 140);
 80020fc:	494f      	ldr	r1, [pc, #316]	; (800223c <main+0x1e0>)
 80020fe:	2000      	movs	r0, #0
 8002100:	f000 fbf6 	bl	80028f0 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, 40);
 8002104:	494e      	ldr	r1, [pc, #312]	; (8002240 <main+0x1e4>)
 8002106:	2001      	movs	r0, #1
 8002108:	f000 fbf2 	bl	80028f0 <PCA9685_SetServoAngle>
	PCA9685_SetPin(4, 4096, 0);
 800210c:	2200      	movs	r2, #0
 800210e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002112:	2004      	movs	r0, #4
 8002114:	f000 fb8e 	bl	8002834 <PCA9685_SetPin>
	PCA9685_SetPin(5, 4096, 0);
 8002118:	2200      	movs	r2, #0
 800211a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800211e:	2005      	movs	r0, #5
 8002120:	f000 fb88 	bl	8002834 <PCA9685_SetPin>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  pick_up(degree,10);
 8002124:	4b47      	ldr	r3, [pc, #284]	; (8002244 <main+0x1e8>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	210a      	movs	r1, #10
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fc1c 	bl	8001968 <pick_up>
	  if(HAL_GetTick() < 5000){
 8002130:	f000 ffde 	bl	80030f0 <HAL_GetTick>
 8002134:	4603      	mov	r3, r0
 8002136:	f241 3287 	movw	r2, #4999	; 0x1387
 800213a:	4293      	cmp	r3, r2
 800213c:	d806      	bhi.n	800214c <main+0xf0>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 800213e:	2104      	movs	r1, #4
 8002140:	4841      	ldr	r0, [pc, #260]	; (8002248 <main+0x1ec>)
 8002142:	f002 f826 	bl	8004192 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8002146:	2064      	movs	r0, #100	; 0x64
 8002148:	f000 ffdc 	bl	8003104 <HAL_Delay>
	  }
	  if(pick == 1 && push == 0)
 800214c:	4b3f      	ldr	r3, [pc, #252]	; (800224c <main+0x1f0>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d135      	bne.n	80021c0 <main+0x164>
 8002154:	4b3e      	ldr	r3, [pc, #248]	; (8002250 <main+0x1f4>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d131      	bne.n	80021c0 <main+0x164>
	  {
		  if(c<5)
 800215c:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <main+0x1f8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b04      	cmp	r3, #4
 8002162:	dc02      	bgt.n	800216a <main+0x10e>
		  {
			  fall1_function();
 8002164:	f7ff fc92 	bl	8001a8c <fall1_function>
 8002168:	e022      	b.n	80021b0 <main+0x154>
		  }
		  else if (c>=3 && c<7)
 800216a:	4b3a      	ldr	r3, [pc, #232]	; (8002254 <main+0x1f8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b02      	cmp	r3, #2
 8002170:	dd06      	ble.n	8002180 <main+0x124>
 8002172:	4b38      	ldr	r3, [pc, #224]	; (8002254 <main+0x1f8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b06      	cmp	r3, #6
 8002178:	dc02      	bgt.n	8002180 <main+0x124>
		  {
			  fall1_function();
 800217a:	f7ff fc87 	bl	8001a8c <fall1_function>
 800217e:	e017      	b.n	80021b0 <main+0x154>
		  }
		  else if(c>=7&&c<9){
 8002180:	4b34      	ldr	r3, [pc, #208]	; (8002254 <main+0x1f8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b06      	cmp	r3, #6
 8002186:	dd06      	ble.n	8002196 <main+0x13a>
 8002188:	4b32      	ldr	r3, [pc, #200]	; (8002254 <main+0x1f8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b08      	cmp	r3, #8
 800218e:	dc02      	bgt.n	8002196 <main+0x13a>
			  fall2_function();
 8002190:	f7ff fcab 	bl	8001aea <fall2_function>
 8002194:	e00c      	b.n	80021b0 <main+0x154>
		  }
		else if(c>=8)
 8002196:	4b2f      	ldr	r3, [pc, #188]	; (8002254 <main+0x1f8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b07      	cmp	r3, #7
 800219c:	dd08      	ble.n	80021b0 <main+0x154>
			{
				fall2_5_function();
 800219e:	f7ff fcd3 	bl	8001b48 <fall2_5_function>
				if(c ==10)
 80021a2:	4b2c      	ldr	r3, [pc, #176]	; (8002254 <main+0x1f8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2b0a      	cmp	r3, #10
 80021a8:	d102      	bne.n	80021b0 <main+0x154>
				{
					c = 0;
 80021aa:	4b2a      	ldr	r3, [pc, #168]	; (8002254 <main+0x1f8>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
				}
			}
		  c = c+1;
 80021b0:	4b28      	ldr	r3, [pc, #160]	; (8002254 <main+0x1f8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	3301      	adds	r3, #1
 80021b6:	4a27      	ldr	r2, [pc, #156]	; (8002254 <main+0x1f8>)
 80021b8:	6013      	str	r3, [r2, #0]
		  pick = 0;
 80021ba:	4b24      	ldr	r3, [pc, #144]	; (800224c <main+0x1f0>)
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
	  }
	  if(shoot == 1){
 80021c0:	4b25      	ldr	r3, [pc, #148]	; (8002258 <main+0x1fc>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d119      	bne.n	80021fc <main+0x1a0>
		  if(c<5)
 80021c8:	4b22      	ldr	r3, [pc, #136]	; (8002254 <main+0x1f8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	dc05      	bgt.n	80021dc <main+0x180>
		  {
			  shooter1_function(speed);
 80021d0:	4b22      	ldr	r3, [pc, #136]	; (800225c <main+0x200>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fce7 	bl	8001ba8 <shooter1_function>
 80021da:	e00f      	b.n	80021fc <main+0x1a0>
		  }
		  else if(c>=5){
 80021dc:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <main+0x1f8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	dd0b      	ble.n	80021fc <main+0x1a0>
		  		shooter2_function(speed);
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <main+0x200>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fd13 	bl	8001c14 <shooter2_function>
		  		if(c == 10)
 80021ee:	4b19      	ldr	r3, [pc, #100]	; (8002254 <main+0x1f8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b0a      	cmp	r3, #10
 80021f4:	d102      	bne.n	80021fc <main+0x1a0>
		  		{
		  			c = 0;
 80021f6:	4b17      	ldr	r3, [pc, #92]	; (8002254 <main+0x1f8>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
		  		}
		  	}

	  }
	  if(control_fall == 1)
 80021fc:	4b18      	ldr	r3, [pc, #96]	; (8002260 <main+0x204>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d102      	bne.n	800220a <main+0x1ae>
	  {
		  ring_falling();
 8002204:	f7ff fbf4 	bl	80019f0 <ring_falling>
 8002208:	e78c      	b.n	8002124 <main+0xc8>
	  }
	  else if(control_fall == 0)
 800220a:	4b15      	ldr	r3, [pc, #84]	; (8002260 <main+0x204>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d188      	bne.n	8002124 <main+0xc8>
	  {
		  ring_stop_falling();
 8002212:	f7ff fc01 	bl	8001a18 <ring_stop_falling>
	  pick_up(degree,10);
 8002216:	e785      	b.n	8002124 <main+0xc8>
 8002218:	200000b4 	.word	0x200000b4
 800221c:	3c23d70a 	.word	0x3c23d70a
 8002220:	447a0000 	.word	0x447a0000
 8002224:	c1200000 	.word	0xc1200000
 8002228:	200001cc 	.word	0x200001cc
 800222c:	2000025c 	.word	0x2000025c
 8002230:	20000214 	.word	0x20000214
 8002234:	2000002c 	.word	0x2000002c
 8002238:	20000054 	.word	0x20000054
 800223c:	430c0000 	.word	0x430c0000
 8002240:	42200000 	.word	0x42200000
 8002244:	20000000 	.word	0x20000000
 8002248:	40010800 	.word	0x40010800
 800224c:	20000150 	.word	0x20000150
 8002250:	20000155 	.word	0x20000155
 8002254:	2000014c 	.word	0x2000014c
 8002258:	20000152 	.word	0x20000152
 800225c:	200000ac 	.word	0x200000ac
 8002260:	20000156 	.word	0x20000156

08002264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b090      	sub	sp, #64	; 0x40
 8002268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800226a:	f107 0318 	add.w	r3, r7, #24
 800226e:	2228      	movs	r2, #40	; 0x28
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f004 fcc6 	bl	8006c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002278:	1d3b      	adds	r3, r7, #4
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	60da      	str	r2, [r3, #12]
 8002284:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002286:	2301      	movs	r3, #1
 8002288:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800228a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800228e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002294:	2301      	movs	r3, #1
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002298:	2302      	movs	r3, #2
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800229c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80022a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022a8:	f107 0318 	add.w	r3, r7, #24
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 f921 	bl	80054f4 <HAL_RCC_OscConfig>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80022b8:	f000 f960 	bl	800257c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022bc:	230f      	movs	r3, #15
 80022be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022c0:	2302      	movs	r3, #2
 80022c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	2102      	movs	r1, #2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 fb8e 	bl	80059f8 <HAL_RCC_ClockConfig>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80022e2:	f000 f94b 	bl	800257c <Error_Handler>
  }
}
 80022e6:	bf00      	nop
 80022e8:	3740      	adds	r7, #64	; 0x40
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == En1_C1_Pin || En1_C2_Pin)
	{ // ENCODER Motor 1
		nowA[0] = HAL_GPIO_ReadPin(En1_C1_GPIO_Port, En1_C1_Pin);
 80022fa:	2108      	movs	r1, #8
 80022fc:	4818      	ldr	r0, [pc, #96]	; (8002360 <HAL_GPIO_EXTI_Callback+0x70>)
 80022fe:	f001 ff19 	bl	8004134 <HAL_GPIO_ReadPin>
 8002302:	4603      	mov	r3, r0
 8002304:	461a      	mov	r2, r3
 8002306:	4b17      	ldr	r3, [pc, #92]	; (8002364 <HAL_GPIO_EXTI_Callback+0x74>)
 8002308:	701a      	strb	r2, [r3, #0]
		nowB[0] = HAL_GPIO_ReadPin(En1_C2_GPIO_Port, En1_C2_Pin);
 800230a:	2110      	movs	r1, #16
 800230c:	4814      	ldr	r0, [pc, #80]	; (8002360 <HAL_GPIO_EXTI_Callback+0x70>)
 800230e:	f001 ff11 	bl	8004134 <HAL_GPIO_ReadPin>
 8002312:	4603      	mov	r3, r0
 8002314:	461a      	mov	r2, r3
 8002316:	4b14      	ldr	r3, [pc, #80]	; (8002368 <HAL_GPIO_EXTI_Callback+0x78>)
 8002318:	701a      	strb	r2, [r3, #0]
		Enc_count[0] = encoder(0);
 800231a:	2000      	movs	r0, #0
 800231c:	f7ff fcb0 	bl	8001c80 <encoder>
 8002320:	4603      	mov	r3, r0
 8002322:	461a      	mov	r2, r3
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_GPIO_EXTI_Callback+0x7c>)
 8002326:	801a      	strh	r2, [r3, #0]
	}
	if (GPIO_Pin == En2_C1_Pin || En2_C2_Pin)
	{ // ENCODER Motor 2
		nowA[1] = HAL_GPIO_ReadPin(En2_C1_GPIO_Port, En2_C1_Pin);
 8002328:	2120      	movs	r1, #32
 800232a:	480d      	ldr	r0, [pc, #52]	; (8002360 <HAL_GPIO_EXTI_Callback+0x70>)
 800232c:	f001 ff02 	bl	8004134 <HAL_GPIO_ReadPin>
 8002330:	4603      	mov	r3, r0
 8002332:	461a      	mov	r2, r3
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_GPIO_EXTI_Callback+0x74>)
 8002336:	705a      	strb	r2, [r3, #1]
		nowB[1] = HAL_GPIO_ReadPin(En2_C2_GPIO_Port, En2_C2_Pin);
 8002338:	2140      	movs	r1, #64	; 0x40
 800233a:	4809      	ldr	r0, [pc, #36]	; (8002360 <HAL_GPIO_EXTI_Callback+0x70>)
 800233c:	f001 fefa 	bl	8004134 <HAL_GPIO_ReadPin>
 8002340:	4603      	mov	r3, r0
 8002342:	461a      	mov	r2, r3
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_GPIO_EXTI_Callback+0x78>)
 8002346:	705a      	strb	r2, [r3, #1]
		Enc_count[1] = encoder(1);
 8002348:	2001      	movs	r0, #1
 800234a:	f7ff fc99 	bl	8001c80 <encoder>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_GPIO_EXTI_Callback+0x7c>)
 8002354:	805a      	strh	r2, [r3, #2]
	}
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40010800 	.word	0x40010800
 8002364:	200000f4 	.word	0x200000f4
 8002368:	200000f8 	.word	0x200000f8
 800236c:	2000010c 	.word	0x2000010c

08002370 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002370:	b590      	push	{r4, r7, lr}
 8002372:	b087      	sub	sp, #28
 8002374:	af04      	add	r7, sp, #16
 8002376:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002380:	f040 80d4 	bne.w	800252c <HAL_TIM_PeriodElapsedCallback+0x1bc>
		// PID // need to change for using
		pwm_M1 = PID(&MPID, speed, Motor1_speed, MKp, MKi, MKd, Motor1);
 8002384:	4b6b      	ldr	r3, [pc, #428]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002386:	6819      	ldr	r1, [r3, #0]
 8002388:	4b6b      	ldr	r3, [pc, #428]	; (8002538 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	2300      	movs	r3, #0
 800238e:	9302      	str	r3, [sp, #8]
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	4b69      	ldr	r3, [pc, #420]	; (800253c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	4b69      	ldr	r3, [pc, #420]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800239c:	4869      	ldr	r0, [pc, #420]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800239e:	f7fe fec9 	bl	8001134 <PID>
 80023a2:	4603      	mov	r3, r0
 80023a4:	4a68      	ldr	r2, [pc, #416]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80023a6:	6013      	str	r3, [r2, #0]
		pwm_M2 = PID(&MPID, speed, Motor2_speed, MKp, MKi, MKd, Motor2);
 80023a8:	4b62      	ldr	r3, [pc, #392]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80023aa:	6819      	ldr	r1, [r3, #0]
 80023ac:	4b67      	ldr	r3, [pc, #412]	; (800254c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2301      	movs	r3, #1
 80023b2:	9302      	str	r3, [sp, #8]
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	4b60      	ldr	r3, [pc, #384]	; (800253c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	4b60      	ldr	r3, [pc, #384]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80023c0:	4860      	ldr	r0, [pc, #384]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80023c2:	f7fe feb7 	bl	8001134 <PID>
 80023c6:	4603      	mov	r3, r0
 80023c8:	4a61      	ldr	r2, [pc, #388]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80023ca:	6013      	str	r3, [r2, #0]
		// feedback speed
//		pwm_M1 = speed;
//		pwm_M2 = speed;
		Motor1_speed = (float)fabs(Motors_RPS(Motor1, Sample_time, CPR));
 80023cc:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 80023d0:	4960      	ldr	r1, [pc, #384]	; (8002554 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7ff fd44 	bl	8001e60 <Motors_RPS>
 80023d8:	4603      	mov	r3, r0
 80023da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023de:	4a56      	ldr	r2, [pc, #344]	; (8002538 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80023e0:	6013      	str	r3, [r2, #0]
		Motor2_speed = (float)fabs(Motors_RPS(Motor2, Sample_time, CPR));
 80023e2:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 80023e6:	495b      	ldr	r1, [pc, #364]	; (8002554 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80023e8:	2001      	movs	r0, #1
 80023ea:	f7ff fd39 	bl	8001e60 <Motors_RPS>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023f4:	4a55      	ldr	r2, [pc, #340]	; (800254c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80023f6:	6013      	str	r3, [r2, #0]
		pwm_r = speed_r;
 80023f8:	4b57      	ldr	r3, [pc, #348]	; (8002558 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a57      	ldr	r2, [pc, #348]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80023fe:	6013      	str	r3, [r2, #0]

		if(data_r == 1 && data_limit == 0)
 8002400:	4b57      	ldr	r3, [pc, #348]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d115      	bne.n	8002434 <HAL_TIM_PeriodElapsedCallback+0xc4>
 8002408:	4b56      	ldr	r3, [pc, #344]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d111      	bne.n	8002434 <HAL_TIM_PeriodElapsedCallback+0xc4>
		{
			HAL_GPIO_WritePin(M1_dir_GPIO_Port, M1_dir_Pin, 1);
 8002410:	2201      	movs	r2, #1
 8002412:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002416:	4854      	ldr	r0, [pc, #336]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002418:	f001 fea3 	bl	8004162 <HAL_GPIO_WritePin>
			pwm_r =450;
 800241c:	4b4f      	ldr	r3, [pc, #316]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800241e:	4a53      	ldr	r2, [pc, #332]	; (800256c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002420:	601a      	str	r2, [r3, #0]
			TIM4->CCR1 = pwm_r;
 8002422:	4b4e      	ldr	r3, [pc, #312]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4c52      	ldr	r4, [pc, #328]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe fe2b 	bl	8001084 <__aeabi_f2uiz>
 800242e:	4603      	mov	r3, r0
 8002430:	6363      	str	r3, [r4, #52]	; 0x34
 8002432:	e046      	b.n	80024c2 <HAL_TIM_PeriodElapsedCallback+0x152>

		}
		else if(data_r == 1 && data_limit == 1)
 8002434:	4b4a      	ldr	r3, [pc, #296]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d116      	bne.n	800246a <HAL_TIM_PeriodElapsedCallback+0xfa>
 800243c:	4b49      	ldr	r3, [pc, #292]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d112      	bne.n	800246a <HAL_TIM_PeriodElapsedCallback+0xfa>
		{
			HAL_GPIO_WritePin(M1_dir_GPIO_Port, M1_dir_Pin, 0);
 8002444:	2200      	movs	r2, #0
 8002446:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800244a:	4847      	ldr	r0, [pc, #284]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800244c:	f001 fe89 	bl	8004162 <HAL_GPIO_WritePin>
			pwm_r = 0;
 8002450:	4b42      	ldr	r3, [pc, #264]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
			TIM4->CCR1 = pwm_r;
 8002458:	4b40      	ldr	r3, [pc, #256]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4c44      	ldr	r4, [pc, #272]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fe10 	bl	8001084 <__aeabi_f2uiz>
 8002464:	4603      	mov	r3, r0
 8002466:	6363      	str	r3, [r4, #52]	; 0x34
 8002468:	e02b      	b.n	80024c2 <HAL_TIM_PeriodElapsedCallback+0x152>
		}
		else if(data_r == 0 && data_limit == 1)
 800246a:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d115      	bne.n	800249e <HAL_TIM_PeriodElapsedCallback+0x12e>
 8002472:	4b3c      	ldr	r3, [pc, #240]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d111      	bne.n	800249e <HAL_TIM_PeriodElapsedCallback+0x12e>
		{
			HAL_GPIO_WritePin(M1_dir_GPIO_Port, M1_dir_Pin, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002480:	4839      	ldr	r0, [pc, #228]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002482:	f001 fe6e 	bl	8004162 <HAL_GPIO_WritePin>
			pwm_r = 450;
 8002486:	4b35      	ldr	r3, [pc, #212]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002488:	4a38      	ldr	r2, [pc, #224]	; (800256c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800248a:	601a      	str	r2, [r3, #0]
			TIM4->CCR1 = pwm_r;
 800248c:	4b33      	ldr	r3, [pc, #204]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4c37      	ldr	r4, [pc, #220]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fdf6 	bl	8001084 <__aeabi_f2uiz>
 8002498:	4603      	mov	r3, r0
 800249a:	6363      	str	r3, [r4, #52]	; 0x34
 800249c:	e011      	b.n	80024c2 <HAL_TIM_PeriodElapsedCallback+0x152>

		}
		else
		{
			HAL_GPIO_WritePin(M1_dir_GPIO_Port, M1_dir_Pin, 1);
 800249e:	2201      	movs	r2, #1
 80024a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024a4:	4830      	ldr	r0, [pc, #192]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80024a6:	f001 fe5c 	bl	8004162 <HAL_GPIO_WritePin>
			pwm_r = 0;
 80024aa:	4b2c      	ldr	r3, [pc, #176]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
			TIM4->CCR1 = pwm_r;
 80024b2:	4b2a      	ldr	r3, [pc, #168]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4c2e      	ldr	r4, [pc, #184]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe fde3 	bl	8001084 <__aeabi_f2uiz>
 80024be:	4603      	mov	r3, r0
 80024c0:	6363      	str	r3, [r4, #52]	; 0x34
		}

		// dir
		HAL_GPIO_WritePin(M2_dir_GPIO_Port, M2_dir_Pin, 0); // M2
 80024c2:	2200      	movs	r2, #0
 80024c4:	2101      	movs	r1, #1
 80024c6:	482b      	ldr	r0, [pc, #172]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80024c8:	f001 fe4b 	bl	8004162 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M3_dir_GPIO_Port, M3_dir_Pin, 0); // M1
 80024cc:	2200      	movs	r2, #0
 80024ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024d2:	4825      	ldr	r0, [pc, #148]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80024d4:	f001 fe45 	bl	8004162 <HAL_GPIO_WritePin>





		if (pwm_M1 > 20)
 80024d8:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4926      	ldr	r1, [pc, #152]	; (8002578 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe fdc6 	bl	8001070 <__aeabi_fcmpgt>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d008      	beq.n	80024fc <HAL_TIM_PeriodElapsedCallback+0x18c>
		{
			TIM4->CCR2 = pwm_M1;
 80024ea:	4b17      	ldr	r3, [pc, #92]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4c20      	ldr	r4, [pc, #128]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe fdc7 	bl	8001084 <__aeabi_f2uiz>
 80024f6:	4603      	mov	r3, r0
 80024f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80024fa:	e002      	b.n	8002502 <HAL_TIM_PeriodElapsedCallback+0x192>
		}
		else
		{
			TIM4->CCR2 = 0;
 80024fc:	4b1c      	ldr	r3, [pc, #112]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80024fe:	2200      	movs	r2, #0
 8002500:	639a      	str	r2, [r3, #56]	; 0x38
		}


		if (pwm_M2 > 20)
 8002502:	4b13      	ldr	r3, [pc, #76]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	491c      	ldr	r1, [pc, #112]	; (8002578 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe fdb1 	bl	8001070 <__aeabi_fcmpgt>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_TIM_PeriodElapsedCallback+0x1b6>
		{
			TIM4->CCR3 = pwm_M2;
 8002514:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4c15      	ldr	r4, [pc, #84]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe fdb2 	bl	8001084 <__aeabi_f2uiz>
 8002520:	4603      	mov	r3, r0
 8002522:	63e3      	str	r3, [r4, #60]	; 0x3c




	}
}
 8002524:	e002      	b.n	800252c <HAL_TIM_PeriodElapsedCallback+0x1bc>
			TIM4->CCR3 = 0;
 8002526:	4b12      	ldr	r3, [pc, #72]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002528:	2200      	movs	r2, #0
 800252a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	bd90      	pop	{r4, r7, pc}
 8002534:	200000ac 	.word	0x200000ac
 8002538:	20000130 	.word	0x20000130
 800253c:	41ccb852 	.word	0x41ccb852
 8002540:	3f91eb85 	.word	0x3f91eb85
 8002544:	200000b4 	.word	0x200000b4
 8002548:	20000138 	.word	0x20000138
 800254c:	20000134 	.word	0x20000134
 8002550:	2000013c 	.word	0x2000013c
 8002554:	41200000 	.word	0x41200000
 8002558:	200000b0 	.word	0x200000b0
 800255c:	20000140 	.word	0x20000140
 8002560:	200000aa 	.word	0x200000aa
 8002564:	20000148 	.word	0x20000148
 8002568:	40011000 	.word	0x40011000
 800256c:	43e10000 	.word	0x43e10000
 8002570:	40000800 	.word	0x40000800
 8002574:	40010800 	.word	0x40010800
 8002578:	41a00000 	.word	0x41a00000

0800257c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002580:	b672      	cpsid	i
}
 8002582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002584:	e7fe      	b.n	8002584 <Error_Handler+0x8>
	...

08002588 <PCA9685_SetBit>:
#include "math.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af04      	add	r7, sp, #16
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
 8002592:	460b      	mov	r3, r1
 8002594:	71bb      	strb	r3, [r7, #6]
 8002596:	4613      	mov	r3, r2
 8002598:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 800259a:	797b      	ldrb	r3, [r7, #5]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <PCA9685_SetBit+0x1c>
 80025a0:	2301      	movs	r3, #1
 80025a2:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 80025a4:	4b24      	ldr	r3, [pc, #144]	; (8002638 <PCA9685_SetBit+0xb0>)
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	230a      	movs	r3, #10
 80025ae:	9302      	str	r3, [sp, #8]
 80025b0:	2301      	movs	r3, #1
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	f107 030f 	add.w	r3, r7, #15
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	2301      	movs	r3, #1
 80025bc:	2180      	movs	r1, #128	; 0x80
 80025be:	f002 f955 	bl	800486c <HAL_I2C_Mem_Read>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e031      	b.n	8002630 <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 80025cc:	79bb      	ldrb	r3, [r7, #6]
 80025ce:	2201      	movs	r2, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	b25b      	sxtb	r3, r3
 80025d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025da:	b25b      	sxtb	r3, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	b25a      	sxtb	r2, r3
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	b25b      	sxtb	r3, r3
 80025e4:	4013      	ands	r3, r2
 80025e6:	b25b      	sxtb	r3, r3
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 80025ec:	797b      	ldrb	r3, [r7, #5]
 80025ee:	f003 0201 	and.w	r2, r3, #1
 80025f2:	79bb      	ldrb	r3, [r7, #6]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	b25a      	sxtb	r2, r3
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	b25b      	sxtb	r3, r3
 80025fe:	4313      	orrs	r3, r2
 8002600:	b25b      	sxtb	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8002606:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <PCA9685_SetBit+0xb0>)
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	b29a      	uxth	r2, r3
 800260e:	230a      	movs	r3, #10
 8002610:	9302      	str	r3, [sp, #8]
 8002612:	2301      	movs	r3, #1
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	f107 030f 	add.w	r3, r7, #15
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	2301      	movs	r3, #1
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	f002 f82a 	bl	8004678 <HAL_I2C_Mem_Write>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000180 	.word	0x20000180

0800263c <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 8002642:	2306      	movs	r3, #6
 8002644:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <PCA9685_SoftwareReset+0x30>)
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	1dfa      	adds	r2, r7, #7
 800264c:	230a      	movs	r3, #10
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	2301      	movs	r3, #1
 8002652:	2100      	movs	r1, #0
 8002654:	f001 ff12 	bl	800447c <HAL_I2C_Master_Transmit>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	e000      	b.n	8002664 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 8002662:	2301      	movs	r3, #1
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000180 	.word	0x20000180

08002670 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	461a      	mov	r2, r3
 800267e:	2104      	movs	r1, #4
 8002680:	2000      	movs	r0, #0
 8002682:	f7ff ff81 	bl	8002588 <PCA9685_SetBit>
 8002686:	4603      	mov	r3, r0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	461a      	mov	r2, r3
 800269e:	2107      	movs	r1, #7
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7ff ff71 	bl	8002588 <PCA9685_SetBit>
 80026a6:	4603      	mov	r3, r0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	461a      	mov	r2, r3
 80026be:	2105      	movs	r1, #5
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7ff ff61 	bl	8002588 <PCA9685_SetBit>
 80026c6:	4603      	mov	r3, r0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af04      	add	r7, sp, #16
 80026d6:	4603      	mov	r3, r0
 80026d8:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	f240 52f5 	movw	r2, #1525	; 0x5f5
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d902      	bls.n	80026ea <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 80026e4:	2303      	movs	r3, #3
 80026e6:	72fb      	strb	r3, [r7, #11]
 80026e8:	e041      	b.n	800276e <PCA9685_SetPwmFrequency+0x9e>
	}
	else if(Frequency <= 24)
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	2b18      	cmp	r3, #24
 80026ee:	d802      	bhi.n	80026f6 <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 80026f0:	23ff      	movs	r3, #255	; 0xff
 80026f2:	72fb      	strb	r3, [r7, #11]
 80026f4:	e03b      	b.n	800276e <PCA9685_SetPwmFrequency+0x9e>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fe faa5 	bl	8000c48 <__aeabi_ui2f>
 80026fe:	4603      	mov	r3, r0
 8002700:	4618      	mov	r0, r3
 8002702:	f7fd fe89 	bl	8000418 <__aeabi_f2d>
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <PCA9685_SetPwmFrequency+0xe0>)
 800270c:	f7fd fedc 	bl	80004c8 <__aeabi_dmul>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	a124      	add	r1, pc, #144	; (adr r1, 80027a8 <PCA9685_SetPwmFrequency+0xd8>)
 8002716:	e9d1 0100 	ldrd	r0, r1, [r1]
 800271a:	f7fd ffff 	bl	800071c <__aeabi_ddiv>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <PCA9685_SetPwmFrequency+0xe4>)
 800272c:	f7fd fd14 	bl	8000158 <__aeabi_dsub>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	f7fe f980 	bl	8000a3c <__aeabi_d2f>
 800273c:	4603      	mov	r3, r0
 800273e:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f7fd fe69 	bl	8000418 <__aeabi_f2d>
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <PCA9685_SetPwmFrequency+0xe8>)
 800274c:	f7fd fd06 	bl	800015c <__adddf3>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	f004 fa5e 	bl	8006c18 <floor>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	f7fe f94a 	bl	80009fc <__aeabi_d2uiz>
 8002768:	4603      	mov	r3, r0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 800276e:	2001      	movs	r0, #1
 8002770:	f7ff ff7e 	bl	8002670 <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <PCA9685_SetPwmFrequency+0xec>)
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	230a      	movs	r3, #10
 800277a:	9302      	str	r3, [sp, #8]
 800277c:	2301      	movs	r3, #1
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	f107 030b 	add.w	r3, r7, #11
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	2301      	movs	r3, #1
 8002788:	22fe      	movs	r2, #254	; 0xfe
 800278a:	2180      	movs	r1, #128	; 0x80
 800278c:	f001 ff74 	bl	8004678 <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 8002790:	2000      	movs	r0, #0
 8002792:	f7ff ff6d 	bl	8002670 <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8002796:	2001      	movs	r0, #1
 8002798:	f7ff ff7a 	bl	8002690 <PCA9685_RestartMode>
	return PCA9685_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	00000000 	.word	0x00000000
 80027ac:	4177d784 	.word	0x4177d784
 80027b0:	40b00000 	.word	0x40b00000
 80027b4:	3ff00000 	.word	0x3ff00000
 80027b8:	3fe00000 	.word	0x3fe00000
 80027bc:	20000180 	.word	0x20000180

080027c0 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af04      	add	r7, sp, #16
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
 80027ca:	460b      	mov	r3, r1
 80027cc:	80bb      	strh	r3, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	3306      	adds	r3, #6
 80027da:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 80027dc:	88bb      	ldrh	r3, [r7, #4]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 80027e2:	88bb      	ldrh	r3, [r7, #4]
 80027e4:	0a1b      	lsrs	r3, r3, #8
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 80027ec:	887b      	ldrh	r3, [r7, #2]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 80027f2:	887b      	ldrh	r3, [r7, #2]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 80027fc:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <PCA9685_SetPwm+0x70>)
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	7bfb      	ldrb	r3, [r7, #15]
 8002802:	b29a      	uxth	r2, r3
 8002804:	230a      	movs	r3, #10
 8002806:	9302      	str	r3, [sp, #8]
 8002808:	2304      	movs	r3, #4
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	f107 0308 	add.w	r3, r7, #8
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2301      	movs	r3, #1
 8002814:	2180      	movs	r1, #128	; 0x80
 8002816:	f001 ff2f 	bl	8004678 <HAL_I2C_Mem_Write>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000180 	.word	0x20000180

08002834 <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
 800283e:	460b      	mov	r3, r1
 8002840:	80bb      	strh	r3, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 8002846:	88bb      	ldrh	r3, [r7, #4]
 8002848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284c:	d302      	bcc.n	8002854 <PCA9685_SetPin+0x20>
 800284e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002852:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 8002854:	79bb      	ldrb	r3, [r7, #6]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d025      	beq.n	80028a6 <PCA9685_SetPin+0x72>
    if (Value == 0) {
 800285a:	88bb      	ldrh	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d108      	bne.n	8002872 <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	2200      	movs	r2, #0
 8002864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ffa9 	bl	80027c0 <PCA9685_SetPwm>
 800286e:	4603      	mov	r3, r0
 8002870:	e03a      	b.n	80028e8 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 8002872:	88bb      	ldrh	r3, [r7, #4]
 8002874:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002878:	4293      	cmp	r3, r2
 800287a:	d108      	bne.n	800288e <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff9b 	bl	80027c0 <PCA9685_SetPwm>
 800288a:	4603      	mov	r3, r0
 800288c:	e02c      	b.n	80028e8 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 800288e:	88bb      	ldrh	r3, [r7, #4]
 8002890:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8002894:	330f      	adds	r3, #15
 8002896:	b29a      	uxth	r2, r3
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff8f 	bl	80027c0 <PCA9685_SetPwm>
 80028a2:	4603      	mov	r3, r0
 80028a4:	e020      	b.n	80028e8 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 80028a6:	88bb      	ldrh	r3, [r7, #4]
 80028a8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d108      	bne.n	80028c2 <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff81 	bl	80027c0 <PCA9685_SetPwm>
 80028be:	4603      	mov	r3, r0
 80028c0:	e012      	b.n	80028e8 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 80028c2:	88bb      	ldrh	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d108      	bne.n	80028da <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028ce:	2100      	movs	r1, #0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff75 	bl	80027c0 <PCA9685_SetPwm>
 80028d6:	4603      	mov	r3, r0
 80028d8:	e006      	b.n	80028e8 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 80028da:	88ba      	ldrh	r2, [r7, #4]
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff6d 	bl	80027c0 <PCA9685_SetPwm>
 80028e6:	4603      	mov	r3, r0
    }
  }
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	6039      	str	r1, [r7, #0]
 80028fa:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 80028fc:	f04f 0100 	mov.w	r1, #0
 8002900:	6838      	ldr	r0, [r7, #0]
 8002902:	f7fe fb97 	bl	8001034 <__aeabi_fcmplt>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <PCA9685_SetServoAngle+0x22>
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 8002912:	491f      	ldr	r1, [pc, #124]	; (8002990 <PCA9685_SetServoAngle+0xa0>)
 8002914:	6838      	ldr	r0, [r7, #0]
 8002916:	f7fe fbab 	bl	8001070 <__aeabi_fcmpgt>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <PCA9685_SetServoAngle+0x34>
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <PCA9685_SetServoAngle+0xa0>)
 8002922:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 8002924:	6838      	ldr	r0, [r7, #0]
 8002926:	f7fd fd77 	bl	8000418 <__aeabi_f2d>
 800292a:	a317      	add	r3, pc, #92	; (adr r3, 8002988 <PCA9685_SetServoAngle+0x98>)
 800292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002930:	f7fd fdca 	bl	80004c8 <__aeabi_dmul>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4610      	mov	r0, r2
 800293a:	4619      	mov	r1, r3
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	4b14      	ldr	r3, [pc, #80]	; (8002994 <PCA9685_SetServoAngle+0xa4>)
 8002942:	f7fd feeb 	bl	800071c <__aeabi_ddiv>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4610      	mov	r0, r2
 800294c:	4619      	mov	r1, r3
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	4b11      	ldr	r3, [pc, #68]	; (8002998 <PCA9685_SetServoAngle+0xa8>)
 8002954:	f7fd fc02 	bl	800015c <__adddf3>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4610      	mov	r0, r2
 800295e:	4619      	mov	r1, r3
 8002960:	f7fe f86c 	bl	8000a3c <__aeabi_d2f>
 8002964:	4603      	mov	r3, r0
 8002966:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f7fe fb8b 	bl	8001084 <__aeabi_f2uiz>
 800296e:	4603      	mov	r3, r0
 8002970:	b299      	uxth	r1, r3
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	2200      	movs	r2, #0
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff ff5c 	bl	8002834 <PCA9685_SetPin>
 800297c:	4603      	mov	r3, r0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	00000000 	.word	0x00000000
 800298c:	40786000 	.word	0x40786000
 8002990:	43340000 	.word	0x43340000
 8002994:	40668000 	.word	0x40668000
 8002998:	405b8000 	.word	0x405b8000

0800299c <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 80029a4:	4a07      	ldr	r2, [pc, #28]	; (80029c4 <PCA9685_Init+0x28>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 80029aa:	f7ff fe47 	bl	800263c <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 80029ae:	2030      	movs	r0, #48	; 0x30
 80029b0:	f7ff fe8e 	bl	80026d0 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 80029b4:	2001      	movs	r0, #1
 80029b6:	f7ff fe7b 	bl	80026b0 <PCA9685_AutoIncrement>

	return PCA9685_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000180 	.word	0x20000180

080029c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <HAL_MspInit+0x5c>)
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	4a14      	ldr	r2, [pc, #80]	; (8002a24 <HAL_MspInit+0x5c>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6193      	str	r3, [r2, #24]
 80029da:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_MspInit+0x5c>)
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e6:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <HAL_MspInit+0x5c>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4a0e      	ldr	r2, [pc, #56]	; (8002a24 <HAL_MspInit+0x5c>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f0:	61d3      	str	r3, [r2, #28]
 80029f2:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <HAL_MspInit+0x5c>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fa:	607b      	str	r3, [r7, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029fe:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <HAL_MspInit+0x60>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <HAL_MspInit+0x60>)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40010000 	.word	0x40010000

08002a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a30:	e7fe      	b.n	8002a30 <NMI_Handler+0x4>

08002a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a36:	e7fe      	b.n	8002a36 <HardFault_Handler+0x4>

08002a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a3c:	e7fe      	b.n	8002a3c <MemManage_Handler+0x4>

08002a3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a42:	e7fe      	b.n	8002a42 <BusFault_Handler+0x4>

08002a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a48:	e7fe      	b.n	8002a48 <UsageFault_Handler+0x4>

08002a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr

08002a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a62:	b480      	push	{r7}
 8002a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr

08002a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a72:	f000 fb2b 	bl	80030cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(En3_C2_Pin);
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f001 fba0 	bl	80041c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(En1_C1_Pin);
 8002a8c:	2008      	movs	r0, #8
 8002a8e:	f001 fb99 	bl	80041c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(En1_C2_Pin);
 8002a9a:	2010      	movs	r0, #16
 8002a9c:	f001 fb92 	bl	80041c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002aa0:	bf00      	nop
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002aa8:	4802      	ldr	r0, [pc, #8]	; (8002ab4 <CAN1_RX1_IRQHandler+0x10>)
 8002aaa:	f000 fe8d 	bl	80037c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	2000002c 	.word	0x2000002c

08002ab8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(En2_C1_Pin);
 8002abc:	2020      	movs	r0, #32
 8002abe:	f001 fb81 	bl	80041c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(En2_C2_Pin);
 8002ac2:	2040      	movs	r0, #64	; 0x40
 8002ac4:	f001 fb7e 	bl	80041c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(En3_C1_Pin);
 8002ac8:	2080      	movs	r0, #128	; 0x80
 8002aca:	f001 fb7b 	bl	80041c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ad8:	4802      	ldr	r0, [pc, #8]	; (8002ae4 <TIM2_IRQHandler+0x10>)
 8002ada:	f003 faad 	bl	8006038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	200001cc 	.word	0x200001cc

08002ae8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002afa:	f107 0308 	add.w	r3, r7, #8
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b08:	463b      	mov	r3, r7
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b10:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <MX_TIM1_Init+0x98>)
 8002b12:	4a1f      	ldr	r2, [pc, #124]	; (8002b90 <MX_TIM1_Init+0x9c>)
 8002b14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 8002b16:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <MX_TIM1_Init+0x98>)
 8002b18:	220a      	movs	r2, #10
 8002b1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <MX_TIM1_Init+0x98>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002b22:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <MX_TIM1_Init+0x98>)
 8002b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b2a:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <MX_TIM1_Init+0x98>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b30:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <MX_TIM1_Init+0x98>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b36:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <MX_TIM1_Init+0x98>)
 8002b38:	2280      	movs	r2, #128	; 0x80
 8002b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b3c:	4813      	ldr	r0, [pc, #76]	; (8002b8c <MX_TIM1_Init+0x98>)
 8002b3e:	f003 f8df 	bl	8005d00 <HAL_TIM_Base_Init>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002b48:	f7ff fd18 	bl	800257c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b52:	f107 0308 	add.w	r3, r7, #8
 8002b56:	4619      	mov	r1, r3
 8002b58:	480c      	ldr	r0, [pc, #48]	; (8002b8c <MX_TIM1_Init+0x98>)
 8002b5a:	f003 fc33 	bl	80063c4 <HAL_TIM_ConfigClockSource>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002b64:	f7ff fd0a 	bl	800257c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b70:	463b      	mov	r3, r7
 8002b72:	4619      	mov	r1, r3
 8002b74:	4805      	ldr	r0, [pc, #20]	; (8002b8c <MX_TIM1_Init+0x98>)
 8002b76:	f003 ffb1 	bl	8006adc <HAL_TIMEx_MasterConfigSynchronization>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002b80:	f7ff fcfc 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002b84:	bf00      	nop
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20000184 	.word	0x20000184
 8002b90:	40012c00 	.word	0x40012c00

08002b94 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b9a:	f107 0308 	add.w	r3, r7, #8
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	605a      	str	r2, [r3, #4]
 8002ba4:	609a      	str	r2, [r3, #8]
 8002ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ba8:	463b      	mov	r3, r7
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bb0:	4b1e      	ldr	r3, [pc, #120]	; (8002c2c <MX_TIM2_Init+0x98>)
 8002bb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 8002bb8:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <MX_TIM2_Init+0x98>)
 8002bba:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002bbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <MX_TIM2_Init+0x98>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002bc6:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <MX_TIM2_Init+0x98>)
 8002bc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bcc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bce:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <MX_TIM2_Init+0x98>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bd4:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <MX_TIM2_Init+0x98>)
 8002bd6:	2280      	movs	r2, #128	; 0x80
 8002bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bda:	4814      	ldr	r0, [pc, #80]	; (8002c2c <MX_TIM2_Init+0x98>)
 8002bdc:	f003 f890 	bl	8005d00 <HAL_TIM_Base_Init>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002be6:	f7ff fcc9 	bl	800257c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bf0:	f107 0308 	add.w	r3, r7, #8
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	480d      	ldr	r0, [pc, #52]	; (8002c2c <MX_TIM2_Init+0x98>)
 8002bf8:	f003 fbe4 	bl	80063c4 <HAL_TIM_ConfigClockSource>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002c02:	f7ff fcbb 	bl	800257c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c0e:	463b      	mov	r3, r7
 8002c10:	4619      	mov	r1, r3
 8002c12:	4806      	ldr	r0, [pc, #24]	; (8002c2c <MX_TIM2_Init+0x98>)
 8002c14:	f003 ff62 	bl	8006adc <HAL_TIMEx_MasterConfigSynchronization>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002c1e:	f7ff fcad 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c22:	bf00      	nop
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200001cc 	.word	0x200001cc

08002c30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08e      	sub	sp, #56	; 0x38
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	605a      	str	r2, [r3, #4]
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c44:	f107 0320 	add.w	r3, r7, #32
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	611a      	str	r2, [r3, #16]
 8002c5c:	615a      	str	r2, [r3, #20]
 8002c5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c60:	4b32      	ldr	r3, [pc, #200]	; (8002d2c <MX_TIM3_Init+0xfc>)
 8002c62:	4a33      	ldr	r2, [pc, #204]	; (8002d30 <MX_TIM3_Init+0x100>)
 8002c64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1439;
 8002c66:	4b31      	ldr	r3, [pc, #196]	; (8002d2c <MX_TIM3_Init+0xfc>)
 8002c68:	f240 529f 	movw	r2, #1439	; 0x59f
 8002c6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6e:	4b2f      	ldr	r3, [pc, #188]	; (8002d2c <MX_TIM3_Init+0xfc>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002c74:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <MX_TIM3_Init+0xfc>)
 8002c76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7c:	4b2b      	ldr	r3, [pc, #172]	; (8002d2c <MX_TIM3_Init+0xfc>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c82:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <MX_TIM3_Init+0xfc>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c88:	4828      	ldr	r0, [pc, #160]	; (8002d2c <MX_TIM3_Init+0xfc>)
 8002c8a:	f003 f839 	bl	8005d00 <HAL_TIM_Base_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002c94:	f7ff fc72 	bl	800257c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4821      	ldr	r0, [pc, #132]	; (8002d2c <MX_TIM3_Init+0xfc>)
 8002ca6:	f003 fb8d 	bl	80063c4 <HAL_TIM_ConfigClockSource>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002cb0:	f7ff fc64 	bl	800257c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002cb4:	481d      	ldr	r0, [pc, #116]	; (8002d2c <MX_TIM3_Init+0xfc>)
 8002cb6:	f003 f8c5 	bl	8005e44 <HAL_TIM_PWM_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002cc0:	f7ff fc5c 	bl	800257c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ccc:	f107 0320 	add.w	r3, r7, #32
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4816      	ldr	r0, [pc, #88]	; (8002d2c <MX_TIM3_Init+0xfc>)
 8002cd4:	f003 ff02 	bl	8006adc <HAL_TIMEx_MasterConfigSynchronization>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002cde:	f7ff fc4d 	bl	800257c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ce2:	2360      	movs	r3, #96	; 0x60
 8002ce4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	480c      	ldr	r0, [pc, #48]	; (8002d2c <MX_TIM3_Init+0xfc>)
 8002cfa:	f003 faa5 	bl	8006248 <HAL_TIM_PWM_ConfigChannel>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002d04:	f7ff fc3a 	bl	800257c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d08:	1d3b      	adds	r3, r7, #4
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4807      	ldr	r0, [pc, #28]	; (8002d2c <MX_TIM3_Init+0xfc>)
 8002d10:	f003 fa9a 	bl	8006248 <HAL_TIM_PWM_ConfigChannel>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002d1a:	f7ff fc2f 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d1e:	4803      	ldr	r0, [pc, #12]	; (8002d2c <MX_TIM3_Init+0xfc>)
 8002d20:	f000 f900 	bl	8002f24 <HAL_TIM_MspPostInit>

}
 8002d24:	bf00      	nop
 8002d26:	3738      	adds	r7, #56	; 0x38
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20000214 	.word	0x20000214
 8002d30:	40000400 	.word	0x40000400

08002d34 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08e      	sub	sp, #56	; 0x38
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	609a      	str	r2, [r3, #8]
 8002d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d48:	f107 0320 	add.w	r3, r7, #32
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d52:	1d3b      	adds	r3, r7, #4
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]
 8002d60:	615a      	str	r2, [r3, #20]
 8002d62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d64:	4b3d      	ldr	r3, [pc, #244]	; (8002e5c <MX_TIM4_Init+0x128>)
 8002d66:	4a3e      	ldr	r2, [pc, #248]	; (8002e60 <MX_TIM4_Init+0x12c>)
 8002d68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 8002d6a:	4b3c      	ldr	r3, [pc, #240]	; (8002e5c <MX_TIM4_Init+0x128>)
 8002d6c:	220a      	movs	r2, #10
 8002d6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d70:	4b3a      	ldr	r3, [pc, #232]	; (8002e5c <MX_TIM4_Init+0x128>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8002d76:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <MX_TIM4_Init+0x128>)
 8002d78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d7e:	4b37      	ldr	r3, [pc, #220]	; (8002e5c <MX_TIM4_Init+0x128>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d84:	4b35      	ldr	r3, [pc, #212]	; (8002e5c <MX_TIM4_Init+0x128>)
 8002d86:	2280      	movs	r2, #128	; 0x80
 8002d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d8a:	4834      	ldr	r0, [pc, #208]	; (8002e5c <MX_TIM4_Init+0x128>)
 8002d8c:	f002 ffb8 	bl	8005d00 <HAL_TIM_Base_Init>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002d96:	f7ff fbf1 	bl	800257c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002da0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002da4:	4619      	mov	r1, r3
 8002da6:	482d      	ldr	r0, [pc, #180]	; (8002e5c <MX_TIM4_Init+0x128>)
 8002da8:	f003 fb0c 	bl	80063c4 <HAL_TIM_ConfigClockSource>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002db2:	f7ff fbe3 	bl	800257c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002db6:	4829      	ldr	r0, [pc, #164]	; (8002e5c <MX_TIM4_Init+0x128>)
 8002db8:	f003 f844 	bl	8005e44 <HAL_TIM_PWM_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002dc2:	f7ff fbdb 	bl	800257c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002dce:	f107 0320 	add.w	r3, r7, #32
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4821      	ldr	r0, [pc, #132]	; (8002e5c <MX_TIM4_Init+0x128>)
 8002dd6:	f003 fe81 	bl	8006adc <HAL_TIMEx_MasterConfigSynchronization>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002de0:	f7ff fbcc 	bl	800257c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002de4:	2360      	movs	r3, #96	; 0x60
 8002de6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002df4:	1d3b      	adds	r3, r7, #4
 8002df6:	2200      	movs	r2, #0
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4818      	ldr	r0, [pc, #96]	; (8002e5c <MX_TIM4_Init+0x128>)
 8002dfc:	f003 fa24 	bl	8006248 <HAL_TIM_PWM_ConfigChannel>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002e06:	f7ff fbb9 	bl	800257c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e0a:	1d3b      	adds	r3, r7, #4
 8002e0c:	2204      	movs	r2, #4
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4812      	ldr	r0, [pc, #72]	; (8002e5c <MX_TIM4_Init+0x128>)
 8002e12:	f003 fa19 	bl	8006248 <HAL_TIM_PWM_ConfigChannel>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002e1c:	f7ff fbae 	bl	800257c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	2208      	movs	r2, #8
 8002e24:	4619      	mov	r1, r3
 8002e26:	480d      	ldr	r0, [pc, #52]	; (8002e5c <MX_TIM4_Init+0x128>)
 8002e28:	f003 fa0e 	bl	8006248 <HAL_TIM_PWM_ConfigChannel>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8002e32:	f7ff fba3 	bl	800257c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e36:	1d3b      	adds	r3, r7, #4
 8002e38:	220c      	movs	r2, #12
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4807      	ldr	r0, [pc, #28]	; (8002e5c <MX_TIM4_Init+0x128>)
 8002e3e:	f003 fa03 	bl	8006248 <HAL_TIM_PWM_ConfigChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8002e48:	f7ff fb98 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002e4c:	4803      	ldr	r0, [pc, #12]	; (8002e5c <MX_TIM4_Init+0x128>)
 8002e4e:	f000 f869 	bl	8002f24 <HAL_TIM_MspPostInit>

}
 8002e52:	bf00      	nop
 8002e54:	3738      	adds	r7, #56	; 0x38
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	2000025c 	.word	0x2000025c
 8002e60:	40000800 	.word	0x40000800

08002e64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a28      	ldr	r2, [pc, #160]	; (8002f14 <HAL_TIM_Base_MspInit+0xb0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d10c      	bne.n	8002e90 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e76:	4b28      	ldr	r3, [pc, #160]	; (8002f18 <HAL_TIM_Base_MspInit+0xb4>)
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	4a27      	ldr	r2, [pc, #156]	; (8002f18 <HAL_TIM_Base_MspInit+0xb4>)
 8002e7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e80:	6193      	str	r3, [r2, #24]
 8002e82:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <HAL_TIM_Base_MspInit+0xb4>)
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002e8e:	e03c      	b.n	8002f0a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e98:	d114      	bne.n	8002ec4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e9a:	4b1f      	ldr	r3, [pc, #124]	; (8002f18 <HAL_TIM_Base_MspInit+0xb4>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	4a1e      	ldr	r2, [pc, #120]	; (8002f18 <HAL_TIM_Base_MspInit+0xb4>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	61d3      	str	r3, [r2, #28]
 8002ea6:	4b1c      	ldr	r3, [pc, #112]	; (8002f18 <HAL_TIM_Base_MspInit+0xb4>)
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	613b      	str	r3, [r7, #16]
 8002eb0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	201c      	movs	r0, #28
 8002eb8:	f000 ff81 	bl	8003dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ebc:	201c      	movs	r0, #28
 8002ebe:	f000 ff9a 	bl	8003df6 <HAL_NVIC_EnableIRQ>
}
 8002ec2:	e022      	b.n	8002f0a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a14      	ldr	r2, [pc, #80]	; (8002f1c <HAL_TIM_Base_MspInit+0xb8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ece:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <HAL_TIM_Base_MspInit+0xb4>)
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	4a11      	ldr	r2, [pc, #68]	; (8002f18 <HAL_TIM_Base_MspInit+0xb4>)
 8002ed4:	f043 0302 	orr.w	r3, r3, #2
 8002ed8:	61d3      	str	r3, [r2, #28]
 8002eda:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <HAL_TIM_Base_MspInit+0xb4>)
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
}
 8002ee6:	e010      	b.n	8002f0a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM4)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a0c      	ldr	r2, [pc, #48]	; (8002f20 <HAL_TIM_Base_MspInit+0xbc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d10b      	bne.n	8002f0a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ef2:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <HAL_TIM_Base_MspInit+0xb4>)
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	4a08      	ldr	r2, [pc, #32]	; (8002f18 <HAL_TIM_Base_MspInit+0xb4>)
 8002ef8:	f043 0304 	orr.w	r3, r3, #4
 8002efc:	61d3      	str	r3, [r2, #28]
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_TIM_Base_MspInit+0xb4>)
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	68bb      	ldr	r3, [r7, #8]
}
 8002f0a:	bf00      	nop
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40012c00 	.word	0x40012c00
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40000400 	.word	0x40000400
 8002f20:	40000800 	.word	0x40000800

08002f24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	; 0x28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a28      	ldr	r2, [pc, #160]	; (8002fe0 <HAL_TIM_MspPostInit+0xbc>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d12a      	bne.n	8002f9a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f44:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <HAL_TIM_MspPostInit+0xc0>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	4a26      	ldr	r2, [pc, #152]	; (8002fe4 <HAL_TIM_MspPostInit+0xc0>)
 8002f4a:	f043 0308 	orr.w	r3, r3, #8
 8002f4e:	6193      	str	r3, [r2, #24]
 8002f50:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <HAL_TIM_MspPostInit+0xc0>)
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002f5c:	2330      	movs	r3, #48	; 0x30
 8002f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f60:	2302      	movs	r3, #2
 8002f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f64:	2302      	movs	r3, #2
 8002f66:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f68:	f107 0314 	add.w	r3, r7, #20
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	481e      	ldr	r0, [pc, #120]	; (8002fe8 <HAL_TIM_MspPostInit+0xc4>)
 8002f70:	f000 ff5c 	bl	8003e2c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002f74:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <HAL_TIM_MspPostInit+0xc8>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
 8002f92:	4a16      	ldr	r2, [pc, #88]	; (8002fec <HAL_TIM_MspPostInit+0xc8>)
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002f98:	e01d      	b.n	8002fd6 <HAL_TIM_MspPostInit+0xb2>
  else if(timHandle->Instance==TIM4)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a14      	ldr	r2, [pc, #80]	; (8002ff0 <HAL_TIM_MspPostInit+0xcc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d118      	bne.n	8002fd6 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <HAL_TIM_MspPostInit+0xc0>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	4a0e      	ldr	r2, [pc, #56]	; (8002fe4 <HAL_TIM_MspPostInit+0xc0>)
 8002faa:	f043 0308 	orr.w	r3, r3, #8
 8002fae:	6193      	str	r3, [r2, #24]
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <HAL_TIM_MspPostInit+0xc0>)
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002fbc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fca:	f107 0314 	add.w	r3, r7, #20
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4805      	ldr	r0, [pc, #20]	; (8002fe8 <HAL_TIM_MspPostInit+0xc4>)
 8002fd2:	f000 ff2b 	bl	8003e2c <HAL_GPIO_Init>
}
 8002fd6:	bf00      	nop
 8002fd8:	3728      	adds	r7, #40	; 0x28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40000400 	.word	0x40000400
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40010c00 	.word	0x40010c00
 8002fec:	40010000 	.word	0x40010000
 8002ff0:	40000800 	.word	0x40000800

08002ff4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ff4:	480c      	ldr	r0, [pc, #48]	; (8003028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ff6:	490d      	ldr	r1, [pc, #52]	; (800302c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	; (8003030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ffc:	e002      	b.n	8003004 <LoopCopyDataInit>

08002ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003002:	3304      	adds	r3, #4

08003004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003008:	d3f9      	bcc.n	8002ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800300a:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800300c:	4c0a      	ldr	r4, [pc, #40]	; (8003038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800300e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003010:	e001      	b.n	8003016 <LoopFillZerobss>

08003012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003014:	3204      	adds	r2, #4

08003016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003018:	d3fb      	bcc.n	8003012 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800301a:	f7ff fd65 	bl	8002ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800301e:	f003 fdcd 	bl	8006bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003022:	f7ff f81b 	bl	800205c <main>
  bx lr
 8003026:	4770      	bx	lr
  ldr r0, =_sdata
 8003028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800302c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003030:	08006df0 	.word	0x08006df0
  ldr r2, =_sbss
 8003034:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003038:	200002a8 	.word	0x200002a8

0800303c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800303c:	e7fe      	b.n	800303c <ADC1_2_IRQHandler>
	...

08003040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003044:	4b08      	ldr	r3, [pc, #32]	; (8003068 <HAL_Init+0x28>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a07      	ldr	r2, [pc, #28]	; (8003068 <HAL_Init+0x28>)
 800304a:	f043 0310 	orr.w	r3, r3, #16
 800304e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003050:	2003      	movs	r0, #3
 8003052:	f000 fea9 	bl	8003da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003056:	200f      	movs	r0, #15
 8003058:	f000 f808 	bl	800306c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800305c:	f7ff fcb4 	bl	80029c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40022000 	.word	0x40022000

0800306c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003074:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <HAL_InitTick+0x54>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <HAL_InitTick+0x58>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	4619      	mov	r1, r3
 800307e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003082:	fbb3 f3f1 	udiv	r3, r3, r1
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fec1 	bl	8003e12 <HAL_SYSTICK_Config>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e00e      	b.n	80030b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b0f      	cmp	r3, #15
 800309e:	d80a      	bhi.n	80030b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030a0:	2200      	movs	r2, #0
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030a8:	f000 fe89 	bl	8003dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030ac:	4a06      	ldr	r2, [pc, #24]	; (80030c8 <HAL_InitTick+0x5c>)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	20000004 	.word	0x20000004
 80030c4:	2000000c 	.word	0x2000000c
 80030c8:	20000008 	.word	0x20000008

080030cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_IncTick+0x1c>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	4b05      	ldr	r3, [pc, #20]	; (80030ec <HAL_IncTick+0x20>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4413      	add	r3, r2
 80030dc:	4a03      	ldr	r2, [pc, #12]	; (80030ec <HAL_IncTick+0x20>)
 80030de:	6013      	str	r3, [r2, #0]
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr
 80030e8:	2000000c 	.word	0x2000000c
 80030ec:	200002a4 	.word	0x200002a4

080030f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return uwTick;
 80030f4:	4b02      	ldr	r3, [pc, #8]	; (8003100 <HAL_GetTick+0x10>)
 80030f6:	681b      	ldr	r3, [r3, #0]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr
 8003100:	200002a4 	.word	0x200002a4

08003104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800310c:	f7ff fff0 	bl	80030f0 <HAL_GetTick>
 8003110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800311c:	d005      	beq.n	800312a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800311e:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <HAL_Delay+0x44>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4413      	add	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800312a:	bf00      	nop
 800312c:	f7ff ffe0 	bl	80030f0 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	429a      	cmp	r2, r3
 800313a:	d8f7      	bhi.n	800312c <HAL_Delay+0x28>
  {
  }
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	2000000c 	.word	0x2000000c

0800314c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0ed      	b.n	800333a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d102      	bne.n	8003170 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fe f962 	bl	8001434 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003180:	f7ff ffb6 	bl	80030f0 <HAL_GetTick>
 8003184:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003186:	e012      	b.n	80031ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003188:	f7ff ffb2 	bl	80030f0 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b0a      	cmp	r3, #10
 8003194:	d90b      	bls.n	80031ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2205      	movs	r2, #5
 80031a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e0c5      	b.n	800333a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0e5      	beq.n	8003188 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0202 	bic.w	r2, r2, #2
 80031ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031cc:	f7ff ff90 	bl	80030f0 <HAL_GetTick>
 80031d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031d2:	e012      	b.n	80031fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031d4:	f7ff ff8c 	bl	80030f0 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b0a      	cmp	r3, #10
 80031e0:	d90b      	bls.n	80031fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2205      	movs	r2, #5
 80031f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e09f      	b.n	800333a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e5      	bne.n	80031d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	7e1b      	ldrb	r3, [r3, #24]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d108      	bne.n	8003222 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	e007      	b.n	8003232 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003230:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	7e5b      	ldrb	r3, [r3, #25]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d108      	bne.n	800324c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	e007      	b.n	800325c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800325a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	7e9b      	ldrb	r3, [r3, #26]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d108      	bne.n	8003276 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0220 	orr.w	r2, r2, #32
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	e007      	b.n	8003286 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0220 	bic.w	r2, r2, #32
 8003284:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	7edb      	ldrb	r3, [r3, #27]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d108      	bne.n	80032a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0210 	bic.w	r2, r2, #16
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e007      	b.n	80032b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0210 	orr.w	r2, r2, #16
 80032ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	7f1b      	ldrb	r3, [r3, #28]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d108      	bne.n	80032ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0208 	orr.w	r2, r2, #8
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e007      	b.n	80032da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0208 	bic.w	r2, r2, #8
 80032d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	7f5b      	ldrb	r3, [r3, #29]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d108      	bne.n	80032f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0204 	orr.w	r2, r2, #4
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	e007      	b.n	8003304 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0204 	bic.w	r2, r2, #4
 8003302:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	ea42 0103 	orr.w	r1, r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	1e5a      	subs	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003342:	b480      	push	{r7}
 8003344:	b087      	sub	sp, #28
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003358:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800335a:	7cfb      	ldrb	r3, [r7, #19]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d003      	beq.n	8003368 <HAL_CAN_ConfigFilter+0x26>
 8003360:	7cfb      	ldrb	r3, [r7, #19]
 8003362:	2b02      	cmp	r3, #2
 8003364:	f040 80aa 	bne.w	80034bc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800336e:	f043 0201 	orr.w	r2, r3, #1
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2201      	movs	r2, #1
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	43db      	mvns	r3, r3
 8003392:	401a      	ands	r2, r3
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d123      	bne.n	80033ea <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	401a      	ands	r2, r3
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	3248      	adds	r2, #72	; 0x48
 80033ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033e0:	6979      	ldr	r1, [r7, #20]
 80033e2:	3348      	adds	r3, #72	; 0x48
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	440b      	add	r3, r1
 80033e8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d122      	bne.n	8003438 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	431a      	orrs	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003412:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	3248      	adds	r2, #72	; 0x48
 8003418:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800342c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800342e:	6979      	ldr	r1, [r7, #20]
 8003430:	3348      	adds	r3, #72	; 0x48
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	440b      	add	r3, r1
 8003436:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	43db      	mvns	r3, r3
 800344a:	401a      	ands	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003452:	e007      	b.n	8003464 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	431a      	orrs	r2, r3
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d109      	bne.n	8003480 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	43db      	mvns	r3, r3
 8003476:	401a      	ands	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800347e:	e007      	b.n	8003490 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	431a      	orrs	r2, r3
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d107      	bne.n	80034a8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	431a      	orrs	r2, r3
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034ae:	f023 0201 	bic.w	r2, r3, #1
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	e006      	b.n	80034ca <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
  }
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr

080034d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d12e      	bne.n	8003546 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0201 	bic.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003500:	f7ff fdf6 	bl	80030f0 <HAL_GetTick>
 8003504:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003506:	e012      	b.n	800352e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003508:	f7ff fdf2 	bl	80030f0 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b0a      	cmp	r3, #10
 8003514:	d90b      	bls.n	800352e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2205      	movs	r2, #5
 8003526:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e012      	b.n	8003554 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1e5      	bne.n	8003508 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	e006      	b.n	8003554 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
  }
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003570:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003572:	7dfb      	ldrb	r3, [r7, #23]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d003      	beq.n	8003580 <HAL_CAN_GetRxMessage+0x24>
 8003578:	7dfb      	ldrb	r3, [r7, #23]
 800357a:	2b02      	cmp	r3, #2
 800357c:	f040 80f3 	bne.w	8003766 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10e      	bne.n	80035a4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d116      	bne.n	80035c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0e7      	b.n	8003774 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d107      	bne.n	80035c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e0d8      	b.n	8003774 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	331b      	adds	r3, #27
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	4413      	add	r3, r2
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0204 	and.w	r2, r3, #4
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10c      	bne.n	80035fa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	331b      	adds	r3, #27
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	4413      	add	r3, r2
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	0d5b      	lsrs	r3, r3, #21
 80035f0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	e00b      	b.n	8003612 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	331b      	adds	r3, #27
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	4413      	add	r3, r2
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	08db      	lsrs	r3, r3, #3
 800360a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	331b      	adds	r3, #27
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	4413      	add	r3, r2
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0202 	and.w	r2, r3, #2
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	331b      	adds	r3, #27
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	4413      	add	r3, r2
 8003634:	3304      	adds	r3, #4
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 020f 	and.w	r2, r3, #15
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	331b      	adds	r3, #27
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	4413      	add	r3, r2
 800364c:	3304      	adds	r3, #4
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	b2da      	uxtb	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	331b      	adds	r3, #27
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	4413      	add	r3, r2
 8003664:	3304      	adds	r3, #4
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	0c1b      	lsrs	r3, r3, #16
 800366a:	b29a      	uxth	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	4413      	add	r3, r2
 800367a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	b2da      	uxtb	r2, r3
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	4413      	add	r3, r2
 8003690:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	0a1a      	lsrs	r2, r3, #8
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	3301      	adds	r3, #1
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	0c1a      	lsrs	r2, r3, #16
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	3302      	adds	r3, #2
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	0e1a      	lsrs	r2, r3, #24
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	3303      	adds	r3, #3
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	4413      	add	r3, r2
 80036de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	3304      	adds	r3, #4
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	0a1a      	lsrs	r2, r3, #8
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	3305      	adds	r3, #5
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	4413      	add	r3, r2
 8003710:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	0c1a      	lsrs	r2, r3, #16
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	3306      	adds	r3, #6
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	4413      	add	r3, r2
 800372a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	0e1a      	lsrs	r2, r3, #24
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	3307      	adds	r3, #7
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d108      	bne.n	8003752 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0220 	orr.w	r2, r2, #32
 800374e:	60da      	str	r2, [r3, #12]
 8003750:	e007      	b.n	8003762 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0220 	orr.w	r2, r2, #32
 8003760:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	e006      	b.n	8003774 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
  }
}
 8003774:	4618      	mov	r0, r3
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800377e:	b480      	push	{r7}
 8003780:	b085      	sub	sp, #20
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800378e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d002      	beq.n	800379c <HAL_CAN_ActivateNotification+0x1e>
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d109      	bne.n	80037b0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6959      	ldr	r1, [r3, #20]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e006      	b.n	80037be <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
  }
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr

080037c8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80037d0:	2300      	movs	r3, #0
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d07c      	beq.n	8003908 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d023      	beq.n	8003860 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2201      	movs	r2, #1
 800381e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f983 	bl	8003b36 <HAL_CAN_TxMailbox0CompleteCallback>
 8003830:	e016      	b.n	8003860 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d004      	beq.n	8003846 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
 8003844:	e00c      	b.n	8003860 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d004      	beq.n	800385a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
 8003858:	e002      	b.n	8003860 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f986 	bl	8003b6c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003866:	2b00      	cmp	r3, #0
 8003868:	d024      	beq.n	80038b4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003872:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f962 	bl	8003b48 <HAL_CAN_TxMailbox1CompleteCallback>
 8003884:	e016      	b.n	80038b4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388c:	2b00      	cmp	r3, #0
 800388e:	d004      	beq.n	800389a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
 8003898:	e00c      	b.n	80038b4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d004      	beq.n	80038ae <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
 80038ac:	e002      	b.n	80038b4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f965 	bl	8003b7e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d024      	beq.n	8003908 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f941 	bl	8003b5a <HAL_CAN_TxMailbox2CompleteCallback>
 80038d8:	e016      	b.n	8003908 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d004      	beq.n	80038ee <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
 80038ec:	e00c      	b.n	8003908 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d004      	beq.n	8003902 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003900:	e002      	b.n	8003908 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f944 	bl	8003b90 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00c      	beq.n	800392c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b00      	cmp	r3, #0
 800391a:	d007      	beq.n	800392c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003922:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2210      	movs	r2, #16
 800392a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00b      	beq.n	800394e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d006      	beq.n	800394e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2208      	movs	r2, #8
 8003946:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f933 	bl	8003bb4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d009      	beq.n	800396c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f91b 	bl	8003ba2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00c      	beq.n	8003990 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003986:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2210      	movs	r2, #16
 800398e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00b      	beq.n	80039b2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d006      	beq.n	80039b2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2208      	movs	r2, #8
 80039aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f90a 	bl	8003bc6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d009      	beq.n	80039d0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fd fec8 	bl	8001760 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00b      	beq.n	80039f2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d006      	beq.n	80039f2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2210      	movs	r2, #16
 80039ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f8f3 	bl	8003bd8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00b      	beq.n	8003a14 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d006      	beq.n	8003a14 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2208      	movs	r2, #8
 8003a0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f8eb 	bl	8003bea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d07b      	beq.n	8003b16 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d072      	beq.n	8003b0e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d008      	beq.n	8003a44 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	f043 0302 	orr.w	r3, r3, #2
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	f043 0304 	orr.w	r3, r3, #4
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d043      	beq.n	8003b0e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d03e      	beq.n	8003b0e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a96:	2b60      	cmp	r3, #96	; 0x60
 8003a98:	d02b      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x32a>
 8003a9a:	2b60      	cmp	r3, #96	; 0x60
 8003a9c:	d82e      	bhi.n	8003afc <HAL_CAN_IRQHandler+0x334>
 8003a9e:	2b50      	cmp	r3, #80	; 0x50
 8003aa0:	d022      	beq.n	8003ae8 <HAL_CAN_IRQHandler+0x320>
 8003aa2:	2b50      	cmp	r3, #80	; 0x50
 8003aa4:	d82a      	bhi.n	8003afc <HAL_CAN_IRQHandler+0x334>
 8003aa6:	2b40      	cmp	r3, #64	; 0x40
 8003aa8:	d019      	beq.n	8003ade <HAL_CAN_IRQHandler+0x316>
 8003aaa:	2b40      	cmp	r3, #64	; 0x40
 8003aac:	d826      	bhi.n	8003afc <HAL_CAN_IRQHandler+0x334>
 8003aae:	2b30      	cmp	r3, #48	; 0x30
 8003ab0:	d010      	beq.n	8003ad4 <HAL_CAN_IRQHandler+0x30c>
 8003ab2:	2b30      	cmp	r3, #48	; 0x30
 8003ab4:	d822      	bhi.n	8003afc <HAL_CAN_IRQHandler+0x334>
 8003ab6:	2b10      	cmp	r3, #16
 8003ab8:	d002      	beq.n	8003ac0 <HAL_CAN_IRQHandler+0x2f8>
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	d005      	beq.n	8003aca <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003abe:	e01d      	b.n	8003afc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	f043 0308 	orr.w	r3, r3, #8
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ac8:	e019      	b.n	8003afe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	f043 0310 	orr.w	r3, r3, #16
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ad2:	e014      	b.n	8003afe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	f043 0320 	orr.w	r3, r3, #32
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003adc:	e00f      	b.n	8003afe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ae6:	e00a      	b.n	8003afe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003af0:	e005      	b.n	8003afe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003afa:	e000      	b.n	8003afe <HAL_CAN_IRQHandler+0x336>
            break;
 8003afc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699a      	ldr	r2, [r3, #24]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b0c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2204      	movs	r2, #4
 8003b14:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f867 	bl	8003bfc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003b2e:	bf00      	nop
 8003b30:	3728      	adds	r7, #40	; 0x28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr

08003b48 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr

08003b5a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr

08003b7e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr

08003b90 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr

08003bc6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr

08003bea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr

08003bfc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr
	...

08003c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c20:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <__NVIC_SetPriorityGrouping+0x44>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c42:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <__NVIC_SetPriorityGrouping+0x44>)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	60d3      	str	r3, [r2, #12]
}
 8003c48:	bf00      	nop
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	e000ed00 	.word	0xe000ed00

08003c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c5c:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <__NVIC_GetPriorityGrouping+0x18>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	0a1b      	lsrs	r3, r3, #8
 8003c62:	f003 0307 	and.w	r3, r3, #7
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	db0b      	blt.n	8003c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	f003 021f 	and.w	r2, r3, #31
 8003c8c:	4906      	ldr	r1, [pc, #24]	; (8003ca8 <__NVIC_EnableIRQ+0x34>)
 8003c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	2001      	movs	r0, #1
 8003c96:	fa00 f202 	lsl.w	r2, r0, r2
 8003c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr
 8003ca8:	e000e100 	.word	0xe000e100

08003cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	6039      	str	r1, [r7, #0]
 8003cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	db0a      	blt.n	8003cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	490c      	ldr	r1, [pc, #48]	; (8003cf8 <__NVIC_SetPriority+0x4c>)
 8003cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cca:	0112      	lsls	r2, r2, #4
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	440b      	add	r3, r1
 8003cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cd4:	e00a      	b.n	8003cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	4908      	ldr	r1, [pc, #32]	; (8003cfc <__NVIC_SetPriority+0x50>)
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	3b04      	subs	r3, #4
 8003ce4:	0112      	lsls	r2, r2, #4
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	440b      	add	r3, r1
 8003cea:	761a      	strb	r2, [r3, #24]
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	e000e100 	.word	0xe000e100
 8003cfc:	e000ed00 	.word	0xe000ed00

08003d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b089      	sub	sp, #36	; 0x24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f1c3 0307 	rsb	r3, r3, #7
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	bf28      	it	cs
 8003d1e:	2304      	movcs	r3, #4
 8003d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3304      	adds	r3, #4
 8003d26:	2b06      	cmp	r3, #6
 8003d28:	d902      	bls.n	8003d30 <NVIC_EncodePriority+0x30>
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	3b03      	subs	r3, #3
 8003d2e:	e000      	b.n	8003d32 <NVIC_EncodePriority+0x32>
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43da      	mvns	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	401a      	ands	r2, r3
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d52:	43d9      	mvns	r1, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d58:	4313      	orrs	r3, r2
         );
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3724      	adds	r7, #36	; 0x24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr

08003d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d74:	d301      	bcc.n	8003d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d76:	2301      	movs	r3, #1
 8003d78:	e00f      	b.n	8003d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d7a:	4a0a      	ldr	r2, [pc, #40]	; (8003da4 <SysTick_Config+0x40>)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d82:	210f      	movs	r1, #15
 8003d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d88:	f7ff ff90 	bl	8003cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <SysTick_Config+0x40>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d92:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <SysTick_Config+0x40>)
 8003d94:	2207      	movs	r2, #7
 8003d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	e000e010 	.word	0xe000e010

08003da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff ff2d 	bl	8003c10 <__NVIC_SetPriorityGrouping>
}
 8003db6:	bf00      	nop
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b086      	sub	sp, #24
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	607a      	str	r2, [r7, #4]
 8003dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dd0:	f7ff ff42 	bl	8003c58 <__NVIC_GetPriorityGrouping>
 8003dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	6978      	ldr	r0, [r7, #20]
 8003ddc:	f7ff ff90 	bl	8003d00 <NVIC_EncodePriority>
 8003de0:	4602      	mov	r2, r0
 8003de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff ff5f 	bl	8003cac <__NVIC_SetPriority>
}
 8003dee:	bf00      	nop
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b082      	sub	sp, #8
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff ff35 	bl	8003c74 <__NVIC_EnableIRQ>
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b082      	sub	sp, #8
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff ffa2 	bl	8003d64 <SysTick_Config>
 8003e20:	4603      	mov	r3, r0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b08b      	sub	sp, #44	; 0x2c
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e36:	2300      	movs	r3, #0
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e3e:	e169      	b.n	8004114 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e40:	2201      	movs	r2, #1
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	4013      	ands	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	f040 8158 	bne.w	800410e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	4a9a      	ldr	r2, [pc, #616]	; (80040cc <HAL_GPIO_Init+0x2a0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d05e      	beq.n	8003f26 <HAL_GPIO_Init+0xfa>
 8003e68:	4a98      	ldr	r2, [pc, #608]	; (80040cc <HAL_GPIO_Init+0x2a0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d875      	bhi.n	8003f5a <HAL_GPIO_Init+0x12e>
 8003e6e:	4a98      	ldr	r2, [pc, #608]	; (80040d0 <HAL_GPIO_Init+0x2a4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d058      	beq.n	8003f26 <HAL_GPIO_Init+0xfa>
 8003e74:	4a96      	ldr	r2, [pc, #600]	; (80040d0 <HAL_GPIO_Init+0x2a4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d86f      	bhi.n	8003f5a <HAL_GPIO_Init+0x12e>
 8003e7a:	4a96      	ldr	r2, [pc, #600]	; (80040d4 <HAL_GPIO_Init+0x2a8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d052      	beq.n	8003f26 <HAL_GPIO_Init+0xfa>
 8003e80:	4a94      	ldr	r2, [pc, #592]	; (80040d4 <HAL_GPIO_Init+0x2a8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d869      	bhi.n	8003f5a <HAL_GPIO_Init+0x12e>
 8003e86:	4a94      	ldr	r2, [pc, #592]	; (80040d8 <HAL_GPIO_Init+0x2ac>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d04c      	beq.n	8003f26 <HAL_GPIO_Init+0xfa>
 8003e8c:	4a92      	ldr	r2, [pc, #584]	; (80040d8 <HAL_GPIO_Init+0x2ac>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d863      	bhi.n	8003f5a <HAL_GPIO_Init+0x12e>
 8003e92:	4a92      	ldr	r2, [pc, #584]	; (80040dc <HAL_GPIO_Init+0x2b0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d046      	beq.n	8003f26 <HAL_GPIO_Init+0xfa>
 8003e98:	4a90      	ldr	r2, [pc, #576]	; (80040dc <HAL_GPIO_Init+0x2b0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d85d      	bhi.n	8003f5a <HAL_GPIO_Init+0x12e>
 8003e9e:	2b12      	cmp	r3, #18
 8003ea0:	d82a      	bhi.n	8003ef8 <HAL_GPIO_Init+0xcc>
 8003ea2:	2b12      	cmp	r3, #18
 8003ea4:	d859      	bhi.n	8003f5a <HAL_GPIO_Init+0x12e>
 8003ea6:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <HAL_GPIO_Init+0x80>)
 8003ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eac:	08003f27 	.word	0x08003f27
 8003eb0:	08003f01 	.word	0x08003f01
 8003eb4:	08003f13 	.word	0x08003f13
 8003eb8:	08003f55 	.word	0x08003f55
 8003ebc:	08003f5b 	.word	0x08003f5b
 8003ec0:	08003f5b 	.word	0x08003f5b
 8003ec4:	08003f5b 	.word	0x08003f5b
 8003ec8:	08003f5b 	.word	0x08003f5b
 8003ecc:	08003f5b 	.word	0x08003f5b
 8003ed0:	08003f5b 	.word	0x08003f5b
 8003ed4:	08003f5b 	.word	0x08003f5b
 8003ed8:	08003f5b 	.word	0x08003f5b
 8003edc:	08003f5b 	.word	0x08003f5b
 8003ee0:	08003f5b 	.word	0x08003f5b
 8003ee4:	08003f5b 	.word	0x08003f5b
 8003ee8:	08003f5b 	.word	0x08003f5b
 8003eec:	08003f5b 	.word	0x08003f5b
 8003ef0:	08003f09 	.word	0x08003f09
 8003ef4:	08003f1d 	.word	0x08003f1d
 8003ef8:	4a79      	ldr	r2, [pc, #484]	; (80040e0 <HAL_GPIO_Init+0x2b4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003efe:	e02c      	b.n	8003f5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	623b      	str	r3, [r7, #32]
          break;
 8003f06:	e029      	b.n	8003f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	623b      	str	r3, [r7, #32]
          break;
 8003f10:	e024      	b.n	8003f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	3308      	adds	r3, #8
 8003f18:	623b      	str	r3, [r7, #32]
          break;
 8003f1a:	e01f      	b.n	8003f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	330c      	adds	r3, #12
 8003f22:	623b      	str	r3, [r7, #32]
          break;
 8003f24:	e01a      	b.n	8003f5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d102      	bne.n	8003f34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f2e:	2304      	movs	r3, #4
 8003f30:	623b      	str	r3, [r7, #32]
          break;
 8003f32:	e013      	b.n	8003f5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d105      	bne.n	8003f48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f3c:	2308      	movs	r3, #8
 8003f3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69fa      	ldr	r2, [r7, #28]
 8003f44:	611a      	str	r2, [r3, #16]
          break;
 8003f46:	e009      	b.n	8003f5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f48:	2308      	movs	r3, #8
 8003f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	615a      	str	r2, [r3, #20]
          break;
 8003f52:	e003      	b.n	8003f5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f54:	2300      	movs	r3, #0
 8003f56:	623b      	str	r3, [r7, #32]
          break;
 8003f58:	e000      	b.n	8003f5c <HAL_GPIO_Init+0x130>
          break;
 8003f5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	2bff      	cmp	r3, #255	; 0xff
 8003f60:	d801      	bhi.n	8003f66 <HAL_GPIO_Init+0x13a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	e001      	b.n	8003f6a <HAL_GPIO_Init+0x13e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2bff      	cmp	r3, #255	; 0xff
 8003f70:	d802      	bhi.n	8003f78 <HAL_GPIO_Init+0x14c>
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	e002      	b.n	8003f7e <HAL_GPIO_Init+0x152>
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	3b08      	subs	r3, #8
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	210f      	movs	r1, #15
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	401a      	ands	r2, r3
 8003f90:	6a39      	ldr	r1, [r7, #32]
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	fa01 f303 	lsl.w	r3, r1, r3
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80b1 	beq.w	800410e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003fac:	4b4d      	ldr	r3, [pc, #308]	; (80040e4 <HAL_GPIO_Init+0x2b8>)
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	4a4c      	ldr	r2, [pc, #304]	; (80040e4 <HAL_GPIO_Init+0x2b8>)
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	6193      	str	r3, [r2, #24]
 8003fb8:	4b4a      	ldr	r3, [pc, #296]	; (80040e4 <HAL_GPIO_Init+0x2b8>)
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003fc4:	4a48      	ldr	r2, [pc, #288]	; (80040e8 <HAL_GPIO_Init+0x2bc>)
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	089b      	lsrs	r3, r3, #2
 8003fca:	3302      	adds	r3, #2
 8003fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	220f      	movs	r2, #15
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a40      	ldr	r2, [pc, #256]	; (80040ec <HAL_GPIO_Init+0x2c0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d013      	beq.n	8004018 <HAL_GPIO_Init+0x1ec>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a3f      	ldr	r2, [pc, #252]	; (80040f0 <HAL_GPIO_Init+0x2c4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00d      	beq.n	8004014 <HAL_GPIO_Init+0x1e8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a3e      	ldr	r2, [pc, #248]	; (80040f4 <HAL_GPIO_Init+0x2c8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d007      	beq.n	8004010 <HAL_GPIO_Init+0x1e4>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a3d      	ldr	r2, [pc, #244]	; (80040f8 <HAL_GPIO_Init+0x2cc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d101      	bne.n	800400c <HAL_GPIO_Init+0x1e0>
 8004008:	2303      	movs	r3, #3
 800400a:	e006      	b.n	800401a <HAL_GPIO_Init+0x1ee>
 800400c:	2304      	movs	r3, #4
 800400e:	e004      	b.n	800401a <HAL_GPIO_Init+0x1ee>
 8004010:	2302      	movs	r3, #2
 8004012:	e002      	b.n	800401a <HAL_GPIO_Init+0x1ee>
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <HAL_GPIO_Init+0x1ee>
 8004018:	2300      	movs	r3, #0
 800401a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401c:	f002 0203 	and.w	r2, r2, #3
 8004020:	0092      	lsls	r2, r2, #2
 8004022:	4093      	lsls	r3, r2
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800402a:	492f      	ldr	r1, [pc, #188]	; (80040e8 <HAL_GPIO_Init+0x2bc>)
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	089b      	lsrs	r3, r3, #2
 8004030:	3302      	adds	r3, #2
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d006      	beq.n	8004052 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004044:	4b2d      	ldr	r3, [pc, #180]	; (80040fc <HAL_GPIO_Init+0x2d0>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	492c      	ldr	r1, [pc, #176]	; (80040fc <HAL_GPIO_Init+0x2d0>)
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	4313      	orrs	r3, r2
 800404e:	600b      	str	r3, [r1, #0]
 8004050:	e006      	b.n	8004060 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004052:	4b2a      	ldr	r3, [pc, #168]	; (80040fc <HAL_GPIO_Init+0x2d0>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	43db      	mvns	r3, r3
 800405a:	4928      	ldr	r1, [pc, #160]	; (80040fc <HAL_GPIO_Init+0x2d0>)
 800405c:	4013      	ands	r3, r2
 800405e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d006      	beq.n	800407a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800406c:	4b23      	ldr	r3, [pc, #140]	; (80040fc <HAL_GPIO_Init+0x2d0>)
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	4922      	ldr	r1, [pc, #136]	; (80040fc <HAL_GPIO_Init+0x2d0>)
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	4313      	orrs	r3, r2
 8004076:	604b      	str	r3, [r1, #4]
 8004078:	e006      	b.n	8004088 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800407a:	4b20      	ldr	r3, [pc, #128]	; (80040fc <HAL_GPIO_Init+0x2d0>)
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	43db      	mvns	r3, r3
 8004082:	491e      	ldr	r1, [pc, #120]	; (80040fc <HAL_GPIO_Init+0x2d0>)
 8004084:	4013      	ands	r3, r2
 8004086:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d006      	beq.n	80040a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004094:	4b19      	ldr	r3, [pc, #100]	; (80040fc <HAL_GPIO_Init+0x2d0>)
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	4918      	ldr	r1, [pc, #96]	; (80040fc <HAL_GPIO_Init+0x2d0>)
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	4313      	orrs	r3, r2
 800409e:	608b      	str	r3, [r1, #8]
 80040a0:	e006      	b.n	80040b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80040a2:	4b16      	ldr	r3, [pc, #88]	; (80040fc <HAL_GPIO_Init+0x2d0>)
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	43db      	mvns	r3, r3
 80040aa:	4914      	ldr	r1, [pc, #80]	; (80040fc <HAL_GPIO_Init+0x2d0>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d021      	beq.n	8004100 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80040bc:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <HAL_GPIO_Init+0x2d0>)
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	490e      	ldr	r1, [pc, #56]	; (80040fc <HAL_GPIO_Init+0x2d0>)
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60cb      	str	r3, [r1, #12]
 80040c8:	e021      	b.n	800410e <HAL_GPIO_Init+0x2e2>
 80040ca:	bf00      	nop
 80040cc:	10320000 	.word	0x10320000
 80040d0:	10310000 	.word	0x10310000
 80040d4:	10220000 	.word	0x10220000
 80040d8:	10210000 	.word	0x10210000
 80040dc:	10120000 	.word	0x10120000
 80040e0:	10110000 	.word	0x10110000
 80040e4:	40021000 	.word	0x40021000
 80040e8:	40010000 	.word	0x40010000
 80040ec:	40010800 	.word	0x40010800
 80040f0:	40010c00 	.word	0x40010c00
 80040f4:	40011000 	.word	0x40011000
 80040f8:	40011400 	.word	0x40011400
 80040fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <HAL_GPIO_Init+0x304>)
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	43db      	mvns	r3, r3
 8004108:	4909      	ldr	r1, [pc, #36]	; (8004130 <HAL_GPIO_Init+0x304>)
 800410a:	4013      	ands	r3, r2
 800410c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	3301      	adds	r3, #1
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	fa22 f303 	lsr.w	r3, r2, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	f47f ae8e 	bne.w	8003e40 <HAL_GPIO_Init+0x14>
  }
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop
 8004128:	372c      	adds	r7, #44	; 0x2c
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr
 8004130:	40010400 	.word	0x40010400

08004134 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	887b      	ldrh	r3, [r7, #2]
 8004146:	4013      	ands	r3, r2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
 8004150:	e001      	b.n	8004156 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004152:	2300      	movs	r3, #0
 8004154:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004156:	7bfb      	ldrb	r3, [r7, #15]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr

08004162 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	460b      	mov	r3, r1
 800416c:	807b      	strh	r3, [r7, #2]
 800416e:	4613      	mov	r3, r2
 8004170:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004172:	787b      	ldrb	r3, [r7, #1]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004178:	887a      	ldrh	r2, [r7, #2]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800417e:	e003      	b.n	8004188 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004180:	887b      	ldrh	r3, [r7, #2]
 8004182:	041a      	lsls	r2, r3, #16
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	611a      	str	r2, [r3, #16]
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr

08004192 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004192:	b480      	push	{r7}
 8004194:	b085      	sub	sp, #20
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	460b      	mov	r3, r1
 800419c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041a4:	887a      	ldrh	r2, [r7, #2]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4013      	ands	r3, r2
 80041aa:	041a      	lsls	r2, r3, #16
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	43d9      	mvns	r1, r3
 80041b0:	887b      	ldrh	r3, [r7, #2]
 80041b2:	400b      	ands	r3, r1
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	611a      	str	r2, [r3, #16]
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr

080041c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041ce:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	4013      	ands	r3, r2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d006      	beq.n	80041e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041da:	4a05      	ldr	r2, [pc, #20]	; (80041f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041dc:	88fb      	ldrh	r3, [r7, #6]
 80041de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fe f884 	bl	80022f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80041e8:	bf00      	nop
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40010400 	.word	0x40010400

080041f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e12b      	b.n	800445e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7fd fa34 	bl	8001688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2224      	movs	r2, #36	; 0x24
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0201 	bic.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004246:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004256:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004258:	f001 fd20 	bl	8005c9c <HAL_RCC_GetPCLK1Freq>
 800425c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	4a81      	ldr	r2, [pc, #516]	; (8004468 <HAL_I2C_Init+0x274>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d807      	bhi.n	8004278 <HAL_I2C_Init+0x84>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4a80      	ldr	r2, [pc, #512]	; (800446c <HAL_I2C_Init+0x278>)
 800426c:	4293      	cmp	r3, r2
 800426e:	bf94      	ite	ls
 8004270:	2301      	movls	r3, #1
 8004272:	2300      	movhi	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	e006      	b.n	8004286 <HAL_I2C_Init+0x92>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4a7d      	ldr	r2, [pc, #500]	; (8004470 <HAL_I2C_Init+0x27c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	bf94      	ite	ls
 8004280:	2301      	movls	r3, #1
 8004282:	2300      	movhi	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e0e7      	b.n	800445e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4a78      	ldr	r2, [pc, #480]	; (8004474 <HAL_I2C_Init+0x280>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	0c9b      	lsrs	r3, r3, #18
 8004298:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	4a6a      	ldr	r2, [pc, #424]	; (8004468 <HAL_I2C_Init+0x274>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d802      	bhi.n	80042c8 <HAL_I2C_Init+0xd4>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	3301      	adds	r3, #1
 80042c6:	e009      	b.n	80042dc <HAL_I2C_Init+0xe8>
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042ce:	fb02 f303 	mul.w	r3, r2, r3
 80042d2:	4a69      	ldr	r2, [pc, #420]	; (8004478 <HAL_I2C_Init+0x284>)
 80042d4:	fba2 2303 	umull	r2, r3, r2, r3
 80042d8:	099b      	lsrs	r3, r3, #6
 80042da:	3301      	adds	r3, #1
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	430b      	orrs	r3, r1
 80042e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	495c      	ldr	r1, [pc, #368]	; (8004468 <HAL_I2C_Init+0x274>)
 80042f8:	428b      	cmp	r3, r1
 80042fa:	d819      	bhi.n	8004330 <HAL_I2C_Init+0x13c>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	1e59      	subs	r1, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	fbb1 f3f3 	udiv	r3, r1, r3
 800430a:	1c59      	adds	r1, r3, #1
 800430c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004310:	400b      	ands	r3, r1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <HAL_I2C_Init+0x138>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1e59      	subs	r1, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	fbb1 f3f3 	udiv	r3, r1, r3
 8004324:	3301      	adds	r3, #1
 8004326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800432a:	e051      	b.n	80043d0 <HAL_I2C_Init+0x1dc>
 800432c:	2304      	movs	r3, #4
 800432e:	e04f      	b.n	80043d0 <HAL_I2C_Init+0x1dc>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d111      	bne.n	800435c <HAL_I2C_Init+0x168>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1e58      	subs	r0, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6859      	ldr	r1, [r3, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	440b      	add	r3, r1
 8004346:	fbb0 f3f3 	udiv	r3, r0, r3
 800434a:	3301      	adds	r3, #1
 800434c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004350:	2b00      	cmp	r3, #0
 8004352:	bf0c      	ite	eq
 8004354:	2301      	moveq	r3, #1
 8004356:	2300      	movne	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	e012      	b.n	8004382 <HAL_I2C_Init+0x18e>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	1e58      	subs	r0, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6859      	ldr	r1, [r3, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	0099      	lsls	r1, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004372:	3301      	adds	r3, #1
 8004374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004378:	2b00      	cmp	r3, #0
 800437a:	bf0c      	ite	eq
 800437c:	2301      	moveq	r3, #1
 800437e:	2300      	movne	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_I2C_Init+0x196>
 8004386:	2301      	movs	r3, #1
 8004388:	e022      	b.n	80043d0 <HAL_I2C_Init+0x1dc>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10e      	bne.n	80043b0 <HAL_I2C_Init+0x1bc>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	1e58      	subs	r0, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6859      	ldr	r1, [r3, #4]
 800439a:	460b      	mov	r3, r1
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	440b      	add	r3, r1
 80043a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a4:	3301      	adds	r3, #1
 80043a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ae:	e00f      	b.n	80043d0 <HAL_I2C_Init+0x1dc>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	1e58      	subs	r0, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6859      	ldr	r1, [r3, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	0099      	lsls	r1, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c6:	3301      	adds	r3, #1
 80043c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	6809      	ldr	r1, [r1, #0]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69da      	ldr	r2, [r3, #28]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6911      	ldr	r1, [r2, #16]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	68d2      	ldr	r2, [r2, #12]
 800440a:	4311      	orrs	r1, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	430b      	orrs	r3, r1
 8004412:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695a      	ldr	r2, [r3, #20]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	000186a0 	.word	0x000186a0
 800446c:	001e847f 	.word	0x001e847f
 8004470:	003d08ff 	.word	0x003d08ff
 8004474:	431bde83 	.word	0x431bde83
 8004478:	10624dd3 	.word	0x10624dd3

0800447c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af02      	add	r7, sp, #8
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	461a      	mov	r2, r3
 8004488:	460b      	mov	r3, r1
 800448a:	817b      	strh	r3, [r7, #10]
 800448c:	4613      	mov	r3, r2
 800448e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004490:	f7fe fe2e 	bl	80030f0 <HAL_GetTick>
 8004494:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b20      	cmp	r3, #32
 80044a0:	f040 80e0 	bne.w	8004664 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	2319      	movs	r3, #25
 80044aa:	2201      	movs	r2, #1
 80044ac:	4970      	ldr	r1, [pc, #448]	; (8004670 <HAL_I2C_Master_Transmit+0x1f4>)
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 fe44 	bl	800513c <I2C_WaitOnFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80044ba:	2302      	movs	r3, #2
 80044bc:	e0d3      	b.n	8004666 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_I2C_Master_Transmit+0x50>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e0cc      	b.n	8004666 <HAL_I2C_Master_Transmit+0x1ea>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d007      	beq.n	80044f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0201 	orr.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004500:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2221      	movs	r2, #33	; 0x21
 8004506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2210      	movs	r2, #16
 800450e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	893a      	ldrh	r2, [r7, #8]
 8004522:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4a50      	ldr	r2, [pc, #320]	; (8004674 <HAL_I2C_Master_Transmit+0x1f8>)
 8004532:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004534:	8979      	ldrh	r1, [r7, #10]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	6a3a      	ldr	r2, [r7, #32]
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fbfe 	bl	8004d3c <I2C_MasterRequestWrite>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e08d      	b.n	8004666 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800454a:	2300      	movs	r3, #0
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004560:	e066      	b.n	8004630 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	6a39      	ldr	r1, [r7, #32]
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 febe 	bl	80052e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00d      	beq.n	800458e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	2b04      	cmp	r3, #4
 8004578:	d107      	bne.n	800458a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004588:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e06b      	b.n	8004666 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	781a      	ldrb	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d11b      	bne.n	8004604 <HAL_I2C_Master_Transmit+0x188>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d017      	beq.n	8004604 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	781a      	ldrb	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	6a39      	ldr	r1, [r7, #32]
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 feae 	bl	800536a <I2C_WaitOnBTFFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00d      	beq.n	8004630 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	2b04      	cmp	r3, #4
 800461a:	d107      	bne.n	800462c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800462a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e01a      	b.n	8004666 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004634:	2b00      	cmp	r3, #0
 8004636:	d194      	bne.n	8004562 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004646:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	e000      	b.n	8004666 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004664:	2302      	movs	r3, #2
  }
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	00100002 	.word	0x00100002
 8004674:	ffff0000 	.word	0xffff0000

08004678 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af02      	add	r7, sp, #8
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	4608      	mov	r0, r1
 8004682:	4611      	mov	r1, r2
 8004684:	461a      	mov	r2, r3
 8004686:	4603      	mov	r3, r0
 8004688:	817b      	strh	r3, [r7, #10]
 800468a:	460b      	mov	r3, r1
 800468c:	813b      	strh	r3, [r7, #8]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004692:	f7fe fd2d 	bl	80030f0 <HAL_GetTick>
 8004696:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	f040 80d9 	bne.w	8004858 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	2319      	movs	r3, #25
 80046ac:	2201      	movs	r2, #1
 80046ae:	496d      	ldr	r1, [pc, #436]	; (8004864 <HAL_I2C_Mem_Write+0x1ec>)
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fd43 	bl	800513c <I2C_WaitOnFlagUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80046bc:	2302      	movs	r3, #2
 80046be:	e0cc      	b.n	800485a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_I2C_Mem_Write+0x56>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e0c5      	b.n	800485a <HAL_I2C_Mem_Write+0x1e2>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d007      	beq.n	80046f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0201 	orr.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004702:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2221      	movs	r2, #33	; 0x21
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2240      	movs	r2, #64	; 0x40
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a3a      	ldr	r2, [r7, #32]
 800471e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004724:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472a:	b29a      	uxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4a4d      	ldr	r2, [pc, #308]	; (8004868 <HAL_I2C_Mem_Write+0x1f0>)
 8004734:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004736:	88f8      	ldrh	r0, [r7, #6]
 8004738:	893a      	ldrh	r2, [r7, #8]
 800473a:	8979      	ldrh	r1, [r7, #10]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	9301      	str	r3, [sp, #4]
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	4603      	mov	r3, r0
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 fb7a 	bl	8004e40 <I2C_RequestMemoryWrite>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d052      	beq.n	80047f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e081      	b.n	800485a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 fdc4 	bl	80052e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00d      	beq.n	8004782 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	2b04      	cmp	r3, #4
 800476c:	d107      	bne.n	800477e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e06b      	b.n	800485a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	781a      	ldrb	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	3b01      	subs	r3, #1
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d11b      	bne.n	80047f8 <HAL_I2C_Mem_Write+0x180>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d017      	beq.n	80047f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	781a      	ldrb	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1aa      	bne.n	8004756 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 fdb0 	bl	800536a <I2C_WaitOnBTFFlagUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00d      	beq.n	800482c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	2b04      	cmp	r3, #4
 8004816:	d107      	bne.n	8004828 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004826:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e016      	b.n	800485a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	e000      	b.n	800485a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004858:	2302      	movs	r3, #2
  }
}
 800485a:	4618      	mov	r0, r3
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	00100002 	.word	0x00100002
 8004868:	ffff0000 	.word	0xffff0000

0800486c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b08c      	sub	sp, #48	; 0x30
 8004870:	af02      	add	r7, sp, #8
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	4608      	mov	r0, r1
 8004876:	4611      	mov	r1, r2
 8004878:	461a      	mov	r2, r3
 800487a:	4603      	mov	r3, r0
 800487c:	817b      	strh	r3, [r7, #10]
 800487e:	460b      	mov	r3, r1
 8004880:	813b      	strh	r3, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800488a:	f7fe fc31 	bl	80030f0 <HAL_GetTick>
 800488e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b20      	cmp	r3, #32
 800489a:	f040 8244 	bne.w	8004d26 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	2319      	movs	r3, #25
 80048a4:	2201      	movs	r2, #1
 80048a6:	4982      	ldr	r1, [pc, #520]	; (8004ab0 <HAL_I2C_Mem_Read+0x244>)
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 fc47 	bl	800513c <I2C_WaitOnFlagUntilTimeout>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80048b4:	2302      	movs	r3, #2
 80048b6:	e237      	b.n	8004d28 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d101      	bne.n	80048c6 <HAL_I2C_Mem_Read+0x5a>
 80048c2:	2302      	movs	r3, #2
 80048c4:	e230      	b.n	8004d28 <HAL_I2C_Mem_Read+0x4bc>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d007      	beq.n	80048ec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2222      	movs	r2, #34	; 0x22
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2240      	movs	r2, #64	; 0x40
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004916:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800491c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4a62      	ldr	r2, [pc, #392]	; (8004ab4 <HAL_I2C_Mem_Read+0x248>)
 800492c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800492e:	88f8      	ldrh	r0, [r7, #6]
 8004930:	893a      	ldrh	r2, [r7, #8]
 8004932:	8979      	ldrh	r1, [r7, #10]
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	9301      	str	r3, [sp, #4]
 8004938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	4603      	mov	r3, r0
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fb14 	bl	8004f6c <I2C_RequestMemoryRead>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e1ec      	b.n	8004d28 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004952:	2b00      	cmp	r3, #0
 8004954:	d113      	bne.n	800497e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	61fb      	str	r3, [r7, #28]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	61fb      	str	r3, [r7, #28]
 800496a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	e1c0      	b.n	8004d00 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004982:	2b01      	cmp	r3, #1
 8004984:	d11e      	bne.n	80049c4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004994:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004996:	b672      	cpsid	i
}
 8004998:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800499a:	2300      	movs	r3, #0
 800499c:	61bb      	str	r3, [r7, #24]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80049c0:	b662      	cpsie	i
}
 80049c2:	e035      	b.n	8004a30 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d11e      	bne.n	8004a0a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80049dc:	b672      	cpsid	i
}
 80049de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a06:	b662      	cpsie	i
}
 8004a08:	e012      	b.n	8004a30 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a18:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004a30:	e166      	b.n	8004d00 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	f200 811f 	bhi.w	8004c7a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d123      	bne.n	8004a8c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 fccf 	bl	80053ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e167      	b.n	8004d28 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a8a:	e139      	b.n	8004d00 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d152      	bne.n	8004b3a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	4906      	ldr	r1, [pc, #24]	; (8004ab8 <HAL_I2C_Mem_Read+0x24c>)
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 fb4c 	bl	800513c <I2C_WaitOnFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d008      	beq.n	8004abc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e13c      	b.n	8004d28 <HAL_I2C_Mem_Read+0x4bc>
 8004aae:	bf00      	nop
 8004ab0:	00100002 	.word	0x00100002
 8004ab4:	ffff0000 	.word	0xffff0000
 8004ab8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004abc:	b672      	cpsid	i
}
 8004abe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ace:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691a      	ldr	r2, [r3, #16]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004b02:	b662      	cpsie	i
}
 8004b04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b38:	e0e2      	b.n	8004d00 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b40:	2200      	movs	r2, #0
 8004b42:	497b      	ldr	r1, [pc, #492]	; (8004d30 <HAL_I2C_Mem_Read+0x4c4>)
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 faf9 	bl	800513c <I2C_WaitOnFlagUntilTimeout>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e0e9      	b.n	8004d28 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b64:	b672      	cpsid	i
}
 8004b66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691a      	ldr	r2, [r3, #16]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b9a:	4b66      	ldr	r3, [pc, #408]	; (8004d34 <HAL_I2C_Mem_Read+0x4c8>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	08db      	lsrs	r3, r3, #3
 8004ba0:	4a65      	ldr	r2, [pc, #404]	; (8004d38 <HAL_I2C_Mem_Read+0x4cc>)
 8004ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba6:	0a1a      	lsrs	r2, r3, #8
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	00da      	lsls	r2, r3, #3
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d118      	bne.n	8004bf2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f043 0220 	orr.w	r2, r3, #32
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004be2:	b662      	cpsie	i
}
 8004be4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e09a      	b.n	8004d28 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d1d9      	bne.n	8004bb4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004c42:	b662      	cpsie	i
}
 8004c44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	691a      	ldr	r2, [r3, #16]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	b2d2      	uxtb	r2, r2
 8004c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c78:	e042      	b.n	8004d00 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 fbb4 	bl	80053ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e04c      	b.n	8004d28 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691a      	ldr	r2, [r3, #16]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d118      	bne.n	8004d00 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f47f ae94 	bne.w	8004a32 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	e000      	b.n	8004d28 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004d26:	2302      	movs	r3, #2
  }
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3728      	adds	r7, #40	; 0x28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	00010004 	.word	0x00010004
 8004d34:	20000004 	.word	0x20000004
 8004d38:	14f8b589 	.word	0x14f8b589

08004d3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	607a      	str	r2, [r7, #4]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	460b      	mov	r3, r1
 8004d4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d006      	beq.n	8004d66 <I2C_MasterRequestWrite+0x2a>
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d003      	beq.n	8004d66 <I2C_MasterRequestWrite+0x2a>
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d64:	d108      	bne.n	8004d78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	e00b      	b.n	8004d90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7c:	2b12      	cmp	r3, #18
 8004d7e:	d107      	bne.n	8004d90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 f9cd 	bl	800513c <I2C_WaitOnFlagUntilTimeout>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00d      	beq.n	8004dc4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db6:	d103      	bne.n	8004dc0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e035      	b.n	8004e30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dcc:	d108      	bne.n	8004de0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dce:	897b      	ldrh	r3, [r7, #10]
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ddc:	611a      	str	r2, [r3, #16]
 8004dde:	e01b      	b.n	8004e18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004de0:	897b      	ldrh	r3, [r7, #10]
 8004de2:	11db      	asrs	r3, r3, #7
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	f003 0306 	and.w	r3, r3, #6
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	f063 030f 	orn	r3, r3, #15
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	490e      	ldr	r1, [pc, #56]	; (8004e38 <I2C_MasterRequestWrite+0xfc>)
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 f9f3 	bl	80051ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e010      	b.n	8004e30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e0e:	897b      	ldrh	r3, [r7, #10]
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	4907      	ldr	r1, [pc, #28]	; (8004e3c <I2C_MasterRequestWrite+0x100>)
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f9e3 	bl	80051ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e000      	b.n	8004e30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3718      	adds	r7, #24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	00010008 	.word	0x00010008
 8004e3c:	00010002 	.word	0x00010002

08004e40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	4608      	mov	r0, r1
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	4603      	mov	r3, r0
 8004e50:	817b      	strh	r3, [r7, #10]
 8004e52:	460b      	mov	r3, r1
 8004e54:	813b      	strh	r3, [r7, #8]
 8004e56:	4613      	mov	r3, r2
 8004e58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 f960 	bl	800513c <I2C_WaitOnFlagUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00d      	beq.n	8004e9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e90:	d103      	bne.n	8004e9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e05f      	b.n	8004f5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e9e:	897b      	ldrh	r3, [r7, #10]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004eac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	6a3a      	ldr	r2, [r7, #32]
 8004eb2:	492d      	ldr	r1, [pc, #180]	; (8004f68 <I2C_RequestMemoryWrite+0x128>)
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 f998 	bl	80051ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e04c      	b.n	8004f5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004edc:	6a39      	ldr	r1, [r7, #32]
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 fa02 	bl	80052e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00d      	beq.n	8004f06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d107      	bne.n	8004f02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e02b      	b.n	8004f5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f06:	88fb      	ldrh	r3, [r7, #6]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d105      	bne.n	8004f18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f0c:	893b      	ldrh	r3, [r7, #8]
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	611a      	str	r2, [r3, #16]
 8004f16:	e021      	b.n	8004f5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f18:	893b      	ldrh	r3, [r7, #8]
 8004f1a:	0a1b      	lsrs	r3, r3, #8
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f28:	6a39      	ldr	r1, [r7, #32]
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f9dc 	bl	80052e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00d      	beq.n	8004f52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d107      	bne.n	8004f4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e005      	b.n	8004f5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f52:	893b      	ldrh	r3, [r7, #8]
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	00010002 	.word	0x00010002

08004f6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	4608      	mov	r0, r1
 8004f76:	4611      	mov	r1, r2
 8004f78:	461a      	mov	r2, r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	817b      	strh	r3, [r7, #10]
 8004f7e:	460b      	mov	r3, r1
 8004f80:	813b      	strh	r3, [r7, #8]
 8004f82:	4613      	mov	r3, r2
 8004f84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fa4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f8c2 	bl	800513c <I2C_WaitOnFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00d      	beq.n	8004fda <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fcc:	d103      	bne.n	8004fd6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e0aa      	b.n	8005130 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fda:	897b      	ldrh	r3, [r7, #10]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	461a      	mov	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fe8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	6a3a      	ldr	r2, [r7, #32]
 8004fee:	4952      	ldr	r1, [pc, #328]	; (8005138 <I2C_RequestMemoryRead+0x1cc>)
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 f8fa 	bl	80051ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e097      	b.n	8005130 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005018:	6a39      	ldr	r1, [r7, #32]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 f964 	bl	80052e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00d      	beq.n	8005042 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	2b04      	cmp	r3, #4
 800502c:	d107      	bne.n	800503e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800503c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e076      	b.n	8005130 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005042:	88fb      	ldrh	r3, [r7, #6]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d105      	bne.n	8005054 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005048:	893b      	ldrh	r3, [r7, #8]
 800504a:	b2da      	uxtb	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	611a      	str	r2, [r3, #16]
 8005052:	e021      	b.n	8005098 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005054:	893b      	ldrh	r3, [r7, #8]
 8005056:	0a1b      	lsrs	r3, r3, #8
 8005058:	b29b      	uxth	r3, r3
 800505a:	b2da      	uxtb	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005064:	6a39      	ldr	r1, [r7, #32]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f93e 	bl	80052e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00d      	beq.n	800508e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	2b04      	cmp	r3, #4
 8005078:	d107      	bne.n	800508a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005088:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e050      	b.n	8005130 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800508e:	893b      	ldrh	r3, [r7, #8]
 8005090:	b2da      	uxtb	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509a:	6a39      	ldr	r1, [r7, #32]
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 f923 	bl	80052e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00d      	beq.n	80050c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d107      	bne.n	80050c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e035      	b.n	8005130 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	2200      	movs	r2, #0
 80050dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f82b 	bl	800513c <I2C_WaitOnFlagUntilTimeout>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00d      	beq.n	8005108 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050fa:	d103      	bne.n	8005104 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005102:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e013      	b.n	8005130 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005108:	897b      	ldrh	r3, [r7, #10]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	b2da      	uxtb	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	6a3a      	ldr	r2, [r7, #32]
 800511c:	4906      	ldr	r1, [pc, #24]	; (8005138 <I2C_RequestMemoryRead+0x1cc>)
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 f863 	bl	80051ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	00010002 	.word	0x00010002

0800513c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	4613      	mov	r3, r2
 800514a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800514c:	e025      	b.n	800519a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005154:	d021      	beq.n	800519a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005156:	f7fd ffcb 	bl	80030f0 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	d302      	bcc.n	800516c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d116      	bne.n	800519a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	f043 0220 	orr.w	r2, r3, #32
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e023      	b.n	80051e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	0c1b      	lsrs	r3, r3, #16
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d10d      	bne.n	80051c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	43da      	mvns	r2, r3
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4013      	ands	r3, r2
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	bf0c      	ite	eq
 80051b6:	2301      	moveq	r3, #1
 80051b8:	2300      	movne	r3, #0
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	461a      	mov	r2, r3
 80051be:	e00c      	b.n	80051da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	43da      	mvns	r2, r3
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4013      	ands	r3, r2
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	bf0c      	ite	eq
 80051d2:	2301      	moveq	r3, #1
 80051d4:	2300      	movne	r3, #0
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	461a      	mov	r2, r3
 80051da:	79fb      	ldrb	r3, [r7, #7]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d0b6      	beq.n	800514e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b084      	sub	sp, #16
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	607a      	str	r2, [r7, #4]
 80051f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051f8:	e051      	b.n	800529e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005208:	d123      	bne.n	8005252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005218:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005222:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2220      	movs	r2, #32
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f043 0204 	orr.w	r2, r3, #4
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e046      	b.n	80052e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005258:	d021      	beq.n	800529e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800525a:	f7fd ff49 	bl	80030f0 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	429a      	cmp	r2, r3
 8005268:	d302      	bcc.n	8005270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d116      	bne.n	800529e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f043 0220 	orr.w	r2, r3, #32
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e020      	b.n	80052e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	0c1b      	lsrs	r3, r3, #16
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d10c      	bne.n	80052c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	43da      	mvns	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4013      	ands	r3, r2
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	bf14      	ite	ne
 80052ba:	2301      	movne	r3, #1
 80052bc:	2300      	moveq	r3, #0
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	e00b      	b.n	80052da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	43da      	mvns	r2, r3
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	4013      	ands	r3, r2
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	bf14      	ite	ne
 80052d4:	2301      	movne	r3, #1
 80052d6:	2300      	moveq	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d18d      	bne.n	80051fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052f4:	e02d      	b.n	8005352 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f8ce 	bl	8005498 <I2C_IsAcknowledgeFailed>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e02d      	b.n	8005362 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800530c:	d021      	beq.n	8005352 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800530e:	f7fd feef 	bl	80030f0 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	429a      	cmp	r2, r3
 800531c:	d302      	bcc.n	8005324 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d116      	bne.n	8005352 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f043 0220 	orr.w	r2, r3, #32
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e007      	b.n	8005362 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535c:	2b80      	cmp	r3, #128	; 0x80
 800535e:	d1ca      	bne.n	80052f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b084      	sub	sp, #16
 800536e:	af00      	add	r7, sp, #0
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005376:	e02d      	b.n	80053d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 f88d 	bl	8005498 <I2C_IsAcknowledgeFailed>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e02d      	b.n	80053e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800538e:	d021      	beq.n	80053d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005390:	f7fd feae 	bl	80030f0 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	429a      	cmp	r2, r3
 800539e:	d302      	bcc.n	80053a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d116      	bne.n	80053d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	f043 0220 	orr.w	r2, r3, #32
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e007      	b.n	80053e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d1ca      	bne.n	8005378 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053f8:	e042      	b.n	8005480 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b10      	cmp	r3, #16
 8005406:	d119      	bne.n	800543c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0210 	mvn.w	r2, #16
 8005410:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e029      	b.n	8005490 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543c:	f7fd fe58 	bl	80030f0 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	429a      	cmp	r2, r3
 800544a:	d302      	bcc.n	8005452 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d116      	bne.n	8005480 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2220      	movs	r2, #32
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	f043 0220 	orr.w	r2, r3, #32
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e007      	b.n	8005490 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548a:	2b40      	cmp	r3, #64	; 0x40
 800548c:	d1b5      	bne.n	80053fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ae:	d11b      	bne.n	80054e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d4:	f043 0204 	orr.w	r2, r3, #4
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e000      	b.n	80054ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e272      	b.n	80059ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 8087 	beq.w	8005622 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005514:	4b92      	ldr	r3, [pc, #584]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f003 030c 	and.w	r3, r3, #12
 800551c:	2b04      	cmp	r3, #4
 800551e:	d00c      	beq.n	800553a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005520:	4b8f      	ldr	r3, [pc, #572]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f003 030c 	and.w	r3, r3, #12
 8005528:	2b08      	cmp	r3, #8
 800552a:	d112      	bne.n	8005552 <HAL_RCC_OscConfig+0x5e>
 800552c:	4b8c      	ldr	r3, [pc, #560]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005538:	d10b      	bne.n	8005552 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800553a:	4b89      	ldr	r3, [pc, #548]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d06c      	beq.n	8005620 <HAL_RCC_OscConfig+0x12c>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d168      	bne.n	8005620 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e24c      	b.n	80059ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800555a:	d106      	bne.n	800556a <HAL_RCC_OscConfig+0x76>
 800555c:	4b80      	ldr	r3, [pc, #512]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a7f      	ldr	r2, [pc, #508]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 8005562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	e02e      	b.n	80055c8 <HAL_RCC_OscConfig+0xd4>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10c      	bne.n	800558c <HAL_RCC_OscConfig+0x98>
 8005572:	4b7b      	ldr	r3, [pc, #492]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a7a      	ldr	r2, [pc, #488]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 8005578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	4b78      	ldr	r3, [pc, #480]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a77      	ldr	r2, [pc, #476]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 8005584:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	e01d      	b.n	80055c8 <HAL_RCC_OscConfig+0xd4>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005594:	d10c      	bne.n	80055b0 <HAL_RCC_OscConfig+0xbc>
 8005596:	4b72      	ldr	r3, [pc, #456]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a71      	ldr	r2, [pc, #452]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 800559c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	4b6f      	ldr	r3, [pc, #444]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a6e      	ldr	r2, [pc, #440]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 80055a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	e00b      	b.n	80055c8 <HAL_RCC_OscConfig+0xd4>
 80055b0:	4b6b      	ldr	r3, [pc, #428]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a6a      	ldr	r2, [pc, #424]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 80055b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	4b68      	ldr	r3, [pc, #416]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a67      	ldr	r2, [pc, #412]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 80055c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d013      	beq.n	80055f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d0:	f7fd fd8e 	bl	80030f0 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055d8:	f7fd fd8a 	bl	80030f0 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b64      	cmp	r3, #100	; 0x64
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e200      	b.n	80059ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ea:	4b5d      	ldr	r3, [pc, #372]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0f0      	beq.n	80055d8 <HAL_RCC_OscConfig+0xe4>
 80055f6:	e014      	b.n	8005622 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f8:	f7fd fd7a 	bl	80030f0 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005600:	f7fd fd76 	bl	80030f0 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b64      	cmp	r3, #100	; 0x64
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e1ec      	b.n	80059ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005612:	4b53      	ldr	r3, [pc, #332]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1f0      	bne.n	8005600 <HAL_RCC_OscConfig+0x10c>
 800561e:	e000      	b.n	8005622 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d063      	beq.n	80056f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800562e:	4b4c      	ldr	r3, [pc, #304]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f003 030c 	and.w	r3, r3, #12
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00b      	beq.n	8005652 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800563a:	4b49      	ldr	r3, [pc, #292]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f003 030c 	and.w	r3, r3, #12
 8005642:	2b08      	cmp	r3, #8
 8005644:	d11c      	bne.n	8005680 <HAL_RCC_OscConfig+0x18c>
 8005646:	4b46      	ldr	r3, [pc, #280]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d116      	bne.n	8005680 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005652:	4b43      	ldr	r3, [pc, #268]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <HAL_RCC_OscConfig+0x176>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d001      	beq.n	800566a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e1c0      	b.n	80059ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800566a:	4b3d      	ldr	r3, [pc, #244]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	4939      	ldr	r1, [pc, #228]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 800567a:	4313      	orrs	r3, r2
 800567c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800567e:	e03a      	b.n	80056f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d020      	beq.n	80056ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005688:	4b36      	ldr	r3, [pc, #216]	; (8005764 <HAL_RCC_OscConfig+0x270>)
 800568a:	2201      	movs	r2, #1
 800568c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800568e:	f7fd fd2f 	bl	80030f0 <HAL_GetTick>
 8005692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005696:	f7fd fd2b 	bl	80030f0 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e1a1      	b.n	80059ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a8:	4b2d      	ldr	r3, [pc, #180]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0f0      	beq.n	8005696 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b4:	4b2a      	ldr	r3, [pc, #168]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	4927      	ldr	r1, [pc, #156]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	600b      	str	r3, [r1, #0]
 80056c8:	e015      	b.n	80056f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ca:	4b26      	ldr	r3, [pc, #152]	; (8005764 <HAL_RCC_OscConfig+0x270>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d0:	f7fd fd0e 	bl	80030f0 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056d8:	f7fd fd0a 	bl	80030f0 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e180      	b.n	80059ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ea:	4b1d      	ldr	r3, [pc, #116]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d03a      	beq.n	8005778 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d019      	beq.n	800573e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800570a:	4b17      	ldr	r3, [pc, #92]	; (8005768 <HAL_RCC_OscConfig+0x274>)
 800570c:	2201      	movs	r2, #1
 800570e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005710:	f7fd fcee 	bl	80030f0 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005718:	f7fd fcea 	bl	80030f0 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e160      	b.n	80059ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800572a:	4b0d      	ldr	r3, [pc, #52]	; (8005760 <HAL_RCC_OscConfig+0x26c>)
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f0      	beq.n	8005718 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005736:	2001      	movs	r0, #1
 8005738:	f000 fac4 	bl	8005cc4 <RCC_Delay>
 800573c:	e01c      	b.n	8005778 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800573e:	4b0a      	ldr	r3, [pc, #40]	; (8005768 <HAL_RCC_OscConfig+0x274>)
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005744:	f7fd fcd4 	bl	80030f0 <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800574a:	e00f      	b.n	800576c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800574c:	f7fd fcd0 	bl	80030f0 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d908      	bls.n	800576c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e146      	b.n	80059ec <HAL_RCC_OscConfig+0x4f8>
 800575e:	bf00      	nop
 8005760:	40021000 	.word	0x40021000
 8005764:	42420000 	.word	0x42420000
 8005768:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800576c:	4b92      	ldr	r3, [pc, #584]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e9      	bne.n	800574c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 80a6 	beq.w	80058d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005786:	2300      	movs	r3, #0
 8005788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800578a:	4b8b      	ldr	r3, [pc, #556]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10d      	bne.n	80057b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005796:	4b88      	ldr	r3, [pc, #544]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	4a87      	ldr	r2, [pc, #540]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 800579c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a0:	61d3      	str	r3, [r2, #28]
 80057a2:	4b85      	ldr	r3, [pc, #532]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057aa:	60bb      	str	r3, [r7, #8]
 80057ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ae:	2301      	movs	r3, #1
 80057b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b2:	4b82      	ldr	r3, [pc, #520]	; (80059bc <HAL_RCC_OscConfig+0x4c8>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d118      	bne.n	80057f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057be:	4b7f      	ldr	r3, [pc, #508]	; (80059bc <HAL_RCC_OscConfig+0x4c8>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a7e      	ldr	r2, [pc, #504]	; (80059bc <HAL_RCC_OscConfig+0x4c8>)
 80057c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ca:	f7fd fc91 	bl	80030f0 <HAL_GetTick>
 80057ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d0:	e008      	b.n	80057e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057d2:	f7fd fc8d 	bl	80030f0 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b64      	cmp	r3, #100	; 0x64
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e103      	b.n	80059ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e4:	4b75      	ldr	r3, [pc, #468]	; (80059bc <HAL_RCC_OscConfig+0x4c8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0f0      	beq.n	80057d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d106      	bne.n	8005806 <HAL_RCC_OscConfig+0x312>
 80057f8:	4b6f      	ldr	r3, [pc, #444]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	4a6e      	ldr	r2, [pc, #440]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	6213      	str	r3, [r2, #32]
 8005804:	e02d      	b.n	8005862 <HAL_RCC_OscConfig+0x36e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10c      	bne.n	8005828 <HAL_RCC_OscConfig+0x334>
 800580e:	4b6a      	ldr	r3, [pc, #424]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	4a69      	ldr	r2, [pc, #420]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 8005814:	f023 0301 	bic.w	r3, r3, #1
 8005818:	6213      	str	r3, [r2, #32]
 800581a:	4b67      	ldr	r3, [pc, #412]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	4a66      	ldr	r2, [pc, #408]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 8005820:	f023 0304 	bic.w	r3, r3, #4
 8005824:	6213      	str	r3, [r2, #32]
 8005826:	e01c      	b.n	8005862 <HAL_RCC_OscConfig+0x36e>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	2b05      	cmp	r3, #5
 800582e:	d10c      	bne.n	800584a <HAL_RCC_OscConfig+0x356>
 8005830:	4b61      	ldr	r3, [pc, #388]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	4a60      	ldr	r2, [pc, #384]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 8005836:	f043 0304 	orr.w	r3, r3, #4
 800583a:	6213      	str	r3, [r2, #32]
 800583c:	4b5e      	ldr	r3, [pc, #376]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	4a5d      	ldr	r2, [pc, #372]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 8005842:	f043 0301 	orr.w	r3, r3, #1
 8005846:	6213      	str	r3, [r2, #32]
 8005848:	e00b      	b.n	8005862 <HAL_RCC_OscConfig+0x36e>
 800584a:	4b5b      	ldr	r3, [pc, #364]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	4a5a      	ldr	r2, [pc, #360]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 8005850:	f023 0301 	bic.w	r3, r3, #1
 8005854:	6213      	str	r3, [r2, #32]
 8005856:	4b58      	ldr	r3, [pc, #352]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	4a57      	ldr	r2, [pc, #348]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 800585c:	f023 0304 	bic.w	r3, r3, #4
 8005860:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d015      	beq.n	8005896 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800586a:	f7fd fc41 	bl	80030f0 <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005870:	e00a      	b.n	8005888 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005872:	f7fd fc3d 	bl	80030f0 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005880:	4293      	cmp	r3, r2
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e0b1      	b.n	80059ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005888:	4b4b      	ldr	r3, [pc, #300]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0ee      	beq.n	8005872 <HAL_RCC_OscConfig+0x37e>
 8005894:	e014      	b.n	80058c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005896:	f7fd fc2b 	bl	80030f0 <HAL_GetTick>
 800589a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800589c:	e00a      	b.n	80058b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800589e:	f7fd fc27 	bl	80030f0 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e09b      	b.n	80059ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058b4:	4b40      	ldr	r3, [pc, #256]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1ee      	bne.n	800589e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d105      	bne.n	80058d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058c6:	4b3c      	ldr	r3, [pc, #240]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	4a3b      	ldr	r2, [pc, #236]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 80058cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 8087 	beq.w	80059ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058dc:	4b36      	ldr	r3, [pc, #216]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f003 030c 	and.w	r3, r3, #12
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d061      	beq.n	80059ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d146      	bne.n	800597e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f0:	4b33      	ldr	r3, [pc, #204]	; (80059c0 <HAL_RCC_OscConfig+0x4cc>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f6:	f7fd fbfb 	bl	80030f0 <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058fc:	e008      	b.n	8005910 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058fe:	f7fd fbf7 	bl	80030f0 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e06d      	b.n	80059ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005910:	4b29      	ldr	r3, [pc, #164]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1f0      	bne.n	80058fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005924:	d108      	bne.n	8005938 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005926:	4b24      	ldr	r3, [pc, #144]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	4921      	ldr	r1, [pc, #132]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 8005934:	4313      	orrs	r3, r2
 8005936:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005938:	4b1f      	ldr	r3, [pc, #124]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a19      	ldr	r1, [r3, #32]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	430b      	orrs	r3, r1
 800594a:	491b      	ldr	r1, [pc, #108]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 800594c:	4313      	orrs	r3, r2
 800594e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005950:	4b1b      	ldr	r3, [pc, #108]	; (80059c0 <HAL_RCC_OscConfig+0x4cc>)
 8005952:	2201      	movs	r2, #1
 8005954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005956:	f7fd fbcb 	bl	80030f0 <HAL_GetTick>
 800595a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800595c:	e008      	b.n	8005970 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800595e:	f7fd fbc7 	bl	80030f0 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e03d      	b.n	80059ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005970:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0f0      	beq.n	800595e <HAL_RCC_OscConfig+0x46a>
 800597c:	e035      	b.n	80059ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800597e:	4b10      	ldr	r3, [pc, #64]	; (80059c0 <HAL_RCC_OscConfig+0x4cc>)
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005984:	f7fd fbb4 	bl	80030f0 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800598c:	f7fd fbb0 	bl	80030f0 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e026      	b.n	80059ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800599e:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <HAL_RCC_OscConfig+0x4c4>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f0      	bne.n	800598c <HAL_RCC_OscConfig+0x498>
 80059aa:	e01e      	b.n	80059ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d107      	bne.n	80059c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e019      	b.n	80059ec <HAL_RCC_OscConfig+0x4f8>
 80059b8:	40021000 	.word	0x40021000
 80059bc:	40007000 	.word	0x40007000
 80059c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80059c4:	4b0b      	ldr	r3, [pc, #44]	; (80059f4 <HAL_RCC_OscConfig+0x500>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d106      	bne.n	80059e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d001      	beq.n	80059ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	40021000 	.word	0x40021000

080059f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e0d0      	b.n	8005bae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a0c:	4b6a      	ldr	r3, [pc, #424]	; (8005bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d910      	bls.n	8005a3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a1a:	4b67      	ldr	r3, [pc, #412]	; (8005bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f023 0207 	bic.w	r2, r3, #7
 8005a22:	4965      	ldr	r1, [pc, #404]	; (8005bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a2a:	4b63      	ldr	r3, [pc, #396]	; (8005bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d001      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e0b8      	b.n	8005bae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d020      	beq.n	8005a8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d005      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a54:	4b59      	ldr	r3, [pc, #356]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	4a58      	ldr	r2, [pc, #352]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005a5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0308 	and.w	r3, r3, #8
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d005      	beq.n	8005a78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a6c:	4b53      	ldr	r3, [pc, #332]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	4a52      	ldr	r2, [pc, #328]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005a72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005a76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a78:	4b50      	ldr	r3, [pc, #320]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	494d      	ldr	r1, [pc, #308]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d040      	beq.n	8005b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d107      	bne.n	8005aae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a9e:	4b47      	ldr	r3, [pc, #284]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d115      	bne.n	8005ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e07f      	b.n	8005bae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d107      	bne.n	8005ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ab6:	4b41      	ldr	r3, [pc, #260]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d109      	bne.n	8005ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e073      	b.n	8005bae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ac6:	4b3d      	ldr	r3, [pc, #244]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e06b      	b.n	8005bae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ad6:	4b39      	ldr	r3, [pc, #228]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f023 0203 	bic.w	r2, r3, #3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	4936      	ldr	r1, [pc, #216]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ae8:	f7fd fb02 	bl	80030f0 <HAL_GetTick>
 8005aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aee:	e00a      	b.n	8005b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005af0:	f7fd fafe 	bl	80030f0 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e053      	b.n	8005bae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b06:	4b2d      	ldr	r3, [pc, #180]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f003 020c 	and.w	r2, r3, #12
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d1eb      	bne.n	8005af0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b18:	4b27      	ldr	r3, [pc, #156]	; (8005bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d210      	bcs.n	8005b48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b26:	4b24      	ldr	r3, [pc, #144]	; (8005bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f023 0207 	bic.w	r2, r3, #7
 8005b2e:	4922      	ldr	r1, [pc, #136]	; (8005bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b36:	4b20      	ldr	r3, [pc, #128]	; (8005bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0307 	and.w	r3, r3, #7
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d001      	beq.n	8005b48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e032      	b.n	8005bae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d008      	beq.n	8005b66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b54:	4b19      	ldr	r3, [pc, #100]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	4916      	ldr	r1, [pc, #88]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d009      	beq.n	8005b86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b72:	4b12      	ldr	r3, [pc, #72]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	490e      	ldr	r1, [pc, #56]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b86:	f000 f821 	bl	8005bcc <HAL_RCC_GetSysClockFreq>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	091b      	lsrs	r3, r3, #4
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	490a      	ldr	r1, [pc, #40]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b98:	5ccb      	ldrb	r3, [r1, r3]
 8005b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9e:	4a09      	ldr	r2, [pc, #36]	; (8005bc4 <HAL_RCC_ClockConfig+0x1cc>)
 8005ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005ba2:	4b09      	ldr	r3, [pc, #36]	; (8005bc8 <HAL_RCC_ClockConfig+0x1d0>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fd fa60 	bl	800306c <HAL_InitTick>

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40022000 	.word	0x40022000
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	08006dd0 	.word	0x08006dd0
 8005bc4:	20000004 	.word	0x20000004
 8005bc8:	20000008 	.word	0x20000008

08005bcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bcc:	b490      	push	{r4, r7}
 8005bce:	b08a      	sub	sp, #40	; 0x28
 8005bd0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005bd2:	4b29      	ldr	r3, [pc, #164]	; (8005c78 <HAL_RCC_GetSysClockFreq+0xac>)
 8005bd4:	1d3c      	adds	r4, r7, #4
 8005bd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005bdc:	f240 2301 	movw	r3, #513	; 0x201
 8005be0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	61fb      	str	r3, [r7, #28]
 8005be6:	2300      	movs	r3, #0
 8005be8:	61bb      	str	r3, [r7, #24]
 8005bea:	2300      	movs	r3, #0
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24
 8005bee:	2300      	movs	r3, #0
 8005bf0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005bf6:	4b21      	ldr	r3, [pc, #132]	; (8005c7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	f003 030c 	and.w	r3, r3, #12
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d002      	beq.n	8005c0c <HAL_RCC_GetSysClockFreq+0x40>
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d003      	beq.n	8005c12 <HAL_RCC_GetSysClockFreq+0x46>
 8005c0a:	e02b      	b.n	8005c64 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c0c:	4b1c      	ldr	r3, [pc, #112]	; (8005c80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c0e:	623b      	str	r3, [r7, #32]
      break;
 8005c10:	e02b      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	0c9b      	lsrs	r3, r3, #18
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	3328      	adds	r3, #40	; 0x28
 8005c1c:	443b      	add	r3, r7
 8005c1e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005c22:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d012      	beq.n	8005c54 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c2e:	4b13      	ldr	r3, [pc, #76]	; (8005c7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	0c5b      	lsrs	r3, r3, #17
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	3328      	adds	r3, #40	; 0x28
 8005c3a:	443b      	add	r3, r7
 8005c3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005c40:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	4a0e      	ldr	r2, [pc, #56]	; (8005c80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c46:	fb03 f202 	mul.w	r2, r3, r2
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24
 8005c52:	e004      	b.n	8005c5e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	4a0b      	ldr	r2, [pc, #44]	; (8005c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c58:	fb02 f303 	mul.w	r3, r2, r3
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	623b      	str	r3, [r7, #32]
      break;
 8005c62:	e002      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c64:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c66:	623b      	str	r3, [r7, #32]
      break;
 8005c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3728      	adds	r7, #40	; 0x28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bc90      	pop	{r4, r7}
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	08006dc0 	.word	0x08006dc0
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	007a1200 	.word	0x007a1200
 8005c84:	003d0900 	.word	0x003d0900

08005c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c8c:	4b02      	ldr	r3, [pc, #8]	; (8005c98 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr
 8005c98:	20000004 	.word	0x20000004

08005c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ca0:	f7ff fff2 	bl	8005c88 <HAL_RCC_GetHCLKFreq>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	0a1b      	lsrs	r3, r3, #8
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	4903      	ldr	r1, [pc, #12]	; (8005cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cb2:	5ccb      	ldrb	r3, [r1, r3]
 8005cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40021000 	.word	0x40021000
 8005cc0:	08006de0 	.word	0x08006de0

08005cc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005ccc:	4b0a      	ldr	r3, [pc, #40]	; (8005cf8 <RCC_Delay+0x34>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a0a      	ldr	r2, [pc, #40]	; (8005cfc <RCC_Delay+0x38>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	0a5b      	lsrs	r3, r3, #9
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	fb02 f303 	mul.w	r3, r2, r3
 8005cde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ce0:	bf00      	nop
  }
  while (Delay --);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	1e5a      	subs	r2, r3, #1
 8005ce6:	60fa      	str	r2, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1f9      	bne.n	8005ce0 <RCC_Delay+0x1c>
}
 8005cec:	bf00      	nop
 8005cee:	bf00      	nop
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bc80      	pop	{r7}
 8005cf6:	4770      	bx	lr
 8005cf8:	20000004 	.word	0x20000004
 8005cfc:	10624dd3 	.word	0x10624dd3

08005d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e041      	b.n	8005d96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fd f89c 	bl	8002e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4610      	mov	r0, r2
 8005d40:	f000 fc28 	bl	8006594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d001      	beq.n	8005db8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e03a      	b.n	8005e2e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0201 	orr.w	r2, r2, #1
 8005dce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a18      	ldr	r2, [pc, #96]	; (8005e38 <HAL_TIM_Base_Start_IT+0x98>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00e      	beq.n	8005df8 <HAL_TIM_Base_Start_IT+0x58>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de2:	d009      	beq.n	8005df8 <HAL_TIM_Base_Start_IT+0x58>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a14      	ldr	r2, [pc, #80]	; (8005e3c <HAL_TIM_Base_Start_IT+0x9c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d004      	beq.n	8005df8 <HAL_TIM_Base_Start_IT+0x58>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a13      	ldr	r2, [pc, #76]	; (8005e40 <HAL_TIM_Base_Start_IT+0xa0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d111      	bne.n	8005e1c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b06      	cmp	r3, #6
 8005e08:	d010      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f042 0201 	orr.w	r2, r2, #1
 8005e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1a:	e007      	b.n	8005e2c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f042 0201 	orr.w	r2, r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bc80      	pop	{r7}
 8005e36:	4770      	bx	lr
 8005e38:	40012c00 	.word	0x40012c00
 8005e3c:	40000400 	.word	0x40000400
 8005e40:	40000800 	.word	0x40000800

08005e44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e041      	b.n	8005eda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d106      	bne.n	8005e70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f839 	bl	8005ee2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3304      	adds	r3, #4
 8005e80:	4619      	mov	r1, r3
 8005e82:	4610      	mov	r0, r2
 8005e84:	f000 fb86 	bl	8006594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bc80      	pop	{r7}
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d109      	bne.n	8005f18 <HAL_TIM_PWM_Start+0x24>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	bf14      	ite	ne
 8005f10:	2301      	movne	r3, #1
 8005f12:	2300      	moveq	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	e022      	b.n	8005f5e <HAL_TIM_PWM_Start+0x6a>
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d109      	bne.n	8005f32 <HAL_TIM_PWM_Start+0x3e>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	bf14      	ite	ne
 8005f2a:	2301      	movne	r3, #1
 8005f2c:	2300      	moveq	r3, #0
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	e015      	b.n	8005f5e <HAL_TIM_PWM_Start+0x6a>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d109      	bne.n	8005f4c <HAL_TIM_PWM_Start+0x58>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	bf14      	ite	ne
 8005f44:	2301      	movne	r3, #1
 8005f46:	2300      	moveq	r3, #0
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	e008      	b.n	8005f5e <HAL_TIM_PWM_Start+0x6a>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	bf14      	ite	ne
 8005f58:	2301      	movne	r3, #1
 8005f5a:	2300      	moveq	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e05e      	b.n	8006024 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d104      	bne.n	8005f76 <HAL_TIM_PWM_Start+0x82>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f74:	e013      	b.n	8005f9e <HAL_TIM_PWM_Start+0xaa>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d104      	bne.n	8005f86 <HAL_TIM_PWM_Start+0x92>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f84:	e00b      	b.n	8005f9e <HAL_TIM_PWM_Start+0xaa>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d104      	bne.n	8005f96 <HAL_TIM_PWM_Start+0xa2>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f94:	e003      	b.n	8005f9e <HAL_TIM_PWM_Start+0xaa>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2202      	movs	r2, #2
 8005f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 fd74 	bl	8006a94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a1e      	ldr	r2, [pc, #120]	; (800602c <HAL_TIM_PWM_Start+0x138>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d107      	bne.n	8005fc6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a18      	ldr	r2, [pc, #96]	; (800602c <HAL_TIM_PWM_Start+0x138>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00e      	beq.n	8005fee <HAL_TIM_PWM_Start+0xfa>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd8:	d009      	beq.n	8005fee <HAL_TIM_PWM_Start+0xfa>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a14      	ldr	r2, [pc, #80]	; (8006030 <HAL_TIM_PWM_Start+0x13c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d004      	beq.n	8005fee <HAL_TIM_PWM_Start+0xfa>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a12      	ldr	r2, [pc, #72]	; (8006034 <HAL_TIM_PWM_Start+0x140>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d111      	bne.n	8006012 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f003 0307 	and.w	r3, r3, #7
 8005ff8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b06      	cmp	r3, #6
 8005ffe:	d010      	beq.n	8006022 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006010:	e007      	b.n	8006022 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f042 0201 	orr.w	r2, r2, #1
 8006020:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	40012c00 	.word	0x40012c00
 8006030:	40000400 	.word	0x40000400
 8006034:	40000800 	.word	0x40000800

08006038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b02      	cmp	r3, #2
 800604c:	d122      	bne.n	8006094 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b02      	cmp	r3, #2
 800605a:	d11b      	bne.n	8006094 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0202 	mvn.w	r2, #2
 8006064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fa6f 	bl	800655e <HAL_TIM_IC_CaptureCallback>
 8006080:	e005      	b.n	800608e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fa62 	bl	800654c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fa71 	bl	8006570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f003 0304 	and.w	r3, r3, #4
 800609e:	2b04      	cmp	r3, #4
 80060a0:	d122      	bne.n	80060e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	2b04      	cmp	r3, #4
 80060ae:	d11b      	bne.n	80060e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0204 	mvn.w	r2, #4
 80060b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2202      	movs	r2, #2
 80060be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fa45 	bl	800655e <HAL_TIM_IC_CaptureCallback>
 80060d4:	e005      	b.n	80060e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa38 	bl	800654c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fa47 	bl	8006570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 0308 	and.w	r3, r3, #8
 80060f2:	2b08      	cmp	r3, #8
 80060f4:	d122      	bne.n	800613c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b08      	cmp	r3, #8
 8006102:	d11b      	bne.n	800613c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0208 	mvn.w	r2, #8
 800610c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2204      	movs	r2, #4
 8006112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fa1b 	bl	800655e <HAL_TIM_IC_CaptureCallback>
 8006128:	e005      	b.n	8006136 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fa0e 	bl	800654c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fa1d 	bl	8006570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0310 	and.w	r3, r3, #16
 8006146:	2b10      	cmp	r3, #16
 8006148:	d122      	bne.n	8006190 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f003 0310 	and.w	r3, r3, #16
 8006154:	2b10      	cmp	r3, #16
 8006156:	d11b      	bne.n	8006190 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0210 	mvn.w	r2, #16
 8006160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2208      	movs	r2, #8
 8006166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f9f1 	bl	800655e <HAL_TIM_IC_CaptureCallback>
 800617c:	e005      	b.n	800618a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f9e4 	bl	800654c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f9f3 	bl	8006570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b01      	cmp	r3, #1
 800619c:	d10e      	bne.n	80061bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d107      	bne.n	80061bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f06f 0201 	mvn.w	r2, #1
 80061b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fc f8da 	bl	8002370 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c6:	2b80      	cmp	r3, #128	; 0x80
 80061c8:	d10e      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d4:	2b80      	cmp	r3, #128	; 0x80
 80061d6:	d107      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fce1 	bl	8006baa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f2:	2b40      	cmp	r3, #64	; 0x40
 80061f4:	d10e      	bne.n	8006214 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006200:	2b40      	cmp	r3, #64	; 0x40
 8006202:	d107      	bne.n	8006214 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800620c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f9b7 	bl	8006582 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b20      	cmp	r3, #32
 8006220:	d10e      	bne.n	8006240 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f003 0320 	and.w	r3, r3, #32
 800622c:	2b20      	cmp	r3, #32
 800622e:	d107      	bne.n	8006240 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f06f 0220 	mvn.w	r2, #32
 8006238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fcac 	bl	8006b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006240:	bf00      	nop
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800625a:	2b01      	cmp	r3, #1
 800625c:	d101      	bne.n	8006262 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800625e:	2302      	movs	r3, #2
 8006260:	e0ac      	b.n	80063bc <HAL_TIM_PWM_ConfigChannel+0x174>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b0c      	cmp	r3, #12
 800626e:	f200 809f 	bhi.w	80063b0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006272:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006278:	080062ad 	.word	0x080062ad
 800627c:	080063b1 	.word	0x080063b1
 8006280:	080063b1 	.word	0x080063b1
 8006284:	080063b1 	.word	0x080063b1
 8006288:	080062ed 	.word	0x080062ed
 800628c:	080063b1 	.word	0x080063b1
 8006290:	080063b1 	.word	0x080063b1
 8006294:	080063b1 	.word	0x080063b1
 8006298:	0800632f 	.word	0x0800632f
 800629c:	080063b1 	.word	0x080063b1
 80062a0:	080063b1 	.word	0x080063b1
 80062a4:	080063b1 	.word	0x080063b1
 80062a8:	0800636f 	.word	0x0800636f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68b9      	ldr	r1, [r7, #8]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 f9d0 	bl	8006658 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699a      	ldr	r2, [r3, #24]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0208 	orr.w	r2, r2, #8
 80062c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	699a      	ldr	r2, [r3, #24]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0204 	bic.w	r2, r2, #4
 80062d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6999      	ldr	r1, [r3, #24]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	691a      	ldr	r2, [r3, #16]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	619a      	str	r2, [r3, #24]
      break;
 80062ea:	e062      	b.n	80063b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fa16 	bl	8006724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699a      	ldr	r2, [r3, #24]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699a      	ldr	r2, [r3, #24]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6999      	ldr	r1, [r3, #24]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	021a      	lsls	r2, r3, #8
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	619a      	str	r2, [r3, #24]
      break;
 800632c:	e041      	b.n	80063b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	4618      	mov	r0, r3
 8006336:	f000 fa5f 	bl	80067f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69da      	ldr	r2, [r3, #28]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f042 0208 	orr.w	r2, r2, #8
 8006348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69da      	ldr	r2, [r3, #28]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0204 	bic.w	r2, r2, #4
 8006358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69d9      	ldr	r1, [r3, #28]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	691a      	ldr	r2, [r3, #16]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	430a      	orrs	r2, r1
 800636a:	61da      	str	r2, [r3, #28]
      break;
 800636c:	e021      	b.n	80063b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68b9      	ldr	r1, [r7, #8]
 8006374:	4618      	mov	r0, r3
 8006376:	f000 faa9 	bl	80068cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	69da      	ldr	r2, [r3, #28]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69da      	ldr	r2, [r3, #28]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69d9      	ldr	r1, [r3, #28]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	021a      	lsls	r2, r3, #8
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	61da      	str	r2, [r3, #28]
      break;
 80063ae:	e000      	b.n	80063b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80063b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d101      	bne.n	80063dc <HAL_TIM_ConfigClockSource+0x18>
 80063d8:	2302      	movs	r3, #2
 80063da:	e0b3      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x180>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006402:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006414:	d03e      	beq.n	8006494 <HAL_TIM_ConfigClockSource+0xd0>
 8006416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800641a:	f200 8087 	bhi.w	800652c <HAL_TIM_ConfigClockSource+0x168>
 800641e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006422:	f000 8085 	beq.w	8006530 <HAL_TIM_ConfigClockSource+0x16c>
 8006426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800642a:	d87f      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x168>
 800642c:	2b70      	cmp	r3, #112	; 0x70
 800642e:	d01a      	beq.n	8006466 <HAL_TIM_ConfigClockSource+0xa2>
 8006430:	2b70      	cmp	r3, #112	; 0x70
 8006432:	d87b      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x168>
 8006434:	2b60      	cmp	r3, #96	; 0x60
 8006436:	d050      	beq.n	80064da <HAL_TIM_ConfigClockSource+0x116>
 8006438:	2b60      	cmp	r3, #96	; 0x60
 800643a:	d877      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x168>
 800643c:	2b50      	cmp	r3, #80	; 0x50
 800643e:	d03c      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0xf6>
 8006440:	2b50      	cmp	r3, #80	; 0x50
 8006442:	d873      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x168>
 8006444:	2b40      	cmp	r3, #64	; 0x40
 8006446:	d058      	beq.n	80064fa <HAL_TIM_ConfigClockSource+0x136>
 8006448:	2b40      	cmp	r3, #64	; 0x40
 800644a:	d86f      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x168>
 800644c:	2b30      	cmp	r3, #48	; 0x30
 800644e:	d064      	beq.n	800651a <HAL_TIM_ConfigClockSource+0x156>
 8006450:	2b30      	cmp	r3, #48	; 0x30
 8006452:	d86b      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x168>
 8006454:	2b20      	cmp	r3, #32
 8006456:	d060      	beq.n	800651a <HAL_TIM_ConfigClockSource+0x156>
 8006458:	2b20      	cmp	r3, #32
 800645a:	d867      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x168>
 800645c:	2b00      	cmp	r3, #0
 800645e:	d05c      	beq.n	800651a <HAL_TIM_ConfigClockSource+0x156>
 8006460:	2b10      	cmp	r3, #16
 8006462:	d05a      	beq.n	800651a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006464:	e062      	b.n	800652c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	6899      	ldr	r1, [r3, #8]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f000 faee 	bl	8006a56 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006488:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	609a      	str	r2, [r3, #8]
      break;
 8006492:	e04e      	b.n	8006532 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6818      	ldr	r0, [r3, #0]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	6899      	ldr	r1, [r3, #8]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f000 fad7 	bl	8006a56 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064b6:	609a      	str	r2, [r3, #8]
      break;
 80064b8:	e03b      	b.n	8006532 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6818      	ldr	r0, [r3, #0]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	6859      	ldr	r1, [r3, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	461a      	mov	r2, r3
 80064c8:	f000 fa4e 	bl	8006968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2150      	movs	r1, #80	; 0x50
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 faa5 	bl	8006a22 <TIM_ITRx_SetConfig>
      break;
 80064d8:	e02b      	b.n	8006532 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6818      	ldr	r0, [r3, #0]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	6859      	ldr	r1, [r3, #4]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	461a      	mov	r2, r3
 80064e8:	f000 fa6c 	bl	80069c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2160      	movs	r1, #96	; 0x60
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 fa95 	bl	8006a22 <TIM_ITRx_SetConfig>
      break;
 80064f8:	e01b      	b.n	8006532 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6818      	ldr	r0, [r3, #0]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	6859      	ldr	r1, [r3, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	461a      	mov	r2, r3
 8006508:	f000 fa2e 	bl	8006968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2140      	movs	r1, #64	; 0x40
 8006512:	4618      	mov	r0, r3
 8006514:	f000 fa85 	bl	8006a22 <TIM_ITRx_SetConfig>
      break;
 8006518:	e00b      	b.n	8006532 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4619      	mov	r1, r3
 8006524:	4610      	mov	r0, r2
 8006526:	f000 fa7c 	bl	8006a22 <TIM_ITRx_SetConfig>
        break;
 800652a:	e002      	b.n	8006532 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800652c:	bf00      	nop
 800652e:	e000      	b.n	8006532 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006530:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	bc80      	pop	{r7}
 800655c:	4770      	bx	lr

0800655e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	bc80      	pop	{r7}
 800656e:	4770      	bx	lr

08006570 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	bc80      	pop	{r7}
 8006580:	4770      	bx	lr

08006582 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr

08006594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a29      	ldr	r2, [pc, #164]	; (800664c <TIM_Base_SetConfig+0xb8>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00b      	beq.n	80065c4 <TIM_Base_SetConfig+0x30>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b2:	d007      	beq.n	80065c4 <TIM_Base_SetConfig+0x30>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a26      	ldr	r2, [pc, #152]	; (8006650 <TIM_Base_SetConfig+0xbc>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <TIM_Base_SetConfig+0x30>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a25      	ldr	r2, [pc, #148]	; (8006654 <TIM_Base_SetConfig+0xc0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d108      	bne.n	80065d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a1c      	ldr	r2, [pc, #112]	; (800664c <TIM_Base_SetConfig+0xb8>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d00b      	beq.n	80065f6 <TIM_Base_SetConfig+0x62>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e4:	d007      	beq.n	80065f6 <TIM_Base_SetConfig+0x62>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a19      	ldr	r2, [pc, #100]	; (8006650 <TIM_Base_SetConfig+0xbc>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d003      	beq.n	80065f6 <TIM_Base_SetConfig+0x62>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a18      	ldr	r2, [pc, #96]	; (8006654 <TIM_Base_SetConfig+0xc0>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d108      	bne.n	8006608 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a07      	ldr	r2, [pc, #28]	; (800664c <TIM_Base_SetConfig+0xb8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d103      	bne.n	800663c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	691a      	ldr	r2, [r3, #16]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	615a      	str	r2, [r3, #20]
}
 8006642:	bf00      	nop
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr
 800664c:	40012c00 	.word	0x40012c00
 8006650:	40000400 	.word	0x40000400
 8006654:	40000800 	.word	0x40000800

08006658 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	f023 0201 	bic.w	r2, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 0303 	bic.w	r3, r3, #3
 800668e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	4313      	orrs	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f023 0302 	bic.w	r3, r3, #2
 80066a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a1c      	ldr	r2, [pc, #112]	; (8006720 <TIM_OC1_SetConfig+0xc8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d10c      	bne.n	80066ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f023 0308 	bic.w	r3, r3, #8
 80066ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f023 0304 	bic.w	r3, r3, #4
 80066cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a13      	ldr	r2, [pc, #76]	; (8006720 <TIM_OC1_SetConfig+0xc8>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d111      	bne.n	80066fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	621a      	str	r2, [r3, #32]
}
 8006714:	bf00      	nop
 8006716:	371c      	adds	r7, #28
 8006718:	46bd      	mov	sp, r7
 800671a:	bc80      	pop	{r7}
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	40012c00 	.word	0x40012c00

08006724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	f023 0210 	bic.w	r2, r3, #16
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800675a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	021b      	lsls	r3, r3, #8
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f023 0320 	bic.w	r3, r3, #32
 800676e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	4313      	orrs	r3, r2
 800677a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a1d      	ldr	r2, [pc, #116]	; (80067f4 <TIM_OC2_SetConfig+0xd0>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d10d      	bne.n	80067a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800678a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800679e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a14      	ldr	r2, [pc, #80]	; (80067f4 <TIM_OC2_SetConfig+0xd0>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d113      	bne.n	80067d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	621a      	str	r2, [r3, #32]
}
 80067ea:	bf00      	nop
 80067ec:	371c      	adds	r7, #28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bc80      	pop	{r7}
 80067f2:	4770      	bx	lr
 80067f4:	40012c00 	.word	0x40012c00

080067f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 0303 	bic.w	r3, r3, #3
 800682e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	4313      	orrs	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	021b      	lsls	r3, r3, #8
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	4313      	orrs	r3, r2
 800684c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a1d      	ldr	r2, [pc, #116]	; (80068c8 <TIM_OC3_SetConfig+0xd0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d10d      	bne.n	8006872 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800685c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	021b      	lsls	r3, r3, #8
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	4313      	orrs	r3, r2
 8006868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a14      	ldr	r2, [pc, #80]	; (80068c8 <TIM_OC3_SetConfig+0xd0>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d113      	bne.n	80068a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	4313      	orrs	r3, r2
 8006894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4313      	orrs	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	621a      	str	r2, [r3, #32]
}
 80068bc:	bf00      	nop
 80068be:	371c      	adds	r7, #28
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bc80      	pop	{r7}
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	40012c00 	.word	0x40012c00

080068cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	021b      	lsls	r3, r3, #8
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4313      	orrs	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	031b      	lsls	r3, r3, #12
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	4313      	orrs	r3, r2
 8006922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a0f      	ldr	r2, [pc, #60]	; (8006964 <TIM_OC4_SetConfig+0x98>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d109      	bne.n	8006940 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006932:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	019b      	lsls	r3, r3, #6
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	621a      	str	r2, [r3, #32]
}
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	bc80      	pop	{r7}
 8006962:	4770      	bx	lr
 8006964:	40012c00 	.word	0x40012c00

08006968 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	f023 0201 	bic.w	r2, r3, #1
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	4313      	orrs	r3, r2
 800699c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f023 030a 	bic.w	r3, r3, #10
 80069a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	621a      	str	r2, [r3, #32]
}
 80069ba:	bf00      	nop
 80069bc:	371c      	adds	r7, #28
 80069be:	46bd      	mov	sp, r7
 80069c0:	bc80      	pop	{r7}
 80069c2:	4770      	bx	lr

080069c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	f023 0210 	bic.w	r2, r3, #16
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	031b      	lsls	r3, r3, #12
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	011b      	lsls	r3, r3, #4
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	621a      	str	r2, [r3, #32]
}
 8006a18:	bf00      	nop
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	4770      	bx	lr

08006a22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b085      	sub	sp, #20
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	f043 0307 	orr.w	r3, r3, #7
 8006a44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	609a      	str	r2, [r3, #8]
}
 8006a4c:	bf00      	nop
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	4770      	bx	lr

08006a56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b087      	sub	sp, #28
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	60f8      	str	r0, [r7, #12]
 8006a5e:	60b9      	str	r1, [r7, #8]
 8006a60:	607a      	str	r2, [r7, #4]
 8006a62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	021a      	lsls	r2, r3, #8
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	609a      	str	r2, [r3, #8]
}
 8006a8a:	bf00      	nop
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bc80      	pop	{r7}
 8006a92:	4770      	bx	lr

08006a94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f003 031f 	and.w	r3, r3, #31
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6a1a      	ldr	r2, [r3, #32]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	401a      	ands	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6a1a      	ldr	r2, [r3, #32]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f003 031f 	and.w	r3, r3, #31
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8006acc:	431a      	orrs	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	621a      	str	r2, [r3, #32]
}
 8006ad2:	bf00      	nop
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bc80      	pop	{r7}
 8006ada:	4770      	bx	lr

08006adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d101      	bne.n	8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006af0:	2302      	movs	r3, #2
 8006af2:	e046      	b.n	8006b82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a16      	ldr	r2, [pc, #88]	; (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d00e      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b40:	d009      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a12      	ldr	r2, [pc, #72]	; (8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d004      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a10      	ldr	r2, [pc, #64]	; (8006b94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d10c      	bne.n	8006b70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr
 8006b8c:	40012c00 	.word	0x40012c00
 8006b90:	40000400 	.word	0x40000400
 8006b94:	40000800 	.word	0x40000800

08006b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bc80      	pop	{r7}
 8006ba8:	4770      	bx	lr

08006baa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bb2:	bf00      	nop
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bc80      	pop	{r7}
 8006bba:	4770      	bx	lr

08006bbc <__libc_init_array>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	2600      	movs	r6, #0
 8006bc0:	4d0c      	ldr	r5, [pc, #48]	; (8006bf4 <__libc_init_array+0x38>)
 8006bc2:	4c0d      	ldr	r4, [pc, #52]	; (8006bf8 <__libc_init_array+0x3c>)
 8006bc4:	1b64      	subs	r4, r4, r5
 8006bc6:	10a4      	asrs	r4, r4, #2
 8006bc8:	42a6      	cmp	r6, r4
 8006bca:	d109      	bne.n	8006be0 <__libc_init_array+0x24>
 8006bcc:	f000 f8ec 	bl	8006da8 <_init>
 8006bd0:	2600      	movs	r6, #0
 8006bd2:	4d0a      	ldr	r5, [pc, #40]	; (8006bfc <__libc_init_array+0x40>)
 8006bd4:	4c0a      	ldr	r4, [pc, #40]	; (8006c00 <__libc_init_array+0x44>)
 8006bd6:	1b64      	subs	r4, r4, r5
 8006bd8:	10a4      	asrs	r4, r4, #2
 8006bda:	42a6      	cmp	r6, r4
 8006bdc:	d105      	bne.n	8006bea <__libc_init_array+0x2e>
 8006bde:	bd70      	pop	{r4, r5, r6, pc}
 8006be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006be4:	4798      	blx	r3
 8006be6:	3601      	adds	r6, #1
 8006be8:	e7ee      	b.n	8006bc8 <__libc_init_array+0xc>
 8006bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bee:	4798      	blx	r3
 8006bf0:	3601      	adds	r6, #1
 8006bf2:	e7f2      	b.n	8006bda <__libc_init_array+0x1e>
 8006bf4:	08006de8 	.word	0x08006de8
 8006bf8:	08006de8 	.word	0x08006de8
 8006bfc:	08006de8 	.word	0x08006de8
 8006c00:	08006dec 	.word	0x08006dec

08006c04 <memset>:
 8006c04:	4603      	mov	r3, r0
 8006c06:	4402      	add	r2, r0
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d100      	bne.n	8006c0e <memset+0xa>
 8006c0c:	4770      	bx	lr
 8006c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c12:	e7f9      	b.n	8006c08 <memset+0x4>
 8006c14:	0000      	movs	r0, r0
	...

08006c18 <floor>:
 8006c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c1c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006c20:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8006c24:	2e13      	cmp	r6, #19
 8006c26:	4602      	mov	r2, r0
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4607      	mov	r7, r0
 8006c2c:	460c      	mov	r4, r1
 8006c2e:	4605      	mov	r5, r0
 8006c30:	dc33      	bgt.n	8006c9a <floor+0x82>
 8006c32:	2e00      	cmp	r6, #0
 8006c34:	da14      	bge.n	8006c60 <floor+0x48>
 8006c36:	a334      	add	r3, pc, #208	; (adr r3, 8006d08 <floor+0xf0>)
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	f7f9 fa8e 	bl	800015c <__adddf3>
 8006c40:	2200      	movs	r2, #0
 8006c42:	2300      	movs	r3, #0
 8006c44:	f7f9 fed0 	bl	80009e8 <__aeabi_dcmpgt>
 8006c48:	b138      	cbz	r0, 8006c5a <floor+0x42>
 8006c4a:	2c00      	cmp	r4, #0
 8006c4c:	da58      	bge.n	8006d00 <floor+0xe8>
 8006c4e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006c52:	431d      	orrs	r5, r3
 8006c54:	d001      	beq.n	8006c5a <floor+0x42>
 8006c56:	2500      	movs	r5, #0
 8006c58:	4c2d      	ldr	r4, [pc, #180]	; (8006d10 <floor+0xf8>)
 8006c5a:	4623      	mov	r3, r4
 8006c5c:	462f      	mov	r7, r5
 8006c5e:	e025      	b.n	8006cac <floor+0x94>
 8006c60:	4a2c      	ldr	r2, [pc, #176]	; (8006d14 <floor+0xfc>)
 8006c62:	fa42 f806 	asr.w	r8, r2, r6
 8006c66:	ea01 0208 	and.w	r2, r1, r8
 8006c6a:	4302      	orrs	r2, r0
 8006c6c:	d01e      	beq.n	8006cac <floor+0x94>
 8006c6e:	a326      	add	r3, pc, #152	; (adr r3, 8006d08 <floor+0xf0>)
 8006c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c74:	f7f9 fa72 	bl	800015c <__adddf3>
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f7f9 feb4 	bl	80009e8 <__aeabi_dcmpgt>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d0ea      	beq.n	8006c5a <floor+0x42>
 8006c84:	2c00      	cmp	r4, #0
 8006c86:	bfbe      	ittt	lt
 8006c88:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006c8c:	fa43 f606 	asrlt.w	r6, r3, r6
 8006c90:	19a4      	addlt	r4, r4, r6
 8006c92:	2500      	movs	r5, #0
 8006c94:	ea24 0408 	bic.w	r4, r4, r8
 8006c98:	e7df      	b.n	8006c5a <floor+0x42>
 8006c9a:	2e33      	cmp	r6, #51	; 0x33
 8006c9c:	dd0a      	ble.n	8006cb4 <floor+0x9c>
 8006c9e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006ca2:	d103      	bne.n	8006cac <floor+0x94>
 8006ca4:	f7f9 fa5a 	bl	800015c <__adddf3>
 8006ca8:	4607      	mov	r7, r0
 8006caa:	460b      	mov	r3, r1
 8006cac:	4638      	mov	r0, r7
 8006cae:	4619      	mov	r1, r3
 8006cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cb8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8006cbc:	fa22 f808 	lsr.w	r8, r2, r8
 8006cc0:	ea18 0f00 	tst.w	r8, r0
 8006cc4:	d0f2      	beq.n	8006cac <floor+0x94>
 8006cc6:	a310      	add	r3, pc, #64	; (adr r3, 8006d08 <floor+0xf0>)
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	f7f9 fa46 	bl	800015c <__adddf3>
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f7f9 fe88 	bl	80009e8 <__aeabi_dcmpgt>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d0be      	beq.n	8006c5a <floor+0x42>
 8006cdc:	2c00      	cmp	r4, #0
 8006cde:	da02      	bge.n	8006ce6 <floor+0xce>
 8006ce0:	2e14      	cmp	r6, #20
 8006ce2:	d103      	bne.n	8006cec <floor+0xd4>
 8006ce4:	3401      	adds	r4, #1
 8006ce6:	ea25 0508 	bic.w	r5, r5, r8
 8006cea:	e7b6      	b.n	8006c5a <floor+0x42>
 8006cec:	2301      	movs	r3, #1
 8006cee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006cf2:	fa03 f606 	lsl.w	r6, r3, r6
 8006cf6:	4435      	add	r5, r6
 8006cf8:	42bd      	cmp	r5, r7
 8006cfa:	bf38      	it	cc
 8006cfc:	18e4      	addcc	r4, r4, r3
 8006cfe:	e7f2      	b.n	8006ce6 <floor+0xce>
 8006d00:	2500      	movs	r5, #0
 8006d02:	462c      	mov	r4, r5
 8006d04:	e7a9      	b.n	8006c5a <floor+0x42>
 8006d06:	bf00      	nop
 8006d08:	8800759c 	.word	0x8800759c
 8006d0c:	7e37e43c 	.word	0x7e37e43c
 8006d10:	bff00000 	.word	0xbff00000
 8006d14:	000fffff 	.word	0x000fffff

08006d18 <round>:
 8006d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006d1e:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8006d22:	2c13      	cmp	r4, #19
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	4606      	mov	r6, r0
 8006d2a:	460d      	mov	r5, r1
 8006d2c:	dc19      	bgt.n	8006d62 <round+0x4a>
 8006d2e:	2c00      	cmp	r4, #0
 8006d30:	da09      	bge.n	8006d46 <round+0x2e>
 8006d32:	3401      	adds	r4, #1
 8006d34:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8006d38:	d103      	bne.n	8006d42 <round+0x2a>
 8006d3a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006d3e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006d42:	2200      	movs	r2, #0
 8006d44:	e02a      	b.n	8006d9c <round+0x84>
 8006d46:	4917      	ldr	r1, [pc, #92]	; (8006da4 <round+0x8c>)
 8006d48:	4121      	asrs	r1, r4
 8006d4a:	ea03 0001 	and.w	r0, r3, r1
 8006d4e:	4302      	orrs	r2, r0
 8006d50:	d010      	beq.n	8006d74 <round+0x5c>
 8006d52:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006d56:	fa42 f404 	asr.w	r4, r2, r4
 8006d5a:	4423      	add	r3, r4
 8006d5c:	ea23 0301 	bic.w	r3, r3, r1
 8006d60:	e7ef      	b.n	8006d42 <round+0x2a>
 8006d62:	2c33      	cmp	r4, #51	; 0x33
 8006d64:	dd09      	ble.n	8006d7a <round+0x62>
 8006d66:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006d6a:	d103      	bne.n	8006d74 <round+0x5c>
 8006d6c:	f7f9 f9f6 	bl	800015c <__adddf3>
 8006d70:	4606      	mov	r6, r0
 8006d72:	460d      	mov	r5, r1
 8006d74:	4630      	mov	r0, r6
 8006d76:	4629      	mov	r1, r5
 8006d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006d7e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006d82:	40f9      	lsrs	r1, r7
 8006d84:	4208      	tst	r0, r1
 8006d86:	d0f5      	beq.n	8006d74 <round+0x5c>
 8006d88:	2001      	movs	r0, #1
 8006d8a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8006d8e:	fa00 f404 	lsl.w	r4, r0, r4
 8006d92:	1912      	adds	r2, r2, r4
 8006d94:	bf28      	it	cs
 8006d96:	181b      	addcs	r3, r3, r0
 8006d98:	ea22 0201 	bic.w	r2, r2, r1
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	4610      	mov	r0, r2
 8006da0:	e7e6      	b.n	8006d70 <round+0x58>
 8006da2:	bf00      	nop
 8006da4:	000fffff 	.word	0x000fffff

08006da8 <_init>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	bf00      	nop
 8006dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dae:	bc08      	pop	{r3}
 8006db0:	469e      	mov	lr, r3
 8006db2:	4770      	bx	lr

08006db4 <_fini>:
 8006db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db6:	bf00      	nop
 8006db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dba:	bc08      	pop	{r3}
 8006dbc:	469e      	mov	lr, r3
 8006dbe:	4770      	bx	lr
